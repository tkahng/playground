# For more details, read this: https://coolify.io/docs/github-actions
name: Build and test
on:
  push:
    branches: ["develop"]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  amd64:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.1" # Use Go version 1.23.5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.17.0
      # Install dependencies
      - name: Install dependencies
        run: go mod tidy

      - name: Build Admin dashboard UI
        run: npm --prefix ./ui install && npm --prefix ./ui run build

      - name: Setup Test DB
        run: go run . migrate testup

      - name: Run tests
        run: go test -v ./... -race --cover -coverprofile=coverage.out

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN  }}

      - name: Build image and push to registry
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Run Migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: go run . migrate up

      - name: Trigger Dokploy deployment
        shell: bash
        env:
          DOKPLOY_URL: ${{ secrets.DOKPLOY_URL }}
          DOKPLOY_AUTH_TOKEN: ${{ secrets.DOKPLOY_AUTH_TOKEN }}
          DOKPLOY_APPLICATION_ID: ${{ secrets.DOKPLOY_APPLICATION_ID }}
        run: |
          response=$(curl -X 'POST' \
            "$DOKPLOY_URL/api/application.deploy" \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -H "x-api-key: $DOKPLOY_AUTH_TOKEN" \
            -d "{\"applicationId\": \"$DOKPLOY_APPLICATION_ID\"}" \
            -w "%{http_code}" \
            -o /dev/null \
            -s)

          if [ "$response" -ne 200 ]; then
            echo "Deployment failed with status code: $response"
            exit 1
          fi
