// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types"
)

// Notification is an object representing the database table.
type Notification struct {
	ID        uuid.UUID                   `db:"id,pk" json:"id"`
	CreatedAt time.Time                   `db:"created_at" json:"created_at"`
	UpdatedAt time.Time                   `db:"updated_at" json:"updated_at"`
	Channel   string                      `db:"channel" json:"channel"`
	UserID    null.Val[uuid.UUID]         `db:"user_id" json:"user_id"`
	Content   types.JSON[json.RawMessage] `db:"content" json:"content"`
	Type      string                      `db:"type" json:"type"`

	R notificationR `db:"-" json:"-"`
}

// NotificationSlice is an alias for a slice of pointers to Notification.
// This should almost always be used instead of []*Notification.
type NotificationSlice []*Notification

// Notifications contains methods to work with the notifications table
var Notifications = psql.NewTablex[*Notification, NotificationSlice, *NotificationSetter]("", "notifications")

// NotificationsQuery is a query on the notifications table
type NotificationsQuery = *psql.ViewQuery[*Notification, NotificationSlice]

// notificationR is where relationships are stored.
type notificationR struct {
	User *User `json:"User"` // notifications.fk_notifications_user
}

type notificationColumnNames struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Channel   string
	UserID    string
	Content   string
	Type      string
}

var NotificationColumns = buildNotificationColumns("notifications")

type notificationColumns struct {
	tableAlias string
	ID         psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
	Channel    psql.Expression
	UserID     psql.Expression
	Content    psql.Expression
	Type       psql.Expression
}

func (c notificationColumns) Alias() string {
	return c.tableAlias
}

func (notificationColumns) AliasedAs(alias string) notificationColumns {
	return buildNotificationColumns(alias)
}

func buildNotificationColumns(alias string) notificationColumns {
	return notificationColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
		Channel:    psql.Quote(alias, "channel"),
		UserID:     psql.Quote(alias, "user_id"),
		Content:    psql.Quote(alias, "content"),
		Type:       psql.Quote(alias, "type"),
	}
}

type notificationWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, uuid.UUID]
	CreatedAt psql.WhereMod[Q, time.Time]
	UpdatedAt psql.WhereMod[Q, time.Time]
	Channel   psql.WhereMod[Q, string]
	UserID    psql.WhereNullMod[Q, uuid.UUID]
	Content   psql.WhereMod[Q, types.JSON[json.RawMessage]]
	Type      psql.WhereMod[Q, string]
}

func (notificationWhere[Q]) AliasedAs(alias string) notificationWhere[Q] {
	return buildNotificationWhere[Q](buildNotificationColumns(alias))
}

func buildNotificationWhere[Q psql.Filterable](cols notificationColumns) notificationWhere[Q] {
	return notificationWhere[Q]{
		ID:        psql.Where[Q, uuid.UUID](cols.ID),
		CreatedAt: psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt: psql.Where[Q, time.Time](cols.UpdatedAt),
		Channel:   psql.Where[Q, string](cols.Channel),
		UserID:    psql.WhereNull[Q, uuid.UUID](cols.UserID),
		Content:   psql.Where[Q, types.JSON[json.RawMessage]](cols.Content),
		Type:      psql.Where[Q, string](cols.Type),
	}
}

var NotificationErrors = &notificationErrors{
	ErrUniqueNotificationsPkey: &UniqueConstraintError{s: "notifications_pkey"},
}

type notificationErrors struct {
	ErrUniqueNotificationsPkey *UniqueConstraintError
}

// NotificationSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type NotificationSetter struct {
	ID        omit.Val[uuid.UUID]                   `db:"id,pk" json:"id"`
	CreatedAt omit.Val[time.Time]                   `db:"created_at" json:"created_at"`
	UpdatedAt omit.Val[time.Time]                   `db:"updated_at" json:"updated_at"`
	Channel   omit.Val[string]                      `db:"channel" json:"channel"`
	UserID    omitnull.Val[uuid.UUID]               `db:"user_id" json:"user_id"`
	Content   omit.Val[types.JSON[json.RawMessage]] `db:"content" json:"content"`
	Type      omit.Val[string]                      `db:"type" json:"type"`
}

func (s NotificationSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	if !s.Channel.IsUnset() {
		vals = append(vals, "channel")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.Content.IsUnset() {
		vals = append(vals, "content")
	}

	if !s.Type.IsUnset() {
		vals = append(vals, "type")
	}

	return vals
}

func (s NotificationSetter) Overwrite(t *Notification) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
	if !s.Channel.IsUnset() {
		t.Channel, _ = s.Channel.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.GetNull()
	}
	if !s.Content.IsUnset() {
		t.Content, _ = s.Content.Get()
	}
	if !s.Type.IsUnset() {
		t.Type, _ = s.Type.Get()
	}
}

func (s *NotificationSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Notifications.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 7)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.CreatedAt.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.UpdatedAt)
		}

		if s.Channel.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Channel)
		}

		if s.UserID.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.UserID)
		}

		if s.Content.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.Content)
		}

		if s.Type.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.Type)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s NotificationSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s NotificationSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	if !s.Channel.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "channel")...),
			psql.Arg(s.Channel),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.Content.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "content")...),
			psql.Arg(s.Content),
		}})
	}

	if !s.Type.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "type")...),
			psql.Arg(s.Type),
		}})
	}

	return exprs
}

// FindNotification retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindNotification(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*Notification, error) {
	if len(cols) == 0 {
		return Notifications.Query(
			SelectWhere.Notifications.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Notifications.Query(
		SelectWhere.Notifications.ID.EQ(IDPK),
		sm.Columns(Notifications.Columns().Only(cols...)),
	).One(ctx, exec)
}

// NotificationExists checks the presence of a single record by primary key
func NotificationExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return Notifications.Query(
		SelectWhere.Notifications.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Notification is retrieved from the database
func (o *Notification) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Notifications.AfterSelectHooks.RunHooks(ctx, exec, NotificationSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Notifications.AfterInsertHooks.RunHooks(ctx, exec, NotificationSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Notifications.AfterUpdateHooks.RunHooks(ctx, exec, NotificationSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Notifications.AfterDeleteHooks.RunHooks(ctx, exec, NotificationSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Notification
func (o *Notification) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Notification) pkEQ() dialect.Expression {
	return psql.Quote("notifications", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Notification
func (o *Notification) Update(ctx context.Context, exec bob.Executor, s *NotificationSetter) error {
	v, err := Notifications.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Notification record with an executor
func (o *Notification) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Notifications.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Notification using the executor
func (o *Notification) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Notifications.Query(
		SelectWhere.Notifications.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after NotificationSlice is retrieved from the database
func (o NotificationSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Notifications.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Notifications.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Notifications.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Notifications.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o NotificationSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("notifications", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o NotificationSlice) copyMatchingRows(from ...*Notification) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o NotificationSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Notifications.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Notification:
				o.copyMatchingRows(retrieved)
			case []*Notification:
				o.copyMatchingRows(retrieved...)
			case NotificationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Notification or a slice of Notification
				// then run the AfterUpdateHooks on the slice
				_, err = Notifications.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o NotificationSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Notifications.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Notification:
				o.copyMatchingRows(retrieved)
			case []*Notification:
				o.copyMatchingRows(retrieved...)
			case NotificationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Notification or a slice of Notification
				// then run the AfterDeleteHooks on the slice
				_, err = Notifications.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o NotificationSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals NotificationSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Notifications.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o NotificationSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Notifications.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o NotificationSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Notifications.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type notificationJoins[Q dialect.Joinable] struct {
	typ  string
	User func(context.Context) modAs[Q, userColumns]
}

func (j notificationJoins[Q]) aliasedAs(alias string) notificationJoins[Q] {
	return buildNotificationJoins[Q](buildNotificationColumns(alias), j.typ)
}

func buildNotificationJoins[Q dialect.Joinable](cols notificationColumns, typ string) notificationJoins[Q] {
	return notificationJoins[Q]{
		typ:  typ,
		User: notificationsJoinUser[Q](cols, typ),
	}
}

func notificationsJoinUser[Q dialect.Joinable](from notificationColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// User starts a query for related objects on users
func (o *Notification) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os NotificationSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *Notification) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("notification cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.Notifications = NotificationSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("notification has no relationship %q", name)
	}
}

func PreloadNotificationUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.Notifications,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.Notifications.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadNotificationUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadNotificationUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load NotificationUser", retrieved)
		}

		err := loader.LoadNotificationUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadNotificationUser loads the notification's User into the .R struct
func (o *Notification) LoadNotificationUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Notifications = NotificationSlice{o}

	o.R.User = related
	return nil
}

// LoadNotificationUser loads the notification's User into the .R struct
func (os NotificationSlice) LoadNotificationUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID.GetOrZero() != rel.ID {
				continue
			}

			rel.R.Notifications = append(rel.R.Notifications, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachNotificationUser0(ctx context.Context, exec bob.Executor, count int, notification0 *Notification, user1 *User) (*Notification, error) {
	setter := &NotificationSetter{
		UserID: omitnull.From(user1.ID),
	}

	err := notification0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachNotificationUser0: %w", err)
	}

	return notification0, nil
}

func (notification0 *Notification) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachNotificationUser0(ctx, exec, 1, notification0, user1)
	if err != nil {
		return err
	}

	notification0.R.User = user1

	user1.R.Notifications = append(user1.R.Notifications, notification0)

	return nil
}

func (notification0 *Notification) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachNotificationUser0(ctx, exec, 1, notification0, user1)
	if err != nil {
		return err
	}

	notification0.R.User = user1

	user1.R.Notifications = append(user1.R.Notifications, notification0)

	return nil
}
