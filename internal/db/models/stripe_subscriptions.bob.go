// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types"
)

// StripeSubscription is an object representing the database table.
type StripeSubscription struct {
	ID                 string                      `db:"id,pk" json:"id"`
	UserID             uuid.UUID                   `db:"user_id" json:"user_id"`
	Status             StripeSubscriptionStatus    `db:"status" json:"status"`
	Metadata           types.JSON[json.RawMessage] `db:"metadata" json:"metadata"`
	PriceID            string                      `db:"price_id" json:"price_id"`
	Quantity           int64                       `db:"quantity" json:"quantity"`
	CancelAtPeriodEnd  bool                        `db:"cancel_at_period_end" json:"cancel_at_period_end"`
	Created            time.Time                   `db:"created" json:"created"`
	CurrentPeriodStart time.Time                   `db:"current_period_start" json:"current_period_start"`
	CurrentPeriodEnd   time.Time                   `db:"current_period_end" json:"current_period_end"`
	EndedAt            null.Val[time.Time]         `db:"ended_at" json:"ended_at"`
	CancelAt           null.Val[time.Time]         `db:"cancel_at" json:"cancel_at"`
	CanceledAt         null.Val[time.Time]         `db:"canceled_at" json:"canceled_at"`
	TrialStart         null.Val[time.Time]         `db:"trial_start" json:"trial_start"`
	TrialEnd           null.Val[time.Time]         `db:"trial_end" json:"trial_end"`
	CreatedAt          time.Time                   `db:"created_at" json:"created_at"`
	UpdatedAt          time.Time                   `db:"updated_at" json:"updated_at"`

	R stripeSubscriptionR `db:"-" json:"-"`
}

// StripeSubscriptionSlice is an alias for a slice of pointers to StripeSubscription.
// This should almost always be used instead of []*StripeSubscription.
type StripeSubscriptionSlice []*StripeSubscription

// StripeSubscriptions contains methods to work with the stripe_subscriptions table
var StripeSubscriptions = psql.NewTablex[*StripeSubscription, StripeSubscriptionSlice, *StripeSubscriptionSetter]("", "stripe_subscriptions")

// StripeSubscriptionsQuery is a query on the stripe_subscriptions table
type StripeSubscriptionsQuery = *psql.ViewQuery[*StripeSubscription, StripeSubscriptionSlice]

// stripeSubscriptionR is where relationships are stored.
type stripeSubscriptionR struct {
	PriceStripePrice *StripePrice `json:"PriceStripePrice"` // stripe_subscriptions.stripe_subscriptions_price_id_fkey
	User             *User        `json:"User"`             // stripe_subscriptions.stripe_subscriptions_user_id_fkey
}

type stripeSubscriptionColumnNames struct {
	ID                 string
	UserID             string
	Status             string
	Metadata           string
	PriceID            string
	Quantity           string
	CancelAtPeriodEnd  string
	Created            string
	CurrentPeriodStart string
	CurrentPeriodEnd   string
	EndedAt            string
	CancelAt           string
	CanceledAt         string
	TrialStart         string
	TrialEnd           string
	CreatedAt          string
	UpdatedAt          string
}

var StripeSubscriptionColumns = buildStripeSubscriptionColumns("stripe_subscriptions")

type stripeSubscriptionColumns struct {
	tableAlias         string
	ID                 psql.Expression
	UserID             psql.Expression
	Status             psql.Expression
	Metadata           psql.Expression
	PriceID            psql.Expression
	Quantity           psql.Expression
	CancelAtPeriodEnd  psql.Expression
	Created            psql.Expression
	CurrentPeriodStart psql.Expression
	CurrentPeriodEnd   psql.Expression
	EndedAt            psql.Expression
	CancelAt           psql.Expression
	CanceledAt         psql.Expression
	TrialStart         psql.Expression
	TrialEnd           psql.Expression
	CreatedAt          psql.Expression
	UpdatedAt          psql.Expression
}

func (c stripeSubscriptionColumns) Alias() string {
	return c.tableAlias
}

func (stripeSubscriptionColumns) AliasedAs(alias string) stripeSubscriptionColumns {
	return buildStripeSubscriptionColumns(alias)
}

func buildStripeSubscriptionColumns(alias string) stripeSubscriptionColumns {
	return stripeSubscriptionColumns{
		tableAlias:         alias,
		ID:                 psql.Quote(alias, "id"),
		UserID:             psql.Quote(alias, "user_id"),
		Status:             psql.Quote(alias, "status"),
		Metadata:           psql.Quote(alias, "metadata"),
		PriceID:            psql.Quote(alias, "price_id"),
		Quantity:           psql.Quote(alias, "quantity"),
		CancelAtPeriodEnd:  psql.Quote(alias, "cancel_at_period_end"),
		Created:            psql.Quote(alias, "created"),
		CurrentPeriodStart: psql.Quote(alias, "current_period_start"),
		CurrentPeriodEnd:   psql.Quote(alias, "current_period_end"),
		EndedAt:            psql.Quote(alias, "ended_at"),
		CancelAt:           psql.Quote(alias, "cancel_at"),
		CanceledAt:         psql.Quote(alias, "canceled_at"),
		TrialStart:         psql.Quote(alias, "trial_start"),
		TrialEnd:           psql.Quote(alias, "trial_end"),
		CreatedAt:          psql.Quote(alias, "created_at"),
		UpdatedAt:          psql.Quote(alias, "updated_at"),
	}
}

type stripeSubscriptionWhere[Q psql.Filterable] struct {
	ID                 psql.WhereMod[Q, string]
	UserID             psql.WhereMod[Q, uuid.UUID]
	Status             psql.WhereMod[Q, StripeSubscriptionStatus]
	Metadata           psql.WhereMod[Q, types.JSON[json.RawMessage]]
	PriceID            psql.WhereMod[Q, string]
	Quantity           psql.WhereMod[Q, int64]
	CancelAtPeriodEnd  psql.WhereMod[Q, bool]
	Created            psql.WhereMod[Q, time.Time]
	CurrentPeriodStart psql.WhereMod[Q, time.Time]
	CurrentPeriodEnd   psql.WhereMod[Q, time.Time]
	EndedAt            psql.WhereNullMod[Q, time.Time]
	CancelAt           psql.WhereNullMod[Q, time.Time]
	CanceledAt         psql.WhereNullMod[Q, time.Time]
	TrialStart         psql.WhereNullMod[Q, time.Time]
	TrialEnd           psql.WhereNullMod[Q, time.Time]
	CreatedAt          psql.WhereMod[Q, time.Time]
	UpdatedAt          psql.WhereMod[Q, time.Time]
}

func (stripeSubscriptionWhere[Q]) AliasedAs(alias string) stripeSubscriptionWhere[Q] {
	return buildStripeSubscriptionWhere[Q](buildStripeSubscriptionColumns(alias))
}

func buildStripeSubscriptionWhere[Q psql.Filterable](cols stripeSubscriptionColumns) stripeSubscriptionWhere[Q] {
	return stripeSubscriptionWhere[Q]{
		ID:                 psql.Where[Q, string](cols.ID),
		UserID:             psql.Where[Q, uuid.UUID](cols.UserID),
		Status:             psql.Where[Q, StripeSubscriptionStatus](cols.Status),
		Metadata:           psql.Where[Q, types.JSON[json.RawMessage]](cols.Metadata),
		PriceID:            psql.Where[Q, string](cols.PriceID),
		Quantity:           psql.Where[Q, int64](cols.Quantity),
		CancelAtPeriodEnd:  psql.Where[Q, bool](cols.CancelAtPeriodEnd),
		Created:            psql.Where[Q, time.Time](cols.Created),
		CurrentPeriodStart: psql.Where[Q, time.Time](cols.CurrentPeriodStart),
		CurrentPeriodEnd:   psql.Where[Q, time.Time](cols.CurrentPeriodEnd),
		EndedAt:            psql.WhereNull[Q, time.Time](cols.EndedAt),
		CancelAt:           psql.WhereNull[Q, time.Time](cols.CancelAt),
		CanceledAt:         psql.WhereNull[Q, time.Time](cols.CanceledAt),
		TrialStart:         psql.WhereNull[Q, time.Time](cols.TrialStart),
		TrialEnd:           psql.WhereNull[Q, time.Time](cols.TrialEnd),
		CreatedAt:          psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:          psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var StripeSubscriptionErrors = &stripeSubscriptionErrors{
	ErrUniqueStripeSubscriptionsPkey: &UniqueConstraintError{s: "stripe_subscriptions_pkey"},
}

type stripeSubscriptionErrors struct {
	ErrUniqueStripeSubscriptionsPkey *UniqueConstraintError
}

// StripeSubscriptionSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type StripeSubscriptionSetter struct {
	ID                 omit.Val[string]                      `db:"id,pk" json:"id"`
	UserID             omit.Val[uuid.UUID]                   `db:"user_id" json:"user_id"`
	Status             omit.Val[StripeSubscriptionStatus]    `db:"status" json:"status"`
	Metadata           omit.Val[types.JSON[json.RawMessage]] `db:"metadata" json:"metadata"`
	PriceID            omit.Val[string]                      `db:"price_id" json:"price_id"`
	Quantity           omit.Val[int64]                       `db:"quantity" json:"quantity"`
	CancelAtPeriodEnd  omit.Val[bool]                        `db:"cancel_at_period_end" json:"cancel_at_period_end"`
	Created            omit.Val[time.Time]                   `db:"created" json:"created"`
	CurrentPeriodStart omit.Val[time.Time]                   `db:"current_period_start" json:"current_period_start"`
	CurrentPeriodEnd   omit.Val[time.Time]                   `db:"current_period_end" json:"current_period_end"`
	EndedAt            omitnull.Val[time.Time]               `db:"ended_at" json:"ended_at"`
	CancelAt           omitnull.Val[time.Time]               `db:"cancel_at" json:"cancel_at"`
	CanceledAt         omitnull.Val[time.Time]               `db:"canceled_at" json:"canceled_at"`
	TrialStart         omitnull.Val[time.Time]               `db:"trial_start" json:"trial_start"`
	TrialEnd           omitnull.Val[time.Time]               `db:"trial_end" json:"trial_end"`
	CreatedAt          omit.Val[time.Time]                   `db:"created_at" json:"created_at"`
	UpdatedAt          omit.Val[time.Time]                   `db:"updated_at" json:"updated_at"`
}

func (s StripeSubscriptionSetter) SetColumns() []string {
	vals := make([]string, 0, 17)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.Status.IsUnset() {
		vals = append(vals, "status")
	}

	if !s.Metadata.IsUnset() {
		vals = append(vals, "metadata")
	}

	if !s.PriceID.IsUnset() {
		vals = append(vals, "price_id")
	}

	if !s.Quantity.IsUnset() {
		vals = append(vals, "quantity")
	}

	if !s.CancelAtPeriodEnd.IsUnset() {
		vals = append(vals, "cancel_at_period_end")
	}

	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}

	if !s.CurrentPeriodStart.IsUnset() {
		vals = append(vals, "current_period_start")
	}

	if !s.CurrentPeriodEnd.IsUnset() {
		vals = append(vals, "current_period_end")
	}

	if !s.EndedAt.IsUnset() {
		vals = append(vals, "ended_at")
	}

	if !s.CancelAt.IsUnset() {
		vals = append(vals, "cancel_at")
	}

	if !s.CanceledAt.IsUnset() {
		vals = append(vals, "canceled_at")
	}

	if !s.TrialStart.IsUnset() {
		vals = append(vals, "trial_start")
	}

	if !s.TrialEnd.IsUnset() {
		vals = append(vals, "trial_end")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s StripeSubscriptionSetter) Overwrite(t *StripeSubscription) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.Status.IsUnset() {
		t.Status, _ = s.Status.Get()
	}
	if !s.Metadata.IsUnset() {
		t.Metadata, _ = s.Metadata.Get()
	}
	if !s.PriceID.IsUnset() {
		t.PriceID, _ = s.PriceID.Get()
	}
	if !s.Quantity.IsUnset() {
		t.Quantity, _ = s.Quantity.Get()
	}
	if !s.CancelAtPeriodEnd.IsUnset() {
		t.CancelAtPeriodEnd, _ = s.CancelAtPeriodEnd.Get()
	}
	if !s.Created.IsUnset() {
		t.Created, _ = s.Created.Get()
	}
	if !s.CurrentPeriodStart.IsUnset() {
		t.CurrentPeriodStart, _ = s.CurrentPeriodStart.Get()
	}
	if !s.CurrentPeriodEnd.IsUnset() {
		t.CurrentPeriodEnd, _ = s.CurrentPeriodEnd.Get()
	}
	if !s.EndedAt.IsUnset() {
		t.EndedAt, _ = s.EndedAt.GetNull()
	}
	if !s.CancelAt.IsUnset() {
		t.CancelAt, _ = s.CancelAt.GetNull()
	}
	if !s.CanceledAt.IsUnset() {
		t.CanceledAt, _ = s.CanceledAt.GetNull()
	}
	if !s.TrialStart.IsUnset() {
		t.TrialStart, _ = s.TrialStart.GetNull()
	}
	if !s.TrialEnd.IsUnset() {
		t.TrialEnd, _ = s.TrialEnd.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *StripeSubscriptionSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return StripeSubscriptions.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 17)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.UserID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.UserID)
		}

		if s.Status.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Status)
		}

		if s.Metadata.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Metadata)
		}

		if s.PriceID.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.PriceID)
		}

		if s.Quantity.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.Quantity)
		}

		if s.CancelAtPeriodEnd.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.CancelAtPeriodEnd)
		}

		if s.Created.IsUnset() {
			vals[7] = psql.Raw("DEFAULT")
		} else {
			vals[7] = psql.Arg(s.Created)
		}

		if s.CurrentPeriodStart.IsUnset() {
			vals[8] = psql.Raw("DEFAULT")
		} else {
			vals[8] = psql.Arg(s.CurrentPeriodStart)
		}

		if s.CurrentPeriodEnd.IsUnset() {
			vals[9] = psql.Raw("DEFAULT")
		} else {
			vals[9] = psql.Arg(s.CurrentPeriodEnd)
		}

		if s.EndedAt.IsUnset() {
			vals[10] = psql.Raw("DEFAULT")
		} else {
			vals[10] = psql.Arg(s.EndedAt)
		}

		if s.CancelAt.IsUnset() {
			vals[11] = psql.Raw("DEFAULT")
		} else {
			vals[11] = psql.Arg(s.CancelAt)
		}

		if s.CanceledAt.IsUnset() {
			vals[12] = psql.Raw("DEFAULT")
		} else {
			vals[12] = psql.Arg(s.CanceledAt)
		}

		if s.TrialStart.IsUnset() {
			vals[13] = psql.Raw("DEFAULT")
		} else {
			vals[13] = psql.Arg(s.TrialStart)
		}

		if s.TrialEnd.IsUnset() {
			vals[14] = psql.Raw("DEFAULT")
		} else {
			vals[14] = psql.Arg(s.TrialEnd)
		}

		if s.CreatedAt.IsUnset() {
			vals[15] = psql.Raw("DEFAULT")
		} else {
			vals[15] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[16] = psql.Raw("DEFAULT")
		} else {
			vals[16] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s StripeSubscriptionSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s StripeSubscriptionSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 17)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.Status.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "status")...),
			psql.Arg(s.Status),
		}})
	}

	if !s.Metadata.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "metadata")...),
			psql.Arg(s.Metadata),
		}})
	}

	if !s.PriceID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "price_id")...),
			psql.Arg(s.PriceID),
		}})
	}

	if !s.Quantity.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "quantity")...),
			psql.Arg(s.Quantity),
		}})
	}

	if !s.CancelAtPeriodEnd.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "cancel_at_period_end")...),
			psql.Arg(s.CancelAtPeriodEnd),
		}})
	}

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.CurrentPeriodStart.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "current_period_start")...),
			psql.Arg(s.CurrentPeriodStart),
		}})
	}

	if !s.CurrentPeriodEnd.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "current_period_end")...),
			psql.Arg(s.CurrentPeriodEnd),
		}})
	}

	if !s.EndedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "ended_at")...),
			psql.Arg(s.EndedAt),
		}})
	}

	if !s.CancelAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "cancel_at")...),
			psql.Arg(s.CancelAt),
		}})
	}

	if !s.CanceledAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "canceled_at")...),
			psql.Arg(s.CanceledAt),
		}})
	}

	if !s.TrialStart.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "trial_start")...),
			psql.Arg(s.TrialStart),
		}})
	}

	if !s.TrialEnd.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "trial_end")...),
			psql.Arg(s.TrialEnd),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindStripeSubscription retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindStripeSubscription(ctx context.Context, exec bob.Executor, IDPK string, cols ...string) (*StripeSubscription, error) {
	if len(cols) == 0 {
		return StripeSubscriptions.Query(
			SelectWhere.StripeSubscriptions.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return StripeSubscriptions.Query(
		SelectWhere.StripeSubscriptions.ID.EQ(IDPK),
		sm.Columns(StripeSubscriptions.Columns().Only(cols...)),
	).One(ctx, exec)
}

// StripeSubscriptionExists checks the presence of a single record by primary key
func StripeSubscriptionExists(ctx context.Context, exec bob.Executor, IDPK string) (bool, error) {
	return StripeSubscriptions.Query(
		SelectWhere.StripeSubscriptions.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after StripeSubscription is retrieved from the database
func (o *StripeSubscription) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = StripeSubscriptions.AfterSelectHooks.RunHooks(ctx, exec, StripeSubscriptionSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = StripeSubscriptions.AfterInsertHooks.RunHooks(ctx, exec, StripeSubscriptionSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = StripeSubscriptions.AfterUpdateHooks.RunHooks(ctx, exec, StripeSubscriptionSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = StripeSubscriptions.AfterDeleteHooks.RunHooks(ctx, exec, StripeSubscriptionSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the StripeSubscription
func (o *StripeSubscription) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *StripeSubscription) pkEQ() dialect.Expression {
	return psql.Quote("stripe_subscriptions", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the StripeSubscription
func (o *StripeSubscription) Update(ctx context.Context, exec bob.Executor, s *StripeSubscriptionSetter) error {
	v, err := StripeSubscriptions.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single StripeSubscription record with an executor
func (o *StripeSubscription) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := StripeSubscriptions.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the StripeSubscription using the executor
func (o *StripeSubscription) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := StripeSubscriptions.Query(
		SelectWhere.StripeSubscriptions.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after StripeSubscriptionSlice is retrieved from the database
func (o StripeSubscriptionSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = StripeSubscriptions.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = StripeSubscriptions.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = StripeSubscriptions.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = StripeSubscriptions.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o StripeSubscriptionSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("stripe_subscriptions", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o StripeSubscriptionSlice) copyMatchingRows(from ...*StripeSubscription) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o StripeSubscriptionSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return StripeSubscriptions.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *StripeSubscription:
				o.copyMatchingRows(retrieved)
			case []*StripeSubscription:
				o.copyMatchingRows(retrieved...)
			case StripeSubscriptionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a StripeSubscription or a slice of StripeSubscription
				// then run the AfterUpdateHooks on the slice
				_, err = StripeSubscriptions.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o StripeSubscriptionSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return StripeSubscriptions.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *StripeSubscription:
				o.copyMatchingRows(retrieved)
			case []*StripeSubscription:
				o.copyMatchingRows(retrieved...)
			case StripeSubscriptionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a StripeSubscription or a slice of StripeSubscription
				// then run the AfterDeleteHooks on the slice
				_, err = StripeSubscriptions.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o StripeSubscriptionSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals StripeSubscriptionSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := StripeSubscriptions.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o StripeSubscriptionSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := StripeSubscriptions.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o StripeSubscriptionSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := StripeSubscriptions.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type stripeSubscriptionJoins[Q dialect.Joinable] struct {
	typ              string
	PriceStripePrice func(context.Context) modAs[Q, stripePriceColumns]
	User             func(context.Context) modAs[Q, userColumns]
}

func (j stripeSubscriptionJoins[Q]) aliasedAs(alias string) stripeSubscriptionJoins[Q] {
	return buildStripeSubscriptionJoins[Q](buildStripeSubscriptionColumns(alias), j.typ)
}

func buildStripeSubscriptionJoins[Q dialect.Joinable](cols stripeSubscriptionColumns, typ string) stripeSubscriptionJoins[Q] {
	return stripeSubscriptionJoins[Q]{
		typ:              typ,
		PriceStripePrice: stripeSubscriptionsJoinPriceStripePrice[Q](cols, typ),
		User:             stripeSubscriptionsJoinUser[Q](cols, typ),
	}
}

func stripeSubscriptionsJoinPriceStripePrice[Q dialect.Joinable](from stripeSubscriptionColumns, typ string) func(context.Context) modAs[Q, stripePriceColumns] {
	return func(ctx context.Context) modAs[Q, stripePriceColumns] {
		return modAs[Q, stripePriceColumns]{
			c: StripePriceColumns,
			f: func(to stripePriceColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, StripePrices.Name().As(to.Alias())).On(
						to.ID.EQ(from.PriceID),
					))
				}

				return mods
			},
		}
	}
}

func stripeSubscriptionsJoinUser[Q dialect.Joinable](from stripeSubscriptionColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// PriceStripePrice starts a query for related objects on stripe_prices
func (o *StripeSubscription) PriceStripePrice(mods ...bob.Mod[*dialect.SelectQuery]) StripePricesQuery {
	return StripePrices.Query(append(mods,
		sm.Where(StripePriceColumns.ID.EQ(psql.Arg(o.PriceID))),
	)...)
}

func (os StripeSubscriptionSlice) PriceStripePrice(mods ...bob.Mod[*dialect.SelectQuery]) StripePricesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.PriceID)
	}

	return StripePrices.Query(append(mods,
		sm.Where(psql.Group(StripePriceColumns.ID).In(PKArgs...)),
	)...)
}

// User starts a query for related objects on users
func (o *StripeSubscription) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os StripeSubscriptionSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *StripeSubscription) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "PriceStripePrice":
		rel, ok := retrieved.(*StripePrice)
		if !ok {
			return fmt.Errorf("stripeSubscription cannot load %T as %q", retrieved, name)
		}

		o.R.PriceStripePrice = rel

		if rel != nil {
			rel.R.PriceStripeSubscriptions = StripeSubscriptionSlice{o}
		}
		return nil
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("stripeSubscription cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.StripeSubscriptions = StripeSubscriptionSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("stripeSubscription has no relationship %q", name)
	}
}

func PreloadStripeSubscriptionPriceStripePrice(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*StripePrice, StripePriceSlice](orm.Relationship{
		Name: "PriceStripePrice",
		Sides: []orm.RelSide{
			{
				From: TableNames.StripeSubscriptions,
				To:   TableNames.StripePrices,
				FromColumns: []string{
					ColumnNames.StripeSubscriptions.PriceID,
				},
				ToColumns: []string{
					ColumnNames.StripePrices.ID,
				},
			},
		},
	}, StripePrices.Columns().Names(), opts...)
}

func ThenLoadStripeSubscriptionPriceStripePrice(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadStripeSubscriptionPriceStripePrice(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load StripeSubscriptionPriceStripePrice", retrieved)
		}

		err := loader.LoadStripeSubscriptionPriceStripePrice(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadStripeSubscriptionPriceStripePrice loads the stripeSubscription's PriceStripePrice into the .R struct
func (o *StripeSubscription) LoadStripeSubscriptionPriceStripePrice(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.PriceStripePrice = nil

	related, err := o.PriceStripePrice(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.PriceStripeSubscriptions = StripeSubscriptionSlice{o}

	o.R.PriceStripePrice = related
	return nil
}

// LoadStripeSubscriptionPriceStripePrice loads the stripeSubscription's PriceStripePrice into the .R struct
func (os StripeSubscriptionSlice) LoadStripeSubscriptionPriceStripePrice(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	stripePrices, err := os.PriceStripePrice(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range stripePrices {
			if o.PriceID != rel.ID {
				continue
			}

			rel.R.PriceStripeSubscriptions = append(rel.R.PriceStripeSubscriptions, o)

			o.R.PriceStripePrice = rel
			break
		}
	}

	return nil
}

func PreloadStripeSubscriptionUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.StripeSubscriptions,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.StripeSubscriptions.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadStripeSubscriptionUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadStripeSubscriptionUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load StripeSubscriptionUser", retrieved)
		}

		err := loader.LoadStripeSubscriptionUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadStripeSubscriptionUser loads the stripeSubscription's User into the .R struct
func (o *StripeSubscription) LoadStripeSubscriptionUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.StripeSubscriptions = StripeSubscriptionSlice{o}

	o.R.User = related
	return nil
}

// LoadStripeSubscriptionUser loads the stripeSubscription's User into the .R struct
func (os StripeSubscriptionSlice) LoadStripeSubscriptionUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.StripeSubscriptions = append(rel.R.StripeSubscriptions, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachStripeSubscriptionPriceStripePrice0(ctx context.Context, exec bob.Executor, count int, stripeSubscription0 *StripeSubscription, stripePrice1 *StripePrice) (*StripeSubscription, error) {
	setter := &StripeSubscriptionSetter{
		PriceID: omit.From(stripePrice1.ID),
	}

	err := stripeSubscription0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachStripeSubscriptionPriceStripePrice0: %w", err)
	}

	return stripeSubscription0, nil
}

func (stripeSubscription0 *StripeSubscription) InsertPriceStripePrice(ctx context.Context, exec bob.Executor, related *StripePriceSetter) error {
	stripePrice1, err := StripePrices.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachStripeSubscriptionPriceStripePrice0(ctx, exec, 1, stripeSubscription0, stripePrice1)
	if err != nil {
		return err
	}

	stripeSubscription0.R.PriceStripePrice = stripePrice1

	stripePrice1.R.PriceStripeSubscriptions = append(stripePrice1.R.PriceStripeSubscriptions, stripeSubscription0)

	return nil
}

func (stripeSubscription0 *StripeSubscription) AttachPriceStripePrice(ctx context.Context, exec bob.Executor, stripePrice1 *StripePrice) error {
	var err error

	_, err = attachStripeSubscriptionPriceStripePrice0(ctx, exec, 1, stripeSubscription0, stripePrice1)
	if err != nil {
		return err
	}

	stripeSubscription0.R.PriceStripePrice = stripePrice1

	stripePrice1.R.PriceStripeSubscriptions = append(stripePrice1.R.PriceStripeSubscriptions, stripeSubscription0)

	return nil
}

func attachStripeSubscriptionUser0(ctx context.Context, exec bob.Executor, count int, stripeSubscription0 *StripeSubscription, user1 *User) (*StripeSubscription, error) {
	setter := &StripeSubscriptionSetter{
		UserID: omit.From(user1.ID),
	}

	err := stripeSubscription0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachStripeSubscriptionUser0: %w", err)
	}

	return stripeSubscription0, nil
}

func (stripeSubscription0 *StripeSubscription) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachStripeSubscriptionUser0(ctx, exec, 1, stripeSubscription0, user1)
	if err != nil {
		return err
	}

	stripeSubscription0.R.User = user1

	user1.R.StripeSubscriptions = append(user1.R.StripeSubscriptions, stripeSubscription0)

	return nil
}

func (stripeSubscription0 *StripeSubscription) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachStripeSubscriptionUser0(ctx, exec, 1, stripeSubscription0, user1)
	if err != nil {
		return err
	}

	stripeSubscription0.R.User = user1

	user1.R.StripeSubscriptions = append(user1.R.StripeSubscriptions, stripeSubscription0)

	return nil
}
