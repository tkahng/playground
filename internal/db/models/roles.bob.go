// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/scan"
)

// Role is an object representing the database table.
type Role struct {
	ID          uuid.UUID        `db:"id,pk" json:"id"`
	Name        string           `db:"name" json:"name"`
	Description null.Val[string] `db:"description" json:"description"`
	CreatedAt   time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time        `db:"updated_at" json:"updated_at"`

	R roleR `db:"-" json:"-"`
}

// RoleSlice is an alias for a slice of pointers to Role.
// This should almost always be used instead of []*Role.
type RoleSlice []*Role

// Roles contains methods to work with the roles table
var Roles = psql.NewTablex[*Role, RoleSlice, *RoleSetter]("", "roles")

// RolesQuery is a query on the roles table
type RolesQuery = *psql.ViewQuery[*Role, RoleSlice]

// roleR is where relationships are stored.
type roleR struct {
	StripeProducts StripeProductSlice `json:"StripeProducts"` // product_roles.product_roles_product_id_fkeyproduct_roles.product_roles_role_id_fkey
	Permissions    PermissionSlice    `json:"Permissions"`    // role_permissions.role_permissions_permission_id_fkeyrole_permissions.role_permissions_role_id_fkey
	Users          UserSlice          `json:"Users"`          // user_roles.user_roles_role_id_fkeyuser_roles.user_roles_user_id_fkey
}

type roleColumnNames struct {
	ID          string
	Name        string
	Description string
	CreatedAt   string
	UpdatedAt   string
}

var RoleColumns = buildRoleColumns("roles")

type roleColumns struct {
	tableAlias  string
	ID          psql.Expression
	Name        psql.Expression
	Description psql.Expression
	CreatedAt   psql.Expression
	UpdatedAt   psql.Expression
}

func (c roleColumns) Alias() string {
	return c.tableAlias
}

func (roleColumns) AliasedAs(alias string) roleColumns {
	return buildRoleColumns(alias)
}

func buildRoleColumns(alias string) roleColumns {
	return roleColumns{
		tableAlias:  alias,
		ID:          psql.Quote(alias, "id"),
		Name:        psql.Quote(alias, "name"),
		Description: psql.Quote(alias, "description"),
		CreatedAt:   psql.Quote(alias, "created_at"),
		UpdatedAt:   psql.Quote(alias, "updated_at"),
	}
}

type roleWhere[Q psql.Filterable] struct {
	ID          psql.WhereMod[Q, uuid.UUID]
	Name        psql.WhereMod[Q, string]
	Description psql.WhereNullMod[Q, string]
	CreatedAt   psql.WhereMod[Q, time.Time]
	UpdatedAt   psql.WhereMod[Q, time.Time]
}

func (roleWhere[Q]) AliasedAs(alias string) roleWhere[Q] {
	return buildRoleWhere[Q](buildRoleColumns(alias))
}

func buildRoleWhere[Q psql.Filterable](cols roleColumns) roleWhere[Q] {
	return roleWhere[Q]{
		ID:          psql.Where[Q, uuid.UUID](cols.ID),
		Name:        psql.Where[Q, string](cols.Name),
		Description: psql.WhereNull[Q, string](cols.Description),
		CreatedAt:   psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:   psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var RoleErrors = &roleErrors{
	ErrUniqueRolesPkey: &UniqueConstraintError{s: "roles_pkey"},

	ErrUniqueRolesNameKey: &UniqueConstraintError{s: "roles_name_key"},
}

type roleErrors struct {
	ErrUniqueRolesPkey *UniqueConstraintError

	ErrUniqueRolesNameKey *UniqueConstraintError
}

// RoleSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type RoleSetter struct {
	ID          omit.Val[uuid.UUID]  `db:"id,pk" json:"id"`
	Name        omit.Val[string]     `db:"name" json:"name"`
	Description omitnull.Val[string] `db:"description" json:"description"`
	CreatedAt   omit.Val[time.Time]  `db:"created_at" json:"created_at"`
	UpdatedAt   omit.Val[time.Time]  `db:"updated_at" json:"updated_at"`
}

func (s RoleSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s RoleSetter) Overwrite(t *Role) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.Description.IsUnset() {
		t.Description, _ = s.Description.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *RoleSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Roles.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.Name.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Name)
		}

		if s.Description.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Description)
		}

		if s.CreatedAt.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s RoleSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s RoleSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "description")...),
			psql.Arg(s.Description),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindRole retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindRole(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*Role, error) {
	if len(cols) == 0 {
		return Roles.Query(
			SelectWhere.Roles.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Roles.Query(
		SelectWhere.Roles.ID.EQ(IDPK),
		sm.Columns(Roles.Columns().Only(cols...)),
	).One(ctx, exec)
}

// RoleExists checks the presence of a single record by primary key
func RoleExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return Roles.Query(
		SelectWhere.Roles.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Role is retrieved from the database
func (o *Role) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Roles.AfterSelectHooks.RunHooks(ctx, exec, RoleSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Roles.AfterInsertHooks.RunHooks(ctx, exec, RoleSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Roles.AfterUpdateHooks.RunHooks(ctx, exec, RoleSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Roles.AfterDeleteHooks.RunHooks(ctx, exec, RoleSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Role
func (o *Role) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Role) pkEQ() dialect.Expression {
	return psql.Quote("roles", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Role
func (o *Role) Update(ctx context.Context, exec bob.Executor, s *RoleSetter) error {
	v, err := Roles.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Role record with an executor
func (o *Role) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Roles.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Role using the executor
func (o *Role) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Roles.Query(
		SelectWhere.Roles.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after RoleSlice is retrieved from the database
func (o RoleSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Roles.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Roles.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Roles.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Roles.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o RoleSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("roles", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o RoleSlice) copyMatchingRows(from ...*Role) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o RoleSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Roles.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Role:
				o.copyMatchingRows(retrieved)
			case []*Role:
				o.copyMatchingRows(retrieved...)
			case RoleSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Role or a slice of Role
				// then run the AfterUpdateHooks on the slice
				_, err = Roles.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o RoleSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Roles.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Role:
				o.copyMatchingRows(retrieved)
			case []*Role:
				o.copyMatchingRows(retrieved...)
			case RoleSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Role or a slice of Role
				// then run the AfterDeleteHooks on the slice
				_, err = Roles.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o RoleSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals RoleSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Roles.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o RoleSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Roles.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o RoleSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Roles.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type roleJoins[Q dialect.Joinable] struct {
	typ            string
	StripeProducts func(context.Context) modAs[Q, stripeProductColumns]
	Permissions    func(context.Context) modAs[Q, permissionColumns]
	Users          func(context.Context) modAs[Q, userColumns]
}

func (j roleJoins[Q]) aliasedAs(alias string) roleJoins[Q] {
	return buildRoleJoins[Q](buildRoleColumns(alias), j.typ)
}

func buildRoleJoins[Q dialect.Joinable](cols roleColumns, typ string) roleJoins[Q] {
	return roleJoins[Q]{
		typ:            typ,
		StripeProducts: rolesJoinStripeProducts[Q](cols, typ),
		Permissions:    rolesJoinPermissions[Q](cols, typ),
		Users:          rolesJoinUsers[Q](cols, typ),
	}
}

func rolesJoinStripeProducts[Q dialect.Joinable](from roleColumns, typ string) func(context.Context) modAs[Q, stripeProductColumns] {
	return func(ctx context.Context) modAs[Q, stripeProductColumns] {
		return modAs[Q, stripeProductColumns]{
			c: StripeProductColumns,
			f: func(to stripeProductColumns) bob.Mod[Q] {
				random := strconv.FormatInt(randInt(), 10)
				mods := make(mods.QueryMods[Q], 0, 2)

				{
					to := ProductRoleColumns.AliasedAs(ProductRoleColumns.Alias() + random)
					mods = append(mods, dialect.Join[Q](typ, ProductRoles.Name().As(to.Alias())).On(
						to.RoleID.EQ(from.ID),
					))
				}
				{
					from := ProductRoleColumns.AliasedAs(ProductRoleColumns.Alias() + random)
					mods = append(mods, dialect.Join[Q](typ, StripeProducts.Name().As(to.Alias())).On(
						to.ID.EQ(from.ProductID),
					))
				}

				return mods
			},
		}
	}
}

func rolesJoinPermissions[Q dialect.Joinable](from roleColumns, typ string) func(context.Context) modAs[Q, permissionColumns] {
	return func(ctx context.Context) modAs[Q, permissionColumns] {
		return modAs[Q, permissionColumns]{
			c: PermissionColumns,
			f: func(to permissionColumns) bob.Mod[Q] {
				random := strconv.FormatInt(randInt(), 10)
				mods := make(mods.QueryMods[Q], 0, 2)

				{
					to := RolePermissionColumns.AliasedAs(RolePermissionColumns.Alias() + random)
					mods = append(mods, dialect.Join[Q](typ, RolePermissions.Name().As(to.Alias())).On(
						to.RoleID.EQ(from.ID),
					))
				}
				{
					from := RolePermissionColumns.AliasedAs(RolePermissionColumns.Alias() + random)
					mods = append(mods, dialect.Join[Q](typ, Permissions.Name().As(to.Alias())).On(
						to.ID.EQ(from.PermissionID),
					))
				}

				return mods
			},
		}
	}
}

func rolesJoinUsers[Q dialect.Joinable](from roleColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				random := strconv.FormatInt(randInt(), 10)
				mods := make(mods.QueryMods[Q], 0, 2)

				{
					to := UserRoleColumns.AliasedAs(UserRoleColumns.Alias() + random)
					mods = append(mods, dialect.Join[Q](typ, UserRoles.Name().As(to.Alias())).On(
						to.RoleID.EQ(from.ID),
					))
				}
				{
					from := UserRoleColumns.AliasedAs(UserRoleColumns.Alias() + random)
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// StripeProducts starts a query for related objects on stripe_products
func (o *Role) StripeProducts(mods ...bob.Mod[*dialect.SelectQuery]) StripeProductsQuery {
	return StripeProducts.Query(append(mods,
		sm.InnerJoin(ProductRoles.NameAs()).On(
			StripeProductColumns.ID.EQ(ProductRoleColumns.ProductID)),
		sm.Where(ProductRoleColumns.RoleID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os RoleSlice) StripeProducts(mods ...bob.Mod[*dialect.SelectQuery]) StripeProductsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return StripeProducts.Query(append(mods,
		sm.InnerJoin(ProductRoles.NameAs()).On(
			StripeProductColumns.ID.EQ(ProductRoleColumns.ProductID),
		),
		sm.Where(psql.Group(ProductRoleColumns.RoleID).In(PKArgs...)),
	)...)
}

// Permissions starts a query for related objects on permissions
func (o *Role) Permissions(mods ...bob.Mod[*dialect.SelectQuery]) PermissionsQuery {
	return Permissions.Query(append(mods,
		sm.InnerJoin(RolePermissions.NameAs()).On(
			PermissionColumns.ID.EQ(RolePermissionColumns.PermissionID)),
		sm.Where(RolePermissionColumns.RoleID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os RoleSlice) Permissions(mods ...bob.Mod[*dialect.SelectQuery]) PermissionsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return Permissions.Query(append(mods,
		sm.InnerJoin(RolePermissions.NameAs()).On(
			PermissionColumns.ID.EQ(RolePermissionColumns.PermissionID),
		),
		sm.Where(psql.Group(RolePermissionColumns.RoleID).In(PKArgs...)),
	)...)
}

// Users starts a query for related objects on users
func (o *Role) Users(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.InnerJoin(UserRoles.NameAs()).On(
			UserColumns.ID.EQ(UserRoleColumns.UserID)),
		sm.Where(UserRoleColumns.RoleID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os RoleSlice) Users(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return Users.Query(append(mods,
		sm.InnerJoin(UserRoles.NameAs()).On(
			UserColumns.ID.EQ(UserRoleColumns.UserID),
		),
		sm.Where(psql.Group(UserRoleColumns.RoleID).In(PKArgs...)),
	)...)
}

func (o *Role) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "StripeProducts":
		rels, ok := retrieved.(StripeProductSlice)
		if !ok {
			return fmt.Errorf("role cannot load %T as %q", retrieved, name)
		}

		o.R.StripeProducts = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Roles = RoleSlice{o}
			}
		}
		return nil
	case "Permissions":
		rels, ok := retrieved.(PermissionSlice)
		if !ok {
			return fmt.Errorf("role cannot load %T as %q", retrieved, name)
		}

		o.R.Permissions = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Roles = RoleSlice{o}
			}
		}
		return nil
	case "Users":
		rels, ok := retrieved.(UserSlice)
		if !ok {
			return fmt.Errorf("role cannot load %T as %q", retrieved, name)
		}

		o.R.Users = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Roles = RoleSlice{o}
			}
		}
		return nil
	default:
		return fmt.Errorf("role has no relationship %q", name)
	}
}

func ThenLoadRoleStripeProducts(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadRoleStripeProducts(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load RoleStripeProducts", retrieved)
		}

		err := loader.LoadRoleStripeProducts(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadRoleStripeProducts loads the role's StripeProducts into the .R struct
func (o *Role) LoadRoleStripeProducts(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.StripeProducts = nil

	related, err := o.StripeProducts(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Roles = RoleSlice{o}
	}

	o.R.StripeProducts = related
	return nil
}

// LoadRoleStripeProducts loads the role's StripeProducts into the .R struct
func (os RoleSlice) LoadRoleStripeProducts(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	// since we are changing the columns, we need to check if the original columns were set or add the defaults
	sq := dialect.SelectQuery{}
	for _, mod := range mods {
		mod.Apply(&sq)
	}

	if len(sq.SelectList.Columns) == 0 {
		mods = append(mods, sm.Columns(StripeProducts.Columns()))
	}

	q := os.StripeProducts(append(
		mods,
		sm.Columns(ProductRoleColumns.RoleID.As("related_roles.ID")),
	)...)

	IDSlice := []uuid.UUID{}

	mapper := scan.Mod(scan.StructMapper[*StripeProduct](), func(ctx context.Context, cols []string) (scan.BeforeFunc, func(any, any) error) {
		return func(row *scan.Row) (any, error) {
				IDSlice = append(IDSlice, *new(uuid.UUID))
				row.ScheduleScan("related_roles.ID", &IDSlice[len(IDSlice)-1])

				return nil, nil
			},
			func(any, any) error {
				return nil
			}
	})

	stripeProducts, err := bob.Allx[*StripeProduct, StripeProductSlice](ctx, exec, q, mapper)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.StripeProducts = nil
	}

	for _, o := range os {
		for i, rel := range stripeProducts {
			if o.ID != IDSlice[i] {
				continue
			}

			rel.R.Roles = append(rel.R.Roles, o)

			o.R.StripeProducts = append(o.R.StripeProducts, rel)
		}
	}

	return nil
}

func ThenLoadRolePermissions(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadRolePermissions(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load RolePermissions", retrieved)
		}

		err := loader.LoadRolePermissions(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadRolePermissions loads the role's Permissions into the .R struct
func (o *Role) LoadRolePermissions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Permissions = nil

	related, err := o.Permissions(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Roles = RoleSlice{o}
	}

	o.R.Permissions = related
	return nil
}

// LoadRolePermissions loads the role's Permissions into the .R struct
func (os RoleSlice) LoadRolePermissions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	// since we are changing the columns, we need to check if the original columns were set or add the defaults
	sq := dialect.SelectQuery{}
	for _, mod := range mods {
		mod.Apply(&sq)
	}

	if len(sq.SelectList.Columns) == 0 {
		mods = append(mods, sm.Columns(Permissions.Columns()))
	}

	q := os.Permissions(append(
		mods,
		sm.Columns(RolePermissionColumns.RoleID.As("related_roles.ID")),
	)...)

	IDSlice := []uuid.UUID{}

	mapper := scan.Mod(scan.StructMapper[*Permission](), func(ctx context.Context, cols []string) (scan.BeforeFunc, func(any, any) error) {
		return func(row *scan.Row) (any, error) {
				IDSlice = append(IDSlice, *new(uuid.UUID))
				row.ScheduleScan("related_roles.ID", &IDSlice[len(IDSlice)-1])

				return nil, nil
			},
			func(any, any) error {
				return nil
			}
	})

	permissions, err := bob.Allx[*Permission, PermissionSlice](ctx, exec, q, mapper)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Permissions = nil
	}

	for _, o := range os {
		for i, rel := range permissions {
			if o.ID != IDSlice[i] {
				continue
			}

			rel.R.Roles = append(rel.R.Roles, o)

			o.R.Permissions = append(o.R.Permissions, rel)
		}
	}

	return nil
}

func ThenLoadRoleUsers(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadRoleUsers(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load RoleUsers", retrieved)
		}

		err := loader.LoadRoleUsers(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadRoleUsers loads the role's Users into the .R struct
func (o *Role) LoadRoleUsers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Users = nil

	related, err := o.Users(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Roles = RoleSlice{o}
	}

	o.R.Users = related
	return nil
}

// LoadRoleUsers loads the role's Users into the .R struct
func (os RoleSlice) LoadRoleUsers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	// since we are changing the columns, we need to check if the original columns were set or add the defaults
	sq := dialect.SelectQuery{}
	for _, mod := range mods {
		mod.Apply(&sq)
	}

	if len(sq.SelectList.Columns) == 0 {
		mods = append(mods, sm.Columns(Users.Columns()))
	}

	q := os.Users(append(
		mods,
		sm.Columns(UserRoleColumns.RoleID.As("related_roles.ID")),
	)...)

	IDSlice := []uuid.UUID{}

	mapper := scan.Mod(scan.StructMapper[*User](), func(ctx context.Context, cols []string) (scan.BeforeFunc, func(any, any) error) {
		return func(row *scan.Row) (any, error) {
				IDSlice = append(IDSlice, *new(uuid.UUID))
				row.ScheduleScan("related_roles.ID", &IDSlice[len(IDSlice)-1])

				return nil, nil
			},
			func(any, any) error {
				return nil
			}
	})

	users, err := bob.Allx[*User, UserSlice](ctx, exec, q, mapper)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Users = nil
	}

	for _, o := range os {
		for i, rel := range users {
			if o.ID != IDSlice[i] {
				continue
			}

			rel.R.Roles = append(rel.R.Roles, o)

			o.R.Users = append(o.R.Users, rel)
		}
	}

	return nil
}

func attachRoleStripeProducts0(ctx context.Context, exec bob.Executor, count int, role0 *Role, stripeProducts2 StripeProductSlice) (ProductRoleSlice, error) {
	setters := make([]*ProductRoleSetter, count)
	for i := 0; i < count; i++ {
		setters[i] = &ProductRoleSetter{
			RoleID:    omit.From(role0.ID),
			ProductID: omit.From(stripeProducts2[i].ID),
		}
	}

	productRoles1, err := ProductRoles.Insert(bob.ToMods(setters...)).All(ctx, exec)
	if err != nil {
		return nil, fmt.Errorf("attachRoleStripeProducts0: %w", err)
	}

	return productRoles1, nil
}

func (role0 *Role) InsertStripeProducts(ctx context.Context, exec bob.Executor, related ...*StripeProductSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	inserted, err := StripeProducts.Insert(bob.ToMods(related...)).All(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	stripeProducts2 := StripeProductSlice(inserted)

	_, err = attachRoleStripeProducts0(ctx, exec, len(related), role0, stripeProducts2)
	if err != nil {
		return err
	}

	role0.R.StripeProducts = append(role0.R.StripeProducts, stripeProducts2...)

	for _, rel := range stripeProducts2 {
		rel.R.Roles = append(rel.R.Roles, role0)
	}
	return nil
}

func (role0 *Role) AttachStripeProducts(ctx context.Context, exec bob.Executor, related ...*StripeProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	stripeProducts2 := StripeProductSlice(related)

	_, err = attachRoleStripeProducts0(ctx, exec, len(related), role0, stripeProducts2)
	if err != nil {
		return err
	}

	role0.R.StripeProducts = append(role0.R.StripeProducts, stripeProducts2...)

	for _, rel := range related {
		rel.R.Roles = append(rel.R.Roles, role0)
	}

	return nil
}

func attachRolePermissions0(ctx context.Context, exec bob.Executor, count int, role0 *Role, permissions2 PermissionSlice) (RolePermissionSlice, error) {
	setters := make([]*RolePermissionSetter, count)
	for i := 0; i < count; i++ {
		setters[i] = &RolePermissionSetter{
			RoleID:       omit.From(role0.ID),
			PermissionID: omit.From(permissions2[i].ID),
		}
	}

	rolePermissions1, err := RolePermissions.Insert(bob.ToMods(setters...)).All(ctx, exec)
	if err != nil {
		return nil, fmt.Errorf("attachRolePermissions0: %w", err)
	}

	return rolePermissions1, nil
}

func (role0 *Role) InsertPermissions(ctx context.Context, exec bob.Executor, related ...*PermissionSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	inserted, err := Permissions.Insert(bob.ToMods(related...)).All(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	permissions2 := PermissionSlice(inserted)

	_, err = attachRolePermissions0(ctx, exec, len(related), role0, permissions2)
	if err != nil {
		return err
	}

	role0.R.Permissions = append(role0.R.Permissions, permissions2...)

	for _, rel := range permissions2 {
		rel.R.Roles = append(rel.R.Roles, role0)
	}
	return nil
}

func (role0 *Role) AttachPermissions(ctx context.Context, exec bob.Executor, related ...*Permission) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	permissions2 := PermissionSlice(related)

	_, err = attachRolePermissions0(ctx, exec, len(related), role0, permissions2)
	if err != nil {
		return err
	}

	role0.R.Permissions = append(role0.R.Permissions, permissions2...)

	for _, rel := range related {
		rel.R.Roles = append(rel.R.Roles, role0)
	}

	return nil
}

func attachRoleUsers0(ctx context.Context, exec bob.Executor, count int, role0 *Role, users2 UserSlice) (UserRoleSlice, error) {
	setters := make([]*UserRoleSetter, count)
	for i := 0; i < count; i++ {
		setters[i] = &UserRoleSetter{
			RoleID: omit.From(role0.ID),
			UserID: omit.From(users2[i].ID),
		}
	}

	userRoles1, err := UserRoles.Insert(bob.ToMods(setters...)).All(ctx, exec)
	if err != nil {
		return nil, fmt.Errorf("attachRoleUsers0: %w", err)
	}

	return userRoles1, nil
}

func (role0 *Role) InsertUsers(ctx context.Context, exec bob.Executor, related ...*UserSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	inserted, err := Users.Insert(bob.ToMods(related...)).All(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	users2 := UserSlice(inserted)

	_, err = attachRoleUsers0(ctx, exec, len(related), role0, users2)
	if err != nil {
		return err
	}

	role0.R.Users = append(role0.R.Users, users2...)

	for _, rel := range users2 {
		rel.R.Roles = append(rel.R.Roles, role0)
	}
	return nil
}

func (role0 *Role) AttachUsers(ctx context.Context, exec bob.Executor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	users2 := UserSlice(related)

	_, err = attachRoleUsers0(ctx, exec, len(related), role0, users2)
	if err != nil {
		return err
	}

	role0.R.Users = append(role0.R.Users, users2...)

	for _, rel := range related {
		rel.R.Roles = append(rel.R.Roles, role0)
	}

	return nil
}
