// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"encoding/json"
	"io"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/types"
)

// AppParam is an object representing the database table.
type AppParam struct {
	ID        uuid.UUID                   `db:"id,pk" json:"id"`
	Name      string                      `db:"name" json:"name"`
	Value     types.JSON[json.RawMessage] `db:"value" json:"value"`
	CreatedAt time.Time                   `db:"created_at" json:"created_at"`
	UpdatedAt time.Time                   `db:"updated_at" json:"updated_at"`
}

// AppParamSlice is an alias for a slice of pointers to AppParam.
// This should almost always be used instead of []*AppParam.
type AppParamSlice []*AppParam

// AppParams contains methods to work with the app_params table
var AppParams = psql.NewTablex[*AppParam, AppParamSlice, *AppParamSetter]("", "app_params")

// AppParamsQuery is a query on the app_params table
type AppParamsQuery = *psql.ViewQuery[*AppParam, AppParamSlice]

type appParamColumnNames struct {
	ID        string
	Name      string
	Value     string
	CreatedAt string
	UpdatedAt string
}

var AppParamColumns = buildAppParamColumns("app_params")

type appParamColumns struct {
	tableAlias string
	ID         psql.Expression
	Name       psql.Expression
	Value      psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
}

func (c appParamColumns) Alias() string {
	return c.tableAlias
}

func (appParamColumns) AliasedAs(alias string) appParamColumns {
	return buildAppParamColumns(alias)
}

func buildAppParamColumns(alias string) appParamColumns {
	return appParamColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		Name:       psql.Quote(alias, "name"),
		Value:      psql.Quote(alias, "value"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
	}
}

type appParamWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, uuid.UUID]
	Name      psql.WhereMod[Q, string]
	Value     psql.WhereMod[Q, types.JSON[json.RawMessage]]
	CreatedAt psql.WhereMod[Q, time.Time]
	UpdatedAt psql.WhereMod[Q, time.Time]
}

func (appParamWhere[Q]) AliasedAs(alias string) appParamWhere[Q] {
	return buildAppParamWhere[Q](buildAppParamColumns(alias))
}

func buildAppParamWhere[Q psql.Filterable](cols appParamColumns) appParamWhere[Q] {
	return appParamWhere[Q]{
		ID:        psql.Where[Q, uuid.UUID](cols.ID),
		Name:      psql.Where[Q, string](cols.Name),
		Value:     psql.Where[Q, types.JSON[json.RawMessage]](cols.Value),
		CreatedAt: psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt: psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var AppParamErrors = &appParamErrors{
	ErrUniqueAppParamsPkey: &UniqueConstraintError{s: "app_params_pkey"},

	ErrUniqueAppParamsNameKey: &UniqueConstraintError{s: "app_params_name_key"},
}

type appParamErrors struct {
	ErrUniqueAppParamsPkey *UniqueConstraintError

	ErrUniqueAppParamsNameKey *UniqueConstraintError
}

// AppParamSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type AppParamSetter struct {
	ID        omit.Val[uuid.UUID]                   `db:"id,pk" json:"id"`
	Name      omit.Val[string]                      `db:"name" json:"name"`
	Value     omit.Val[types.JSON[json.RawMessage]] `db:"value" json:"value"`
	CreatedAt omit.Val[time.Time]                   `db:"created_at" json:"created_at"`
	UpdatedAt omit.Val[time.Time]                   `db:"updated_at" json:"updated_at"`
}

func (s AppParamSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.Value.IsUnset() {
		vals = append(vals, "value")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s AppParamSetter) Overwrite(t *AppParam) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.Value.IsUnset() {
		t.Value, _ = s.Value.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *AppParamSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return AppParams.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.Name.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Name)
		}

		if s.Value.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Value)
		}

		if s.CreatedAt.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s AppParamSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s AppParamSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if !s.Value.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "value")...),
			psql.Arg(s.Value),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindAppParam retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindAppParam(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*AppParam, error) {
	if len(cols) == 0 {
		return AppParams.Query(
			SelectWhere.AppParams.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return AppParams.Query(
		SelectWhere.AppParams.ID.EQ(IDPK),
		sm.Columns(AppParams.Columns().Only(cols...)),
	).One(ctx, exec)
}

// AppParamExists checks the presence of a single record by primary key
func AppParamExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return AppParams.Query(
		SelectWhere.AppParams.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after AppParam is retrieved from the database
func (o *AppParam) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = AppParams.AfterSelectHooks.RunHooks(ctx, exec, AppParamSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = AppParams.AfterInsertHooks.RunHooks(ctx, exec, AppParamSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = AppParams.AfterUpdateHooks.RunHooks(ctx, exec, AppParamSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = AppParams.AfterDeleteHooks.RunHooks(ctx, exec, AppParamSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the AppParam
func (o *AppParam) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *AppParam) pkEQ() dialect.Expression {
	return psql.Quote("app_params", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the AppParam
func (o *AppParam) Update(ctx context.Context, exec bob.Executor, s *AppParamSetter) error {
	v, err := AppParams.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single AppParam record with an executor
func (o *AppParam) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := AppParams.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the AppParam using the executor
func (o *AppParam) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := AppParams.Query(
		SelectWhere.AppParams.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after AppParamSlice is retrieved from the database
func (o AppParamSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = AppParams.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = AppParams.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = AppParams.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = AppParams.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o AppParamSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("app_params", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o AppParamSlice) copyMatchingRows(from ...*AppParam) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o AppParamSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return AppParams.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *AppParam:
				o.copyMatchingRows(retrieved)
			case []*AppParam:
				o.copyMatchingRows(retrieved...)
			case AppParamSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a AppParam or a slice of AppParam
				// then run the AfterUpdateHooks on the slice
				_, err = AppParams.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o AppParamSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return AppParams.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *AppParam:
				o.copyMatchingRows(retrieved)
			case []*AppParam:
				o.copyMatchingRows(retrieved...)
			case AppParamSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a AppParam or a slice of AppParam
				// then run the AfterDeleteHooks on the slice
				_, err = AppParams.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o AppParamSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals AppParamSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := AppParams.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o AppParamSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := AppParams.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o AppParamSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := AppParams.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
