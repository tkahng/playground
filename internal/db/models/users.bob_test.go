// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_test

import (
	"context"
	"database/sql"
	"errors"

	"testing"

	_ "github.com/jackc/pgx/v5/stdlib"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
	factory "github.com/tkahng/authgo/internal/db/models/factory"
)

func TestUserUniqueConstraintErrors(t *testing.T) {
	db, err := sql.Open("pgx", "postgres://postgres:postgres@localhost:5432/authgo_test?sslmode=disable")
	if err != nil {
		t.Fatal("Error connecting to database")
	}
	tests := []struct {
		name        string
		expectedErr *models.UniqueConstraintError
		applyFn     func(tpl *factory.UserTemplate, obj *models.User)
	}{
		{
			name:        "ErrUniqueUsersPkey",
			expectedErr: models.UserErrors.ErrUniqueUsersPkey,
			applyFn: func(tpl *factory.UserTemplate, obj *models.User) {
				tpl.Apply(
					factory.UserMods.RandomizeAllColumns(nil),
					factory.UserMods.ID(obj.ID),
				)
			},
		},

		{
			name:        "ErrUniqueUsersEmailKey",
			expectedErr: models.UserErrors.ErrUniqueUsersEmailKey,
			applyFn: func(tpl *factory.UserTemplate, obj *models.User) {
				tpl.Apply(
					factory.UserMods.RandomizeAllColumns(nil),
					factory.UserMods.Email(obj.Email),
				)
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ctx := context.Background()
			tx, err := db.Begin()
			if err != nil {
				t.Fatal("Couldn't start database transaction")
			}
			exec := bob.New(tx)
			f := factory.New()
			tpl := f.NewUser(factory.UserMods.RandomizeAllColumns(nil))
			obj, err := tpl.Create(ctx, exec)
			if err != nil {
				t.Fatal(err)
			}
			tt.applyFn(tpl, obj)
			_, err = models.Users.Insert(tpl.BuildSetter()).One(ctx, exec)
			if !errors.Is(models.ErrUniqueConstraint, err) {
				t.Fatalf("Expected: %s, Got: %v", tt.name, err)
			}
			if !errors.Is(tt.expectedErr, err) {
				t.Fatalf("Expected: %s, Got: %v", tt.name, err)
			}
			if !models.ErrUniqueConstraint.Is(err) {
				t.Fatalf("Expected: %s, Got: %v", tt.name, err)
			}
			if !tt.expectedErr.Is(err) {
				t.Fatalf("Expected: %s, Got: %v", tt.name, err)
			}
			if err = tx.Rollback(); err != nil {
				t.Fatal("Couldn't rollback database transaction")
			}
		})
	}
}
