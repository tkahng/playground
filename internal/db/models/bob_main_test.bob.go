// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
)

// Make sure the type AppParam runs hooks after queries
var _ bob.HookableType = &AppParam{}

// Make sure the type Medium runs hooks after queries
var _ bob.HookableType = &Medium{}

// Make sure the type Notification runs hooks after queries
var _ bob.HookableType = &Notification{}

// Make sure the type Permission runs hooks after queries
var _ bob.HookableType = &Permission{}

// Make sure the type RolePermission runs hooks after queries
var _ bob.HookableType = &RolePermission{}

// Make sure the type Role runs hooks after queries
var _ bob.HookableType = &Role{}

// Make sure the type SchemaMigration runs hooks after queries
var _ bob.HookableType = &SchemaMigration{}

// Make sure the type StripeCustomer runs hooks after queries
var _ bob.HookableType = &StripeCustomer{}

// Make sure the type StripePrice runs hooks after queries
var _ bob.HookableType = &StripePrice{}

// Make sure the type StripeProduct runs hooks after queries
var _ bob.HookableType = &StripeProduct{}

// Make sure the type StripeSubscription runs hooks after queries
var _ bob.HookableType = &StripeSubscription{}

// Make sure the type StripeWebhookEvent runs hooks after queries
var _ bob.HookableType = &StripeWebhookEvent{}

// Make sure the type Token runs hooks after queries
var _ bob.HookableType = &Token{}

// Make sure the type UserAccount runs hooks after queries
var _ bob.HookableType = &UserAccount{}

// Make sure the type UserPermission runs hooks after queries
var _ bob.HookableType = &UserPermission{}

// Make sure the type UserRole runs hooks after queries
var _ bob.HookableType = &UserRole{}

// Make sure the type UserSession runs hooks after queries
var _ bob.HookableType = &UserSession{}

// Make sure the type User runs hooks after queries
var _ bob.HookableType = &User{}

// Make sure the type uuid.UUID satisfies database/sql.Scanner
var _ sql.Scanner = (*uuid.UUID)(nil)

// Make sure the type uuid.UUID satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(uuid.UUID)

// Make sure the type types.JSON[json.RawMessage] satisfies database/sql.Scanner
var _ sql.Scanner = (*types.JSON[json.RawMessage])(nil)

// Make sure the type types.JSON[json.RawMessage] satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(types.JSON[json.RawMessage])

// Make sure the type StripePricingType satisfies database/sql.Scanner
var _ sql.Scanner = (*StripePricingType)(nil)

// Make sure the type StripePricingType satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(StripePricingType)

// Make sure the type StripePricingPlanInterval satisfies database/sql.Scanner
var _ sql.Scanner = (*StripePricingPlanInterval)(nil)

// Make sure the type StripePricingPlanInterval satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(StripePricingPlanInterval)

// Make sure the type types.JSON[map[string]string] satisfies database/sql.Scanner
var _ sql.Scanner = (*types.JSON[map[string]string])(nil)

// Make sure the type types.JSON[map[string]string] satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(types.JSON[map[string]string])

// Make sure the type StripeSubscriptionStatus satisfies database/sql.Scanner
var _ sql.Scanner = (*StripeSubscriptionStatus)(nil)

// Make sure the type StripeSubscriptionStatus satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(StripeSubscriptionStatus)

// Make sure the type TokenTypes satisfies database/sql.Scanner
var _ sql.Scanner = (*TokenTypes)(nil)

// Make sure the type TokenTypes satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(TokenTypes)

// Make sure the type ProviderTypes satisfies database/sql.Scanner
var _ sql.Scanner = (*ProviderTypes)(nil)

// Make sure the type ProviderTypes satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(ProviderTypes)

// Make sure the type Providers satisfies database/sql.Scanner
var _ sql.Scanner = (*Providers)(nil)

// Make sure the type Providers satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(Providers)
