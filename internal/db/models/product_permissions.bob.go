// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// ProductPermission is an object representing the database table.
type ProductPermission struct {
	ProductID    string    `db:"product_id,pk" json:"product_id"`
	PermissionID uuid.UUID `db:"permission_id,pk" json:"permission_id"`

	R productPermissionR `db:"-" json:"-"`
}

// ProductPermissionSlice is an alias for a slice of pointers to ProductPermission.
// This should almost always be used instead of []*ProductPermission.
type ProductPermissionSlice []*ProductPermission

// ProductPermissions contains methods to work with the product_permissions table
var ProductPermissions = psql.NewTablex[*ProductPermission, ProductPermissionSlice, *ProductPermissionSetter]("", "product_permissions")

// ProductPermissionsQuery is a query on the product_permissions table
type ProductPermissionsQuery = *psql.ViewQuery[*ProductPermission, ProductPermissionSlice]

// productPermissionR is where relationships are stored.
type productPermissionR struct {
	Permission           *Permission    `json:"Permission"`           // product_permissions.product_permissions_permission_id_fkey
	ProductStripeProduct *StripeProduct `json:"ProductStripeProduct"` // product_permissions.product_permissions_product_id_fkey
}

type productPermissionColumnNames struct {
	ProductID    string
	PermissionID string
}

var ProductPermissionColumns = buildProductPermissionColumns("product_permissions")

type productPermissionColumns struct {
	tableAlias   string
	ProductID    psql.Expression
	PermissionID psql.Expression
}

func (c productPermissionColumns) Alias() string {
	return c.tableAlias
}

func (productPermissionColumns) AliasedAs(alias string) productPermissionColumns {
	return buildProductPermissionColumns(alias)
}

func buildProductPermissionColumns(alias string) productPermissionColumns {
	return productPermissionColumns{
		tableAlias:   alias,
		ProductID:    psql.Quote(alias, "product_id"),
		PermissionID: psql.Quote(alias, "permission_id"),
	}
}

type productPermissionWhere[Q psql.Filterable] struct {
	ProductID    psql.WhereMod[Q, string]
	PermissionID psql.WhereMod[Q, uuid.UUID]
}

func (productPermissionWhere[Q]) AliasedAs(alias string) productPermissionWhere[Q] {
	return buildProductPermissionWhere[Q](buildProductPermissionColumns(alias))
}

func buildProductPermissionWhere[Q psql.Filterable](cols productPermissionColumns) productPermissionWhere[Q] {
	return productPermissionWhere[Q]{
		ProductID:    psql.Where[Q, string](cols.ProductID),
		PermissionID: psql.Where[Q, uuid.UUID](cols.PermissionID),
	}
}

var ProductPermissionErrors = &productPermissionErrors{
	ErrUniqueProductPermissionsPkey: &UniqueConstraintError{s: "product_permissions_pkey"},
}

type productPermissionErrors struct {
	ErrUniqueProductPermissionsPkey *UniqueConstraintError
}

// ProductPermissionSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ProductPermissionSetter struct {
	ProductID    omit.Val[string]    `db:"product_id,pk" json:"product_id"`
	PermissionID omit.Val[uuid.UUID] `db:"permission_id,pk" json:"permission_id"`
}

func (s ProductPermissionSetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if !s.ProductID.IsUnset() {
		vals = append(vals, "product_id")
	}

	if !s.PermissionID.IsUnset() {
		vals = append(vals, "permission_id")
	}

	return vals
}

func (s ProductPermissionSetter) Overwrite(t *ProductPermission) {
	if !s.ProductID.IsUnset() {
		t.ProductID, _ = s.ProductID.Get()
	}
	if !s.PermissionID.IsUnset() {
		t.PermissionID, _ = s.PermissionID.Get()
	}
}

func (s *ProductPermissionSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return ProductPermissions.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 2)
		if s.ProductID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ProductID)
		}

		if s.PermissionID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.PermissionID)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s ProductPermissionSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s ProductPermissionSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if !s.ProductID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "product_id")...),
			psql.Arg(s.ProductID),
		}})
	}

	if !s.PermissionID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "permission_id")...),
			psql.Arg(s.PermissionID),
		}})
	}

	return exprs
}

// FindProductPermission retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindProductPermission(ctx context.Context, exec bob.Executor, ProductIDPK string, PermissionIDPK uuid.UUID, cols ...string) (*ProductPermission, error) {
	if len(cols) == 0 {
		return ProductPermissions.Query(
			SelectWhere.ProductPermissions.ProductID.EQ(ProductIDPK),
			SelectWhere.ProductPermissions.PermissionID.EQ(PermissionIDPK),
		).One(ctx, exec)
	}

	return ProductPermissions.Query(
		SelectWhere.ProductPermissions.ProductID.EQ(ProductIDPK),
		SelectWhere.ProductPermissions.PermissionID.EQ(PermissionIDPK),
		sm.Columns(ProductPermissions.Columns().Only(cols...)),
	).One(ctx, exec)
}

// ProductPermissionExists checks the presence of a single record by primary key
func ProductPermissionExists(ctx context.Context, exec bob.Executor, ProductIDPK string, PermissionIDPK uuid.UUID) (bool, error) {
	return ProductPermissions.Query(
		SelectWhere.ProductPermissions.ProductID.EQ(ProductIDPK),
		SelectWhere.ProductPermissions.PermissionID.EQ(PermissionIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after ProductPermission is retrieved from the database
func (o *ProductPermission) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = ProductPermissions.AfterSelectHooks.RunHooks(ctx, exec, ProductPermissionSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = ProductPermissions.AfterInsertHooks.RunHooks(ctx, exec, ProductPermissionSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = ProductPermissions.AfterUpdateHooks.RunHooks(ctx, exec, ProductPermissionSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = ProductPermissions.AfterDeleteHooks.RunHooks(ctx, exec, ProductPermissionSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the ProductPermission
func (o *ProductPermission) PrimaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.ProductID,
		o.PermissionID,
	)
}

func (o *ProductPermission) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("product_permissions", "product_id"), psql.Quote("product_permissions", "permission_id")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the ProductPermission
func (o *ProductPermission) Update(ctx context.Context, exec bob.Executor, s *ProductPermissionSetter) error {
	v, err := ProductPermissions.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single ProductPermission record with an executor
func (o *ProductPermission) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := ProductPermissions.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the ProductPermission using the executor
func (o *ProductPermission) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := ProductPermissions.Query(
		SelectWhere.ProductPermissions.ProductID.EQ(o.ProductID),
		SelectWhere.ProductPermissions.PermissionID.EQ(o.PermissionID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after ProductPermissionSlice is retrieved from the database
func (o ProductPermissionSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = ProductPermissions.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = ProductPermissions.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = ProductPermissions.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = ProductPermissions.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o ProductPermissionSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("product_permissions", "product_id"), psql.Quote("product_permissions", "permission_id")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o ProductPermissionSlice) copyMatchingRows(from ...*ProductPermission) {
	for i, old := range o {
		for _, new := range from {
			if new.ProductID != old.ProductID {
				continue
			}
			if new.PermissionID != old.PermissionID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o ProductPermissionSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return ProductPermissions.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *ProductPermission:
				o.copyMatchingRows(retrieved)
			case []*ProductPermission:
				o.copyMatchingRows(retrieved...)
			case ProductPermissionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a ProductPermission or a slice of ProductPermission
				// then run the AfterUpdateHooks on the slice
				_, err = ProductPermissions.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o ProductPermissionSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return ProductPermissions.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *ProductPermission:
				o.copyMatchingRows(retrieved)
			case []*ProductPermission:
				o.copyMatchingRows(retrieved...)
			case ProductPermissionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a ProductPermission or a slice of ProductPermission
				// then run the AfterDeleteHooks on the slice
				_, err = ProductPermissions.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o ProductPermissionSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ProductPermissionSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := ProductPermissions.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o ProductPermissionSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := ProductPermissions.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o ProductPermissionSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := ProductPermissions.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type productPermissionJoins[Q dialect.Joinable] struct {
	typ                  string
	Permission           func(context.Context) modAs[Q, permissionColumns]
	ProductStripeProduct func(context.Context) modAs[Q, stripeProductColumns]
}

func (j productPermissionJoins[Q]) aliasedAs(alias string) productPermissionJoins[Q] {
	return buildProductPermissionJoins[Q](buildProductPermissionColumns(alias), j.typ)
}

func buildProductPermissionJoins[Q dialect.Joinable](cols productPermissionColumns, typ string) productPermissionJoins[Q] {
	return productPermissionJoins[Q]{
		typ:                  typ,
		Permission:           productPermissionsJoinPermission[Q](cols, typ),
		ProductStripeProduct: productPermissionsJoinProductStripeProduct[Q](cols, typ),
	}
}

func productPermissionsJoinPermission[Q dialect.Joinable](from productPermissionColumns, typ string) func(context.Context) modAs[Q, permissionColumns] {
	return func(ctx context.Context) modAs[Q, permissionColumns] {
		return modAs[Q, permissionColumns]{
			c: PermissionColumns,
			f: func(to permissionColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Permissions.Name().As(to.Alias())).On(
						to.ID.EQ(from.PermissionID),
					))
				}

				return mods
			},
		}
	}
}

func productPermissionsJoinProductStripeProduct[Q dialect.Joinable](from productPermissionColumns, typ string) func(context.Context) modAs[Q, stripeProductColumns] {
	return func(ctx context.Context) modAs[Q, stripeProductColumns] {
		return modAs[Q, stripeProductColumns]{
			c: StripeProductColumns,
			f: func(to stripeProductColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, StripeProducts.Name().As(to.Alias())).On(
						to.ID.EQ(from.ProductID),
					))
				}

				return mods
			},
		}
	}
}

// Permission starts a query for related objects on permissions
func (o *ProductPermission) Permission(mods ...bob.Mod[*dialect.SelectQuery]) PermissionsQuery {
	return Permissions.Query(append(mods,
		sm.Where(PermissionColumns.ID.EQ(psql.Arg(o.PermissionID))),
	)...)
}

func (os ProductPermissionSlice) Permission(mods ...bob.Mod[*dialect.SelectQuery]) PermissionsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.PermissionID)
	}

	return Permissions.Query(append(mods,
		sm.Where(psql.Group(PermissionColumns.ID).In(PKArgs...)),
	)...)
}

// ProductStripeProduct starts a query for related objects on stripe_products
func (o *ProductPermission) ProductStripeProduct(mods ...bob.Mod[*dialect.SelectQuery]) StripeProductsQuery {
	return StripeProducts.Query(append(mods,
		sm.Where(StripeProductColumns.ID.EQ(psql.Arg(o.ProductID))),
	)...)
}

func (os ProductPermissionSlice) ProductStripeProduct(mods ...bob.Mod[*dialect.SelectQuery]) StripeProductsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ProductID)
	}

	return StripeProducts.Query(append(mods,
		sm.Where(psql.Group(StripeProductColumns.ID).In(PKArgs...)),
	)...)
}

func (o *ProductPermission) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Permission":
		rel, ok := retrieved.(*Permission)
		if !ok {
			return fmt.Errorf("productPermission cannot load %T as %q", retrieved, name)
		}

		o.R.Permission = rel

		return nil
	case "ProductStripeProduct":
		rel, ok := retrieved.(*StripeProduct)
		if !ok {
			return fmt.Errorf("productPermission cannot load %T as %q", retrieved, name)
		}

		o.R.ProductStripeProduct = rel

		return nil
	default:
		return fmt.Errorf("productPermission has no relationship %q", name)
	}
}

func PreloadProductPermissionPermission(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Permission, PermissionSlice](orm.Relationship{
		Name: "Permission",
		Sides: []orm.RelSide{
			{
				From: TableNames.ProductPermissions,
				To:   TableNames.Permissions,
				FromColumns: []string{
					ColumnNames.ProductPermissions.PermissionID,
				},
				ToColumns: []string{
					ColumnNames.Permissions.ID,
				},
			},
		},
	}, Permissions.Columns().Names(), opts...)
}

func ThenLoadProductPermissionPermission(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadProductPermissionPermission(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load ProductPermissionPermission", retrieved)
		}

		err := loader.LoadProductPermissionPermission(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadProductPermissionPermission loads the productPermission's Permission into the .R struct
func (o *ProductPermission) LoadProductPermissionPermission(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Permission = nil

	related, err := o.Permission(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R.Permission = related
	return nil
}

// LoadProductPermissionPermission loads the productPermission's Permission into the .R struct
func (os ProductPermissionSlice) LoadProductPermissionPermission(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	permissions, err := os.Permission(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range permissions {
			if o.PermissionID != rel.ID {
				continue
			}

			o.R.Permission = rel
			break
		}
	}

	return nil
}

func PreloadProductPermissionProductStripeProduct(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*StripeProduct, StripeProductSlice](orm.Relationship{
		Name: "ProductStripeProduct",
		Sides: []orm.RelSide{
			{
				From: TableNames.ProductPermissions,
				To:   TableNames.StripeProducts,
				FromColumns: []string{
					ColumnNames.ProductPermissions.ProductID,
				},
				ToColumns: []string{
					ColumnNames.StripeProducts.ID,
				},
			},
		},
	}, StripeProducts.Columns().Names(), opts...)
}

func ThenLoadProductPermissionProductStripeProduct(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadProductPermissionProductStripeProduct(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load ProductPermissionProductStripeProduct", retrieved)
		}

		err := loader.LoadProductPermissionProductStripeProduct(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadProductPermissionProductStripeProduct loads the productPermission's ProductStripeProduct into the .R struct
func (o *ProductPermission) LoadProductPermissionProductStripeProduct(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ProductStripeProduct = nil

	related, err := o.ProductStripeProduct(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R.ProductStripeProduct = related
	return nil
}

// LoadProductPermissionProductStripeProduct loads the productPermission's ProductStripeProduct into the .R struct
func (os ProductPermissionSlice) LoadProductPermissionProductStripeProduct(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	stripeProducts, err := os.ProductStripeProduct(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range stripeProducts {
			if o.ProductID != rel.ID {
				continue
			}

			o.R.ProductStripeProduct = rel
			break
		}
	}

	return nil
}

func attachProductPermissionPermission0(ctx context.Context, exec bob.Executor, count int, productPermission0 *ProductPermission, permission1 *Permission) (*ProductPermission, error) {
	setter := &ProductPermissionSetter{
		PermissionID: omit.From(permission1.ID),
	}

	err := productPermission0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachProductPermissionPermission0: %w", err)
	}

	return productPermission0, nil
}

func (productPermission0 *ProductPermission) InsertPermission(ctx context.Context, exec bob.Executor, related *PermissionSetter) error {
	permission1, err := Permissions.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachProductPermissionPermission0(ctx, exec, 1, productPermission0, permission1)
	if err != nil {
		return err
	}

	productPermission0.R.Permission = permission1

	return nil
}

func (productPermission0 *ProductPermission) AttachPermission(ctx context.Context, exec bob.Executor, permission1 *Permission) error {
	var err error

	_, err = attachProductPermissionPermission0(ctx, exec, 1, productPermission0, permission1)
	if err != nil {
		return err
	}

	productPermission0.R.Permission = permission1

	return nil
}

func attachProductPermissionProductStripeProduct0(ctx context.Context, exec bob.Executor, count int, productPermission0 *ProductPermission, stripeProduct1 *StripeProduct) (*ProductPermission, error) {
	setter := &ProductPermissionSetter{
		ProductID: omit.From(stripeProduct1.ID),
	}

	err := productPermission0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachProductPermissionProductStripeProduct0: %w", err)
	}

	return productPermission0, nil
}

func (productPermission0 *ProductPermission) InsertProductStripeProduct(ctx context.Context, exec bob.Executor, related *StripeProductSetter) error {
	stripeProduct1, err := StripeProducts.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachProductPermissionProductStripeProduct0(ctx, exec, 1, productPermission0, stripeProduct1)
	if err != nil {
		return err
	}

	productPermission0.R.ProductStripeProduct = stripeProduct1

	return nil
}

func (productPermission0 *ProductPermission) AttachProductStripeProduct(ctx context.Context, exec bob.Executor, stripeProduct1 *StripeProduct) error {
	var err error

	_, err = attachProductPermissionProductStripeProduct0(ctx, exec, 1, productPermission0, stripeProduct1)
	if err != nil {
		return err
	}

	productPermission0.R.ProductStripeProduct = stripeProduct1

	return nil
}
