// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// TaskProject is an object representing the database table.
type TaskProject struct {
	ID          uuid.UUID         `db:"id,pk" json:"id"`
	UserID      uuid.UUID         `db:"user_id" json:"user_id"`
	Name        string            `db:"name" json:"name"`
	Description null.Val[string]  `db:"description" json:"description"`
	Status      TaskProjectStatus `db:"status" json:"status"`
	Order       float64           `db:"order" json:"order"`
	CreatedAt   time.Time         `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time         `db:"updated_at" json:"updated_at"`

	R taskProjectR `db:"-" json:"-"`
}

// TaskProjectSlice is an alias for a slice of pointers to TaskProject.
// This should almost always be used instead of []*TaskProject.
type TaskProjectSlice []*TaskProject

// TaskProjects contains methods to work with the task_projects table
var TaskProjects = psql.NewTablex[*TaskProject, TaskProjectSlice, *TaskProjectSetter]("", "task_projects")

// TaskProjectsQuery is a query on the task_projects table
type TaskProjectsQuery = *psql.ViewQuery[*TaskProject, TaskProjectSlice]

// taskProjectR is where relationships are stored.
type taskProjectR struct {
	User         *User     `json:"User"`         // task_projects.task_projects_user_id_fkey
	ProjectTasks TaskSlice `json:"ProjectTasks"` // tasks.tasks_project_id_fkey
}

type taskProjectColumnNames struct {
	ID          string
	UserID      string
	Name        string
	Description string
	Status      string
	Order       string
	CreatedAt   string
	UpdatedAt   string
}

var TaskProjectColumns = buildTaskProjectColumns("task_projects")

type taskProjectColumns struct {
	tableAlias  string
	ID          psql.Expression
	UserID      psql.Expression
	Name        psql.Expression
	Description psql.Expression
	Status      psql.Expression
	Order       psql.Expression
	CreatedAt   psql.Expression
	UpdatedAt   psql.Expression
}

func (c taskProjectColumns) Alias() string {
	return c.tableAlias
}

func (taskProjectColumns) AliasedAs(alias string) taskProjectColumns {
	return buildTaskProjectColumns(alias)
}

func buildTaskProjectColumns(alias string) taskProjectColumns {
	return taskProjectColumns{
		tableAlias:  alias,
		ID:          psql.Quote(alias, "id"),
		UserID:      psql.Quote(alias, "user_id"),
		Name:        psql.Quote(alias, "name"),
		Description: psql.Quote(alias, "description"),
		Status:      psql.Quote(alias, "status"),
		Order:       psql.Quote(alias, "order"),
		CreatedAt:   psql.Quote(alias, "created_at"),
		UpdatedAt:   psql.Quote(alias, "updated_at"),
	}
}

type taskProjectWhere[Q psql.Filterable] struct {
	ID          psql.WhereMod[Q, uuid.UUID]
	UserID      psql.WhereMod[Q, uuid.UUID]
	Name        psql.WhereMod[Q, string]
	Description psql.WhereNullMod[Q, string]
	Status      psql.WhereMod[Q, TaskProjectStatus]
	Order       psql.WhereMod[Q, float64]
	CreatedAt   psql.WhereMod[Q, time.Time]
	UpdatedAt   psql.WhereMod[Q, time.Time]
}

func (taskProjectWhere[Q]) AliasedAs(alias string) taskProjectWhere[Q] {
	return buildTaskProjectWhere[Q](buildTaskProjectColumns(alias))
}

func buildTaskProjectWhere[Q psql.Filterable](cols taskProjectColumns) taskProjectWhere[Q] {
	return taskProjectWhere[Q]{
		ID:          psql.Where[Q, uuid.UUID](cols.ID),
		UserID:      psql.Where[Q, uuid.UUID](cols.UserID),
		Name:        psql.Where[Q, string](cols.Name),
		Description: psql.WhereNull[Q, string](cols.Description),
		Status:      psql.Where[Q, TaskProjectStatus](cols.Status),
		Order:       psql.Where[Q, float64](cols.Order),
		CreatedAt:   psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:   psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var TaskProjectErrors = &taskProjectErrors{
	ErrUniqueTaskProjectsPkey: &UniqueConstraintError{s: "task_projects_pkey"},
}

type taskProjectErrors struct {
	ErrUniqueTaskProjectsPkey *UniqueConstraintError
}

// TaskProjectSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TaskProjectSetter struct {
	ID          omit.Val[uuid.UUID]         `db:"id,pk" json:"id"`
	UserID      omit.Val[uuid.UUID]         `db:"user_id" json:"user_id"`
	Name        omit.Val[string]            `db:"name" json:"name"`
	Description omitnull.Val[string]        `db:"description" json:"description"`
	Status      omit.Val[TaskProjectStatus] `db:"status" json:"status"`
	Order       omit.Val[float64]           `db:"order" json:"order"`
	CreatedAt   omit.Val[time.Time]         `db:"created_at" json:"created_at"`
	UpdatedAt   omit.Val[time.Time]         `db:"updated_at" json:"updated_at"`
}

func (s TaskProjectSetter) SetColumns() []string {
	vals := make([]string, 0, 8)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}

	if !s.Status.IsUnset() {
		vals = append(vals, "status")
	}

	if !s.Order.IsUnset() {
		vals = append(vals, "order")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s TaskProjectSetter) Overwrite(t *TaskProject) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.Description.IsUnset() {
		t.Description, _ = s.Description.GetNull()
	}
	if !s.Status.IsUnset() {
		t.Status, _ = s.Status.Get()
	}
	if !s.Order.IsUnset() {
		t.Order, _ = s.Order.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *TaskProjectSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return TaskProjects.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 8)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.UserID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.UserID)
		}

		if s.Name.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Name)
		}

		if s.Description.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Description)
		}

		if s.Status.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.Status)
		}

		if s.Order.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.Order)
		}

		if s.CreatedAt.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[7] = psql.Raw("DEFAULT")
		} else {
			vals[7] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s TaskProjectSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s TaskProjectSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 8)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "description")...),
			psql.Arg(s.Description),
		}})
	}

	if !s.Status.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "status")...),
			psql.Arg(s.Status),
		}})
	}

	if !s.Order.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "order")...),
			psql.Arg(s.Order),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindTaskProject retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTaskProject(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*TaskProject, error) {
	if len(cols) == 0 {
		return TaskProjects.Query(
			SelectWhere.TaskProjects.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return TaskProjects.Query(
		SelectWhere.TaskProjects.ID.EQ(IDPK),
		sm.Columns(TaskProjects.Columns().Only(cols...)),
	).One(ctx, exec)
}

// TaskProjectExists checks the presence of a single record by primary key
func TaskProjectExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return TaskProjects.Query(
		SelectWhere.TaskProjects.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after TaskProject is retrieved from the database
func (o *TaskProject) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = TaskProjects.AfterSelectHooks.RunHooks(ctx, exec, TaskProjectSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = TaskProjects.AfterInsertHooks.RunHooks(ctx, exec, TaskProjectSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = TaskProjects.AfterUpdateHooks.RunHooks(ctx, exec, TaskProjectSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = TaskProjects.AfterDeleteHooks.RunHooks(ctx, exec, TaskProjectSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the TaskProject
func (o *TaskProject) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *TaskProject) pkEQ() dialect.Expression {
	return psql.Quote("task_projects", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the TaskProject
func (o *TaskProject) Update(ctx context.Context, exec bob.Executor, s *TaskProjectSetter) error {
	v, err := TaskProjects.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single TaskProject record with an executor
func (o *TaskProject) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := TaskProjects.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the TaskProject using the executor
func (o *TaskProject) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := TaskProjects.Query(
		SelectWhere.TaskProjects.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after TaskProjectSlice is retrieved from the database
func (o TaskProjectSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = TaskProjects.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = TaskProjects.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = TaskProjects.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = TaskProjects.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o TaskProjectSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("task_projects", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o TaskProjectSlice) copyMatchingRows(from ...*TaskProject) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o TaskProjectSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return TaskProjects.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *TaskProject:
				o.copyMatchingRows(retrieved)
			case []*TaskProject:
				o.copyMatchingRows(retrieved...)
			case TaskProjectSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a TaskProject or a slice of TaskProject
				// then run the AfterUpdateHooks on the slice
				_, err = TaskProjects.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o TaskProjectSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return TaskProjects.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *TaskProject:
				o.copyMatchingRows(retrieved)
			case []*TaskProject:
				o.copyMatchingRows(retrieved...)
			case TaskProjectSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a TaskProject or a slice of TaskProject
				// then run the AfterDeleteHooks on the slice
				_, err = TaskProjects.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o TaskProjectSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TaskProjectSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := TaskProjects.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o TaskProjectSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := TaskProjects.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o TaskProjectSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := TaskProjects.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type taskProjectJoins[Q dialect.Joinable] struct {
	typ          string
	User         func(context.Context) modAs[Q, userColumns]
	ProjectTasks func(context.Context) modAs[Q, taskColumns]
}

func (j taskProjectJoins[Q]) aliasedAs(alias string) taskProjectJoins[Q] {
	return buildTaskProjectJoins[Q](buildTaskProjectColumns(alias), j.typ)
}

func buildTaskProjectJoins[Q dialect.Joinable](cols taskProjectColumns, typ string) taskProjectJoins[Q] {
	return taskProjectJoins[Q]{
		typ:          typ,
		User:         taskProjectsJoinUser[Q](cols, typ),
		ProjectTasks: taskProjectsJoinProjectTasks[Q](cols, typ),
	}
}

func taskProjectsJoinUser[Q dialect.Joinable](from taskProjectColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

func taskProjectsJoinProjectTasks[Q dialect.Joinable](from taskProjectColumns, typ string) func(context.Context) modAs[Q, taskColumns] {
	return func(ctx context.Context) modAs[Q, taskColumns] {
		return modAs[Q, taskColumns]{
			c: TaskColumns,
			f: func(to taskColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Tasks.Name().As(to.Alias())).On(
						to.ProjectID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

// User starts a query for related objects on users
func (o *TaskProject) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os TaskProjectSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

// ProjectTasks starts a query for related objects on tasks
func (o *TaskProject) ProjectTasks(mods ...bob.Mod[*dialect.SelectQuery]) TasksQuery {
	return Tasks.Query(append(mods,
		sm.Where(TaskColumns.ProjectID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os TaskProjectSlice) ProjectTasks(mods ...bob.Mod[*dialect.SelectQuery]) TasksQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return Tasks.Query(append(mods,
		sm.Where(psql.Group(TaskColumns.ProjectID).In(PKArgs...)),
	)...)
}

func (o *TaskProject) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("taskProject cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.TaskProjects = TaskProjectSlice{o}
		}
		return nil
	case "ProjectTasks":
		rels, ok := retrieved.(TaskSlice)
		if !ok {
			return fmt.Errorf("taskProject cannot load %T as %q", retrieved, name)
		}

		o.R.ProjectTasks = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.ProjectTaskProject = o
			}
		}
		return nil
	default:
		return fmt.Errorf("taskProject has no relationship %q", name)
	}
}

func PreloadTaskProjectUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.TaskProjects,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.TaskProjects.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadTaskProjectUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTaskProjectUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TaskProjectUser", retrieved)
		}

		err := loader.LoadTaskProjectUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTaskProjectUser loads the taskProject's User into the .R struct
func (o *TaskProject) LoadTaskProjectUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.TaskProjects = TaskProjectSlice{o}

	o.R.User = related
	return nil
}

// LoadTaskProjectUser loads the taskProject's User into the .R struct
func (os TaskProjectSlice) LoadTaskProjectUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.TaskProjects = append(rel.R.TaskProjects, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func ThenLoadTaskProjectProjectTasks(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTaskProjectProjectTasks(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TaskProjectProjectTasks", retrieved)
		}

		err := loader.LoadTaskProjectProjectTasks(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTaskProjectProjectTasks loads the taskProject's ProjectTasks into the .R struct
func (o *TaskProject) LoadTaskProjectProjectTasks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ProjectTasks = nil

	related, err := o.ProjectTasks(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.ProjectTaskProject = o
	}

	o.R.ProjectTasks = related
	return nil
}

// LoadTaskProjectProjectTasks loads the taskProject's ProjectTasks into the .R struct
func (os TaskProjectSlice) LoadTaskProjectProjectTasks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	tasks, err := os.ProjectTasks(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.ProjectTasks = nil
	}

	for _, o := range os {
		for _, rel := range tasks {
			if o.ID != rel.ProjectID {
				continue
			}

			rel.R.ProjectTaskProject = o

			o.R.ProjectTasks = append(o.R.ProjectTasks, rel)
		}
	}

	return nil
}

func attachTaskProjectUser0(ctx context.Context, exec bob.Executor, count int, taskProject0 *TaskProject, user1 *User) (*TaskProject, error) {
	setter := &TaskProjectSetter{
		UserID: omit.From(user1.ID),
	}

	err := taskProject0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachTaskProjectUser0: %w", err)
	}

	return taskProject0, nil
}

func (taskProject0 *TaskProject) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTaskProjectUser0(ctx, exec, 1, taskProject0, user1)
	if err != nil {
		return err
	}

	taskProject0.R.User = user1

	user1.R.TaskProjects = append(user1.R.TaskProjects, taskProject0)

	return nil
}

func (taskProject0 *TaskProject) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachTaskProjectUser0(ctx, exec, 1, taskProject0, user1)
	if err != nil {
		return err
	}

	taskProject0.R.User = user1

	user1.R.TaskProjects = append(user1.R.TaskProjects, taskProject0)

	return nil
}

func insertTaskProjectProjectTasks0(ctx context.Context, exec bob.Executor, tasks1 []*TaskSetter, taskProject0 *TaskProject) (TaskSlice, error) {
	for i := range tasks1 {
		tasks1[i].ProjectID = omit.From(taskProject0.ID)
	}

	ret, err := Tasks.Insert(bob.ToMods(tasks1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertTaskProjectProjectTasks0: %w", err)
	}

	return ret, nil
}

func attachTaskProjectProjectTasks0(ctx context.Context, exec bob.Executor, count int, tasks1 TaskSlice, taskProject0 *TaskProject) (TaskSlice, error) {
	setter := &TaskSetter{
		ProjectID: omit.From(taskProject0.ID),
	}

	err := tasks1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachTaskProjectProjectTasks0: %w", err)
	}

	return tasks1, nil
}

func (taskProject0 *TaskProject) InsertProjectTasks(ctx context.Context, exec bob.Executor, related ...*TaskSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	tasks1, err := insertTaskProjectProjectTasks0(ctx, exec, related, taskProject0)
	if err != nil {
		return err
	}

	taskProject0.R.ProjectTasks = append(taskProject0.R.ProjectTasks, tasks1...)

	for _, rel := range tasks1 {
		rel.R.ProjectTaskProject = taskProject0
	}
	return nil
}

func (taskProject0 *TaskProject) AttachProjectTasks(ctx context.Context, exec bob.Executor, related ...*Task) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	tasks1 := TaskSlice(related)

	_, err = attachTaskProjectProjectTasks0(ctx, exec, len(related), tasks1, taskProject0)
	if err != nil {
		return err
	}

	taskProject0.R.ProjectTasks = append(taskProject0.R.ProjectTasks, tasks1...)

	for _, rel := range related {
		rel.R.ProjectTaskProject = taskProject0
	}

	return nil
}
