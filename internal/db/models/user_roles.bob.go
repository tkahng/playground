// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// UserRole is an object representing the database table.
type UserRole struct {
	UserID uuid.UUID `db:"user_id,pk" json:"user_id"`
	RoleID uuid.UUID `db:"role_id,pk" json:"role_id"`

	R userRoleR `db:"-" json:"-"`
}

// UserRoleSlice is an alias for a slice of pointers to UserRole.
// This should almost always be used instead of []*UserRole.
type UserRoleSlice []*UserRole

// UserRoles contains methods to work with the user_roles table
var UserRoles = psql.NewTablex[*UserRole, UserRoleSlice, *UserRoleSetter]("", "user_roles")

// UserRolesQuery is a query on the user_roles table
type UserRolesQuery = *psql.ViewQuery[*UserRole, UserRoleSlice]

// userRoleR is where relationships are stored.
type userRoleR struct {
	Role *Role `json:"Role"` // user_roles.user_roles_role_id_fkey
	User *User `json:"User"` // user_roles.user_roles_user_id_fkey
}

type userRoleColumnNames struct {
	UserID string
	RoleID string
}

var UserRoleColumns = buildUserRoleColumns("user_roles")

type userRoleColumns struct {
	tableAlias string
	UserID     psql.Expression
	RoleID     psql.Expression
}

func (c userRoleColumns) Alias() string {
	return c.tableAlias
}

func (userRoleColumns) AliasedAs(alias string) userRoleColumns {
	return buildUserRoleColumns(alias)
}

func buildUserRoleColumns(alias string) userRoleColumns {
	return userRoleColumns{
		tableAlias: alias,
		UserID:     psql.Quote(alias, "user_id"),
		RoleID:     psql.Quote(alias, "role_id"),
	}
}

type userRoleWhere[Q psql.Filterable] struct {
	UserID psql.WhereMod[Q, uuid.UUID]
	RoleID psql.WhereMod[Q, uuid.UUID]
}

func (userRoleWhere[Q]) AliasedAs(alias string) userRoleWhere[Q] {
	return buildUserRoleWhere[Q](buildUserRoleColumns(alias))
}

func buildUserRoleWhere[Q psql.Filterable](cols userRoleColumns) userRoleWhere[Q] {
	return userRoleWhere[Q]{
		UserID: psql.Where[Q, uuid.UUID](cols.UserID),
		RoleID: psql.Where[Q, uuid.UUID](cols.RoleID),
	}
}

var UserRoleErrors = &userRoleErrors{
	ErrUniqueUserRolesPkey: &UniqueConstraintError{s: "user_roles_pkey"},
}

type userRoleErrors struct {
	ErrUniqueUserRolesPkey *UniqueConstraintError
}

// UserRoleSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserRoleSetter struct {
	UserID omit.Val[uuid.UUID] `db:"user_id,pk" json:"user_id"`
	RoleID omit.Val[uuid.UUID] `db:"role_id,pk" json:"role_id"`
}

func (s UserRoleSetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.RoleID.IsUnset() {
		vals = append(vals, "role_id")
	}

	return vals
}

func (s UserRoleSetter) Overwrite(t *UserRole) {
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.RoleID.IsUnset() {
		t.RoleID, _ = s.RoleID.Get()
	}
}

func (s *UserRoleSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return UserRoles.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 2)
		if s.UserID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.UserID)
		}

		if s.RoleID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.RoleID)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserRoleSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserRoleSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.RoleID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "role_id")...),
			psql.Arg(s.RoleID),
		}})
	}

	return exprs
}

// FindUserRole retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUserRole(ctx context.Context, exec bob.Executor, UserIDPK uuid.UUID, RoleIDPK uuid.UUID, cols ...string) (*UserRole, error) {
	if len(cols) == 0 {
		return UserRoles.Query(
			SelectWhere.UserRoles.UserID.EQ(UserIDPK),
			SelectWhere.UserRoles.RoleID.EQ(RoleIDPK),
		).One(ctx, exec)
	}

	return UserRoles.Query(
		SelectWhere.UserRoles.UserID.EQ(UserIDPK),
		SelectWhere.UserRoles.RoleID.EQ(RoleIDPK),
		sm.Columns(UserRoles.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserRoleExists checks the presence of a single record by primary key
func UserRoleExists(ctx context.Context, exec bob.Executor, UserIDPK uuid.UUID, RoleIDPK uuid.UUID) (bool, error) {
	return UserRoles.Query(
		SelectWhere.UserRoles.UserID.EQ(UserIDPK),
		SelectWhere.UserRoles.RoleID.EQ(RoleIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after UserRole is retrieved from the database
func (o *UserRole) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserRoles.AfterSelectHooks.RunHooks(ctx, exec, UserRoleSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = UserRoles.AfterInsertHooks.RunHooks(ctx, exec, UserRoleSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = UserRoles.AfterUpdateHooks.RunHooks(ctx, exec, UserRoleSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = UserRoles.AfterDeleteHooks.RunHooks(ctx, exec, UserRoleSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the UserRole
func (o *UserRole) PrimaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.UserID,
		o.RoleID,
	)
}

func (o *UserRole) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("user_roles", "user_id"), psql.Quote("user_roles", "role_id")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the UserRole
func (o *UserRole) Update(ctx context.Context, exec bob.Executor, s *UserRoleSetter) error {
	v, err := UserRoles.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single UserRole record with an executor
func (o *UserRole) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := UserRoles.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the UserRole using the executor
func (o *UserRole) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := UserRoles.Query(
		SelectWhere.UserRoles.UserID.EQ(o.UserID),
		SelectWhere.UserRoles.RoleID.EQ(o.RoleID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserRoleSlice is retrieved from the database
func (o UserRoleSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserRoles.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = UserRoles.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = UserRoles.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = UserRoles.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserRoleSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("user_roles", "user_id"), psql.Quote("user_roles", "role_id")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserRoleSlice) copyMatchingRows(from ...*UserRole) {
	for i, old := range o {
		for _, new := range from {
			if new.UserID != old.UserID {
				continue
			}
			if new.RoleID != old.RoleID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserRoleSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserRoles.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserRole:
				o.copyMatchingRows(retrieved)
			case []*UserRole:
				o.copyMatchingRows(retrieved...)
			case UserRoleSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserRole or a slice of UserRole
				// then run the AfterUpdateHooks on the slice
				_, err = UserRoles.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserRoleSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserRoles.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserRole:
				o.copyMatchingRows(retrieved)
			case []*UserRole:
				o.copyMatchingRows(retrieved...)
			case UserRoleSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserRole or a slice of UserRole
				// then run the AfterDeleteHooks on the slice
				_, err = UserRoles.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserRoleSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserRoleSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserRoles.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserRoleSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserRoles.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserRoleSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := UserRoles.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type userRoleJoins[Q dialect.Joinable] struct {
	typ  string
	Role func(context.Context) modAs[Q, roleColumns]
	User func(context.Context) modAs[Q, userColumns]
}

func (j userRoleJoins[Q]) aliasedAs(alias string) userRoleJoins[Q] {
	return buildUserRoleJoins[Q](buildUserRoleColumns(alias), j.typ)
}

func buildUserRoleJoins[Q dialect.Joinable](cols userRoleColumns, typ string) userRoleJoins[Q] {
	return userRoleJoins[Q]{
		typ:  typ,
		Role: userRolesJoinRole[Q](cols, typ),
		User: userRolesJoinUser[Q](cols, typ),
	}
}

func userRolesJoinRole[Q dialect.Joinable](from userRoleColumns, typ string) func(context.Context) modAs[Q, roleColumns] {
	return func(ctx context.Context) modAs[Q, roleColumns] {
		return modAs[Q, roleColumns]{
			c: RoleColumns,
			f: func(to roleColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Roles.Name().As(to.Alias())).On(
						to.ID.EQ(from.RoleID),
					))
				}

				return mods
			},
		}
	}
}

func userRolesJoinUser[Q dialect.Joinable](from userRoleColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// Role starts a query for related objects on roles
func (o *UserRole) Role(mods ...bob.Mod[*dialect.SelectQuery]) RolesQuery {
	return Roles.Query(append(mods,
		sm.Where(RoleColumns.ID.EQ(psql.Arg(o.RoleID))),
	)...)
}

func (os UserRoleSlice) Role(mods ...bob.Mod[*dialect.SelectQuery]) RolesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.RoleID)
	}

	return Roles.Query(append(mods,
		sm.Where(psql.Group(RoleColumns.ID).In(PKArgs...)),
	)...)
}

// User starts a query for related objects on users
func (o *UserRole) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os UserRoleSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *UserRole) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Role":
		rel, ok := retrieved.(*Role)
		if !ok {
			return fmt.Errorf("userRole cannot load %T as %q", retrieved, name)
		}

		o.R.Role = rel

		return nil
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("userRole cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		return nil
	default:
		return fmt.Errorf("userRole has no relationship %q", name)
	}
}

func PreloadUserRoleRole(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Role, RoleSlice](orm.Relationship{
		Name: "Role",
		Sides: []orm.RelSide{
			{
				From: TableNames.UserRoles,
				To:   TableNames.Roles,
				FromColumns: []string{
					ColumnNames.UserRoles.RoleID,
				},
				ToColumns: []string{
					ColumnNames.Roles.ID,
				},
			},
		},
	}, Roles.Columns().Names(), opts...)
}

func ThenLoadUserRoleRole(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserRoleRole(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserRoleRole", retrieved)
		}

		err := loader.LoadUserRoleRole(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserRoleRole loads the userRole's Role into the .R struct
func (o *UserRole) LoadUserRoleRole(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Role = nil

	related, err := o.Role(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R.Role = related
	return nil
}

// LoadUserRoleRole loads the userRole's Role into the .R struct
func (os UserRoleSlice) LoadUserRoleRole(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	roles, err := os.Role(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range roles {
			if o.RoleID != rel.ID {
				continue
			}

			o.R.Role = rel
			break
		}
	}

	return nil
}

func PreloadUserRoleUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.UserRoles,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.UserRoles.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadUserRoleUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserRoleUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserRoleUser", retrieved)
		}

		err := loader.LoadUserRoleUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserRoleUser loads the userRole's User into the .R struct
func (o *UserRole) LoadUserRoleUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R.User = related
	return nil
}

// LoadUserRoleUser loads the userRole's User into the .R struct
func (os UserRoleSlice) LoadUserRoleUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachUserRoleRole0(ctx context.Context, exec bob.Executor, count int, userRole0 *UserRole, role1 *Role) (*UserRole, error) {
	setter := &UserRoleSetter{
		RoleID: omit.From(role1.ID),
	}

	err := userRole0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserRoleRole0: %w", err)
	}

	return userRole0, nil
}

func (userRole0 *UserRole) InsertRole(ctx context.Context, exec bob.Executor, related *RoleSetter) error {
	role1, err := Roles.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserRoleRole0(ctx, exec, 1, userRole0, role1)
	if err != nil {
		return err
	}

	userRole0.R.Role = role1

	return nil
}

func (userRole0 *UserRole) AttachRole(ctx context.Context, exec bob.Executor, role1 *Role) error {
	var err error

	_, err = attachUserRoleRole0(ctx, exec, 1, userRole0, role1)
	if err != nil {
		return err
	}

	userRole0.R.Role = role1

	return nil
}

func attachUserRoleUser0(ctx context.Context, exec bob.Executor, count int, userRole0 *UserRole, user1 *User) (*UserRole, error) {
	setter := &UserRoleSetter{
		UserID: omit.From(user1.ID),
	}

	err := userRole0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserRoleUser0: %w", err)
	}

	return userRole0, nil
}

func (userRole0 *UserRole) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserRoleUser0(ctx, exec, 1, userRole0, user1)
	if err != nil {
		return err
	}

	userRole0.R.User = user1

	return nil
}

func (userRole0 *UserRole) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachUserRoleUser0(ctx, exec, 1, userRole0, user1)
	if err != nil {
		return err
	}

	userRole0.R.User = user1

	return nil
}
