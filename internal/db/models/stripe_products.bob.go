// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/types"
)

// StripeProduct is an object representing the database table.
type StripeProduct struct {
	ID          string                        `db:"id,pk" json:"id"`
	Active      bool                          `db:"active" json:"active"`
	Name        string                        `db:"name" json:"name"`
	Description null.Val[string]              `db:"description" json:"description"`
	Image       null.Val[string]              `db:"image" json:"image"`
	Metadata    types.JSON[map[string]string] `db:"metadata" json:"metadata"`
	CreatedAt   time.Time                     `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time                     `db:"updated_at" json:"updated_at"`

	R stripeProductR `db:"-" json:"-"`
}

// StripeProductSlice is an alias for a slice of pointers to StripeProduct.
// This should almost always be used instead of []*StripeProduct.
type StripeProductSlice []*StripeProduct

// StripeProducts contains methods to work with the stripe_products table
var StripeProducts = psql.NewTablex[*StripeProduct, StripeProductSlice, *StripeProductSetter]("", "stripe_products")

// StripeProductsQuery is a query on the stripe_products table
type StripeProductsQuery = *psql.ViewQuery[*StripeProduct, StripeProductSlice]

// stripeProductR is where relationships are stored.
type stripeProductR struct {
	ProductStripePrices StripePriceSlice `json:"ProductStripePrices"` // stripe_prices.stripe_prices_product_id_fkey
}

type stripeProductColumnNames struct {
	ID          string
	Active      string
	Name        string
	Description string
	Image       string
	Metadata    string
	CreatedAt   string
	UpdatedAt   string
}

var StripeProductColumns = buildStripeProductColumns("stripe_products")

type stripeProductColumns struct {
	tableAlias  string
	ID          psql.Expression
	Active      psql.Expression
	Name        psql.Expression
	Description psql.Expression
	Image       psql.Expression
	Metadata    psql.Expression
	CreatedAt   psql.Expression
	UpdatedAt   psql.Expression
}

func (c stripeProductColumns) Alias() string {
	return c.tableAlias
}

func (stripeProductColumns) AliasedAs(alias string) stripeProductColumns {
	return buildStripeProductColumns(alias)
}

func buildStripeProductColumns(alias string) stripeProductColumns {
	return stripeProductColumns{
		tableAlias:  alias,
		ID:          psql.Quote(alias, "id"),
		Active:      psql.Quote(alias, "active"),
		Name:        psql.Quote(alias, "name"),
		Description: psql.Quote(alias, "description"),
		Image:       psql.Quote(alias, "image"),
		Metadata:    psql.Quote(alias, "metadata"),
		CreatedAt:   psql.Quote(alias, "created_at"),
		UpdatedAt:   psql.Quote(alias, "updated_at"),
	}
}

type stripeProductWhere[Q psql.Filterable] struct {
	ID          psql.WhereMod[Q, string]
	Active      psql.WhereMod[Q, bool]
	Name        psql.WhereMod[Q, string]
	Description psql.WhereNullMod[Q, string]
	Image       psql.WhereNullMod[Q, string]
	Metadata    psql.WhereMod[Q, types.JSON[map[string]string]]
	CreatedAt   psql.WhereMod[Q, time.Time]
	UpdatedAt   psql.WhereMod[Q, time.Time]
}

func (stripeProductWhere[Q]) AliasedAs(alias string) stripeProductWhere[Q] {
	return buildStripeProductWhere[Q](buildStripeProductColumns(alias))
}

func buildStripeProductWhere[Q psql.Filterable](cols stripeProductColumns) stripeProductWhere[Q] {
	return stripeProductWhere[Q]{
		ID:          psql.Where[Q, string](cols.ID),
		Active:      psql.Where[Q, bool](cols.Active),
		Name:        psql.Where[Q, string](cols.Name),
		Description: psql.WhereNull[Q, string](cols.Description),
		Image:       psql.WhereNull[Q, string](cols.Image),
		Metadata:    psql.Where[Q, types.JSON[map[string]string]](cols.Metadata),
		CreatedAt:   psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:   psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var StripeProductErrors = &stripeProductErrors{
	ErrUniqueStripeProductsPkey: &UniqueConstraintError{s: "stripe_products_pkey"},
}

type stripeProductErrors struct {
	ErrUniqueStripeProductsPkey *UniqueConstraintError
}

// StripeProductSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type StripeProductSetter struct {
	ID          omit.Val[string]                        `db:"id,pk" json:"id"`
	Active      omit.Val[bool]                          `db:"active" json:"active"`
	Name        omit.Val[string]                        `db:"name" json:"name"`
	Description omitnull.Val[string]                    `db:"description" json:"description"`
	Image       omitnull.Val[string]                    `db:"image" json:"image"`
	Metadata    omit.Val[types.JSON[map[string]string]] `db:"metadata" json:"metadata"`
	CreatedAt   omit.Val[time.Time]                     `db:"created_at" json:"created_at"`
	UpdatedAt   omit.Val[time.Time]                     `db:"updated_at" json:"updated_at"`
}

func (s StripeProductSetter) SetColumns() []string {
	vals := make([]string, 0, 8)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Active.IsUnset() {
		vals = append(vals, "active")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}

	if !s.Image.IsUnset() {
		vals = append(vals, "image")
	}

	if !s.Metadata.IsUnset() {
		vals = append(vals, "metadata")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s StripeProductSetter) Overwrite(t *StripeProduct) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Active.IsUnset() {
		t.Active, _ = s.Active.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.Description.IsUnset() {
		t.Description, _ = s.Description.GetNull()
	}
	if !s.Image.IsUnset() {
		t.Image, _ = s.Image.GetNull()
	}
	if !s.Metadata.IsUnset() {
		t.Metadata, _ = s.Metadata.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *StripeProductSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return StripeProducts.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 8)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.Active.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Active)
		}

		if s.Name.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Name)
		}

		if s.Description.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Description)
		}

		if s.Image.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.Image)
		}

		if s.Metadata.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.Metadata)
		}

		if s.CreatedAt.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[7] = psql.Raw("DEFAULT")
		} else {
			vals[7] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s StripeProductSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s StripeProductSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 8)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.Active.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "active")...),
			psql.Arg(s.Active),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "description")...),
			psql.Arg(s.Description),
		}})
	}

	if !s.Image.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "image")...),
			psql.Arg(s.Image),
		}})
	}

	if !s.Metadata.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "metadata")...),
			psql.Arg(s.Metadata),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindStripeProduct retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindStripeProduct(ctx context.Context, exec bob.Executor, IDPK string, cols ...string) (*StripeProduct, error) {
	if len(cols) == 0 {
		return StripeProducts.Query(
			SelectWhere.StripeProducts.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return StripeProducts.Query(
		SelectWhere.StripeProducts.ID.EQ(IDPK),
		sm.Columns(StripeProducts.Columns().Only(cols...)),
	).One(ctx, exec)
}

// StripeProductExists checks the presence of a single record by primary key
func StripeProductExists(ctx context.Context, exec bob.Executor, IDPK string) (bool, error) {
	return StripeProducts.Query(
		SelectWhere.StripeProducts.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after StripeProduct is retrieved from the database
func (o *StripeProduct) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = StripeProducts.AfterSelectHooks.RunHooks(ctx, exec, StripeProductSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = StripeProducts.AfterInsertHooks.RunHooks(ctx, exec, StripeProductSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = StripeProducts.AfterUpdateHooks.RunHooks(ctx, exec, StripeProductSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = StripeProducts.AfterDeleteHooks.RunHooks(ctx, exec, StripeProductSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the StripeProduct
func (o *StripeProduct) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *StripeProduct) pkEQ() dialect.Expression {
	return psql.Quote("stripe_products", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the StripeProduct
func (o *StripeProduct) Update(ctx context.Context, exec bob.Executor, s *StripeProductSetter) error {
	v, err := StripeProducts.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single StripeProduct record with an executor
func (o *StripeProduct) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := StripeProducts.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the StripeProduct using the executor
func (o *StripeProduct) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := StripeProducts.Query(
		SelectWhere.StripeProducts.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after StripeProductSlice is retrieved from the database
func (o StripeProductSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = StripeProducts.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = StripeProducts.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = StripeProducts.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = StripeProducts.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o StripeProductSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("stripe_products", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o StripeProductSlice) copyMatchingRows(from ...*StripeProduct) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o StripeProductSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return StripeProducts.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *StripeProduct:
				o.copyMatchingRows(retrieved)
			case []*StripeProduct:
				o.copyMatchingRows(retrieved...)
			case StripeProductSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a StripeProduct or a slice of StripeProduct
				// then run the AfterUpdateHooks on the slice
				_, err = StripeProducts.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o StripeProductSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return StripeProducts.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *StripeProduct:
				o.copyMatchingRows(retrieved)
			case []*StripeProduct:
				o.copyMatchingRows(retrieved...)
			case StripeProductSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a StripeProduct or a slice of StripeProduct
				// then run the AfterDeleteHooks on the slice
				_, err = StripeProducts.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o StripeProductSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals StripeProductSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := StripeProducts.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o StripeProductSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := StripeProducts.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o StripeProductSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := StripeProducts.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type stripeProductJoins[Q dialect.Joinable] struct {
	typ                 string
	ProductStripePrices func(context.Context) modAs[Q, stripePriceColumns]
}

func (j stripeProductJoins[Q]) aliasedAs(alias string) stripeProductJoins[Q] {
	return buildStripeProductJoins[Q](buildStripeProductColumns(alias), j.typ)
}

func buildStripeProductJoins[Q dialect.Joinable](cols stripeProductColumns, typ string) stripeProductJoins[Q] {
	return stripeProductJoins[Q]{
		typ:                 typ,
		ProductStripePrices: stripeProductsJoinProductStripePrices[Q](cols, typ),
	}
}

func stripeProductsJoinProductStripePrices[Q dialect.Joinable](from stripeProductColumns, typ string) func(context.Context) modAs[Q, stripePriceColumns] {
	return func(ctx context.Context) modAs[Q, stripePriceColumns] {
		return modAs[Q, stripePriceColumns]{
			c: StripePriceColumns,
			f: func(to stripePriceColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, StripePrices.Name().As(to.Alias())).On(
						to.ProductID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

// ProductStripePrices starts a query for related objects on stripe_prices
func (o *StripeProduct) ProductStripePrices(mods ...bob.Mod[*dialect.SelectQuery]) StripePricesQuery {
	return StripePrices.Query(append(mods,
		sm.Where(StripePriceColumns.ProductID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os StripeProductSlice) ProductStripePrices(mods ...bob.Mod[*dialect.SelectQuery]) StripePricesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return StripePrices.Query(append(mods,
		sm.Where(psql.Group(StripePriceColumns.ProductID).In(PKArgs...)),
	)...)
}

func (o *StripeProduct) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "ProductStripePrices":
		rels, ok := retrieved.(StripePriceSlice)
		if !ok {
			return fmt.Errorf("stripeProduct cannot load %T as %q", retrieved, name)
		}

		o.R.ProductStripePrices = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.ProductStripeProduct = o
			}
		}
		return nil
	default:
		return fmt.Errorf("stripeProduct has no relationship %q", name)
	}
}

func ThenLoadStripeProductProductStripePrices(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadStripeProductProductStripePrices(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load StripeProductProductStripePrices", retrieved)
		}

		err := loader.LoadStripeProductProductStripePrices(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadStripeProductProductStripePrices loads the stripeProduct's ProductStripePrices into the .R struct
func (o *StripeProduct) LoadStripeProductProductStripePrices(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ProductStripePrices = nil

	related, err := o.ProductStripePrices(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.ProductStripeProduct = o
	}

	o.R.ProductStripePrices = related
	return nil
}

// LoadStripeProductProductStripePrices loads the stripeProduct's ProductStripePrices into the .R struct
func (os StripeProductSlice) LoadStripeProductProductStripePrices(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	stripePrices, err := os.ProductStripePrices(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.ProductStripePrices = nil
	}

	for _, o := range os {
		for _, rel := range stripePrices {
			if o.ID != rel.ProductID {
				continue
			}

			rel.R.ProductStripeProduct = o

			o.R.ProductStripePrices = append(o.R.ProductStripePrices, rel)
		}
	}

	return nil
}

func insertStripeProductProductStripePrices0(ctx context.Context, exec bob.Executor, stripePrices1 []*StripePriceSetter, stripeProduct0 *StripeProduct) (StripePriceSlice, error) {
	for i := range stripePrices1 {
		stripePrices1[i].ProductID = omit.From(stripeProduct0.ID)
	}

	ret, err := StripePrices.Insert(bob.ToMods(stripePrices1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertStripeProductProductStripePrices0: %w", err)
	}

	return ret, nil
}

func attachStripeProductProductStripePrices0(ctx context.Context, exec bob.Executor, count int, stripePrices1 StripePriceSlice, stripeProduct0 *StripeProduct) (StripePriceSlice, error) {
	setter := &StripePriceSetter{
		ProductID: omit.From(stripeProduct0.ID),
	}

	err := stripePrices1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachStripeProductProductStripePrices0: %w", err)
	}

	return stripePrices1, nil
}

func (stripeProduct0 *StripeProduct) InsertProductStripePrices(ctx context.Context, exec bob.Executor, related ...*StripePriceSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	stripePrices1, err := insertStripeProductProductStripePrices0(ctx, exec, related, stripeProduct0)
	if err != nil {
		return err
	}

	stripeProduct0.R.ProductStripePrices = append(stripeProduct0.R.ProductStripePrices, stripePrices1...)

	for _, rel := range stripePrices1 {
		rel.R.ProductStripeProduct = stripeProduct0
	}
	return nil
}

func (stripeProduct0 *StripeProduct) AttachProductStripePrices(ctx context.Context, exec bob.Executor, related ...*StripePrice) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	stripePrices1 := StripePriceSlice(related)

	_, err = attachStripeProductProductStripePrices0(ctx, exec, len(related), stripePrices1, stripeProduct0)
	if err != nil {
		return err
	}

	stripeProduct0.R.ProductStripePrices = append(stripeProduct0.R.ProductStripePrices, stripePrices1...)

	for _, rel := range related {
		rel.R.ProductStripeProduct = stripeProduct0
	}

	return nil
}
