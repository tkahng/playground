// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Token is an object representing the database table.
type Token struct {
	ID         uuid.UUID           `db:"id,pk" json:"id"`
	Type       TokenTypes          `db:"type" json:"type"`
	UserID     null.Val[uuid.UUID] `db:"user_id" json:"user_id"`
	Otp        null.Val[string]    `db:"otp" json:"otp"`
	Identifier string              `db:"identifier" json:"identifier"`
	Expires    time.Time           `db:"expires" json:"expires"`
	Token      string              `db:"token" json:"token"`
	CreatedAt  time.Time           `db:"created_at" json:"created_at"`
	UpdatedAt  time.Time           `db:"updated_at" json:"updated_at"`

	R tokenR `db:"-" json:"-"`
}

// TokenSlice is an alias for a slice of pointers to Token.
// This should almost always be used instead of []*Token.
type TokenSlice []*Token

// Tokens contains methods to work with the tokens table
var Tokens = psql.NewTablex[*Token, TokenSlice, *TokenSetter]("", "tokens")

// TokensQuery is a query on the tokens table
type TokensQuery = *psql.ViewQuery[*Token, TokenSlice]

// tokenR is where relationships are stored.
type tokenR struct {
	User *User `json:"User"` // tokens.tokens_user_id_fkey
}

type tokenColumnNames struct {
	ID         string
	Type       string
	UserID     string
	Otp        string
	Identifier string
	Expires    string
	Token      string
	CreatedAt  string
	UpdatedAt  string
}

var TokenColumns = buildTokenColumns("tokens")

type tokenColumns struct {
	tableAlias string
	ID         psql.Expression
	Type       psql.Expression
	UserID     psql.Expression
	Otp        psql.Expression
	Identifier psql.Expression
	Expires    psql.Expression
	Token      psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
}

func (c tokenColumns) Alias() string {
	return c.tableAlias
}

func (tokenColumns) AliasedAs(alias string) tokenColumns {
	return buildTokenColumns(alias)
}

func buildTokenColumns(alias string) tokenColumns {
	return tokenColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		Type:       psql.Quote(alias, "type"),
		UserID:     psql.Quote(alias, "user_id"),
		Otp:        psql.Quote(alias, "otp"),
		Identifier: psql.Quote(alias, "identifier"),
		Expires:    psql.Quote(alias, "expires"),
		Token:      psql.Quote(alias, "token"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
	}
}

type tokenWhere[Q psql.Filterable] struct {
	ID         psql.WhereMod[Q, uuid.UUID]
	Type       psql.WhereMod[Q, TokenTypes]
	UserID     psql.WhereNullMod[Q, uuid.UUID]
	Otp        psql.WhereNullMod[Q, string]
	Identifier psql.WhereMod[Q, string]
	Expires    psql.WhereMod[Q, time.Time]
	Token      psql.WhereMod[Q, string]
	CreatedAt  psql.WhereMod[Q, time.Time]
	UpdatedAt  psql.WhereMod[Q, time.Time]
}

func (tokenWhere[Q]) AliasedAs(alias string) tokenWhere[Q] {
	return buildTokenWhere[Q](buildTokenColumns(alias))
}

func buildTokenWhere[Q psql.Filterable](cols tokenColumns) tokenWhere[Q] {
	return tokenWhere[Q]{
		ID:         psql.Where[Q, uuid.UUID](cols.ID),
		Type:       psql.Where[Q, TokenTypes](cols.Type),
		UserID:     psql.WhereNull[Q, uuid.UUID](cols.UserID),
		Otp:        psql.WhereNull[Q, string](cols.Otp),
		Identifier: psql.Where[Q, string](cols.Identifier),
		Expires:    psql.Where[Q, time.Time](cols.Expires),
		Token:      psql.Where[Q, string](cols.Token),
		CreatedAt:  psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:  psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var TokenErrors = &tokenErrors{
	ErrUniqueTokensPkey: &UniqueConstraintError{s: "tokens_pkey"},

	ErrUniqueTokensTokenKey: &UniqueConstraintError{s: "tokens_token_key"},
}

type tokenErrors struct {
	ErrUniqueTokensPkey *UniqueConstraintError

	ErrUniqueTokensTokenKey *UniqueConstraintError
}

// TokenSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TokenSetter struct {
	ID         omit.Val[uuid.UUID]     `db:"id,pk" json:"id"`
	Type       omit.Val[TokenTypes]    `db:"type" json:"type"`
	UserID     omitnull.Val[uuid.UUID] `db:"user_id" json:"user_id"`
	Otp        omitnull.Val[string]    `db:"otp" json:"otp"`
	Identifier omit.Val[string]        `db:"identifier" json:"identifier"`
	Expires    omit.Val[time.Time]     `db:"expires" json:"expires"`
	Token      omit.Val[string]        `db:"token" json:"token"`
	CreatedAt  omit.Val[time.Time]     `db:"created_at" json:"created_at"`
	UpdatedAt  omit.Val[time.Time]     `db:"updated_at" json:"updated_at"`
}

func (s TokenSetter) SetColumns() []string {
	vals := make([]string, 0, 9)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Type.IsUnset() {
		vals = append(vals, "type")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.Otp.IsUnset() {
		vals = append(vals, "otp")
	}

	if !s.Identifier.IsUnset() {
		vals = append(vals, "identifier")
	}

	if !s.Expires.IsUnset() {
		vals = append(vals, "expires")
	}

	if !s.Token.IsUnset() {
		vals = append(vals, "token")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s TokenSetter) Overwrite(t *Token) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Type.IsUnset() {
		t.Type, _ = s.Type.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.GetNull()
	}
	if !s.Otp.IsUnset() {
		t.Otp, _ = s.Otp.GetNull()
	}
	if !s.Identifier.IsUnset() {
		t.Identifier, _ = s.Identifier.Get()
	}
	if !s.Expires.IsUnset() {
		t.Expires, _ = s.Expires.Get()
	}
	if !s.Token.IsUnset() {
		t.Token, _ = s.Token.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *TokenSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Tokens.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 9)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.Type.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Type)
		}

		if s.UserID.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.UserID)
		}

		if s.Otp.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Otp)
		}

		if s.Identifier.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.Identifier)
		}

		if s.Expires.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.Expires)
		}

		if s.Token.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.Token)
		}

		if s.CreatedAt.IsUnset() {
			vals[7] = psql.Raw("DEFAULT")
		} else {
			vals[7] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[8] = psql.Raw("DEFAULT")
		} else {
			vals[8] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s TokenSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s TokenSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 9)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.Type.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "type")...),
			psql.Arg(s.Type),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.Otp.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "otp")...),
			psql.Arg(s.Otp),
		}})
	}

	if !s.Identifier.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "identifier")...),
			psql.Arg(s.Identifier),
		}})
	}

	if !s.Expires.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "expires")...),
			psql.Arg(s.Expires),
		}})
	}

	if !s.Token.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "token")...),
			psql.Arg(s.Token),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindToken retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindToken(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*Token, error) {
	if len(cols) == 0 {
		return Tokens.Query(
			SelectWhere.Tokens.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Tokens.Query(
		SelectWhere.Tokens.ID.EQ(IDPK),
		sm.Columns(Tokens.Columns().Only(cols...)),
	).One(ctx, exec)
}

// TokenExists checks the presence of a single record by primary key
func TokenExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return Tokens.Query(
		SelectWhere.Tokens.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Token is retrieved from the database
func (o *Token) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Tokens.AfterSelectHooks.RunHooks(ctx, exec, TokenSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Tokens.AfterInsertHooks.RunHooks(ctx, exec, TokenSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Tokens.AfterUpdateHooks.RunHooks(ctx, exec, TokenSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Tokens.AfterDeleteHooks.RunHooks(ctx, exec, TokenSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Token
func (o *Token) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Token) pkEQ() dialect.Expression {
	return psql.Quote("tokens", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Token
func (o *Token) Update(ctx context.Context, exec bob.Executor, s *TokenSetter) error {
	v, err := Tokens.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Token record with an executor
func (o *Token) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Tokens.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Token using the executor
func (o *Token) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Tokens.Query(
		SelectWhere.Tokens.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after TokenSlice is retrieved from the database
func (o TokenSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Tokens.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Tokens.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Tokens.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Tokens.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o TokenSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("tokens", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o TokenSlice) copyMatchingRows(from ...*Token) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o TokenSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Tokens.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Token:
				o.copyMatchingRows(retrieved)
			case []*Token:
				o.copyMatchingRows(retrieved...)
			case TokenSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Token or a slice of Token
				// then run the AfterUpdateHooks on the slice
				_, err = Tokens.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o TokenSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Tokens.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Token:
				o.copyMatchingRows(retrieved)
			case []*Token:
				o.copyMatchingRows(retrieved...)
			case TokenSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Token or a slice of Token
				// then run the AfterDeleteHooks on the slice
				_, err = Tokens.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o TokenSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TokenSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Tokens.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o TokenSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Tokens.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o TokenSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Tokens.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type tokenJoins[Q dialect.Joinable] struct {
	typ  string
	User func(context.Context) modAs[Q, userColumns]
}

func (j tokenJoins[Q]) aliasedAs(alias string) tokenJoins[Q] {
	return buildTokenJoins[Q](buildTokenColumns(alias), j.typ)
}

func buildTokenJoins[Q dialect.Joinable](cols tokenColumns, typ string) tokenJoins[Q] {
	return tokenJoins[Q]{
		typ:  typ,
		User: tokensJoinUser[Q](cols, typ),
	}
}

func tokensJoinUser[Q dialect.Joinable](from tokenColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// User starts a query for related objects on users
func (o *Token) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os TokenSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *Token) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("token cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.Tokens = TokenSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("token has no relationship %q", name)
	}
}

func PreloadTokenUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.Tokens,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.Tokens.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadTokenUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTokenUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TokenUser", retrieved)
		}

		err := loader.LoadTokenUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTokenUser loads the token's User into the .R struct
func (o *Token) LoadTokenUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Tokens = TokenSlice{o}

	o.R.User = related
	return nil
}

// LoadTokenUser loads the token's User into the .R struct
func (os TokenSlice) LoadTokenUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID.GetOrZero() != rel.ID {
				continue
			}

			rel.R.Tokens = append(rel.R.Tokens, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachTokenUser0(ctx context.Context, exec bob.Executor, count int, token0 *Token, user1 *User) (*Token, error) {
	setter := &TokenSetter{
		UserID: omitnull.From(user1.ID),
	}

	err := token0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachTokenUser0: %w", err)
	}

	return token0, nil
}

func (token0 *Token) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTokenUser0(ctx, exec, 1, token0, user1)
	if err != nil {
		return err
	}

	token0.R.User = user1

	user1.R.Tokens = append(user1.R.Tokens, token0)

	return nil
}

func (token0 *Token) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachTokenUser0(ctx, exec, 1, token0, user1)
	if err != nil {
		return err
	}

	token0.R.User = user1

	user1.R.Tokens = append(user1.R.Tokens, token0)

	return nil
}
