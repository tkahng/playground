// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/scan"
)

// User is an object representing the database table.
type User struct {
	ID              uuid.UUID           `db:"id,pk" json:"id"`
	Email           string              `db:"email" json:"email"`
	EmailVerifiedAt null.Val[time.Time] `db:"email_verified_at" json:"email_verified_at"`
	Name            null.Val[string]    `db:"name" json:"name"`
	Image           null.Val[string]    `db:"image" json:"image"`
	CreatedAt       time.Time           `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time           `db:"updated_at" json:"updated_at"`

	R userR `db:"-" json:"-"`
}

// UserSlice is an alias for a slice of pointers to User.
// This should almost always be used instead of []*User.
type UserSlice []*User

// Users contains methods to work with the users table
var Users = psql.NewTablex[*User, UserSlice, *UserSetter]("", "users")

// UsersQuery is a query on the users table
type UsersQuery = *psql.ViewQuery[*User, UserSlice]

// userR is where relationships are stored.
type userR struct {
	AiUsages            AiUsageSlice            `json:"AiUsages"`            // ai_usages.ai_usages_user_id_fkey
	Media               MediumSlice             `json:"Media"`               // media.media_user_id_fkey
	Notifications       NotificationSlice       `json:"Notifications"`       // notifications.fk_notifications_user
	IDStripeCustomer    *StripeCustomer         `json:"IDStripeCustomer"`    // stripe_customers.stripe_customers_id_fkey
	StripeSubscriptions StripeSubscriptionSlice `json:"StripeSubscriptions"` // stripe_subscriptions.stripe_subscriptions_user_id_fkey
	TaskProjects        TaskProjectSlice        `json:"TaskProjects"`        // task_projects.task_projects_user_id_fkey
	Tasks               TaskSlice               `json:"Tasks"`               // tasks.tasks_user_id_fkey
	Tokens              TokenSlice              `json:"Tokens"`              // tokens.tokens_user_id_fkey
	UserAccounts        UserAccountSlice        `json:"UserAccounts"`        // user_accounts.user_accounts_user_id_fkey
	Permissions         PermissionSlice         `json:"Permissions"`         // user_permissions.user_permissions_permission_id_fkeyuser_permissions.user_permissions_user_id_fkey
	Roles               RoleSlice               `json:"Roles"`               // user_roles.user_roles_role_id_fkeyuser_roles.user_roles_user_id_fkey
	UserSessions        UserSessionSlice        `json:"UserSessions"`        // user_sessions.user_sessions_user_id_fkey
}

type userColumnNames struct {
	ID              string
	Email           string
	EmailVerifiedAt string
	Name            string
	Image           string
	CreatedAt       string
	UpdatedAt       string
}

var UserColumns = buildUserColumns("users")

type userColumns struct {
	tableAlias      string
	ID              psql.Expression
	Email           psql.Expression
	EmailVerifiedAt psql.Expression
	Name            psql.Expression
	Image           psql.Expression
	CreatedAt       psql.Expression
	UpdatedAt       psql.Expression
}

func (c userColumns) Alias() string {
	return c.tableAlias
}

func (userColumns) AliasedAs(alias string) userColumns {
	return buildUserColumns(alias)
}

func buildUserColumns(alias string) userColumns {
	return userColumns{
		tableAlias:      alias,
		ID:              psql.Quote(alias, "id"),
		Email:           psql.Quote(alias, "email"),
		EmailVerifiedAt: psql.Quote(alias, "email_verified_at"),
		Name:            psql.Quote(alias, "name"),
		Image:           psql.Quote(alias, "image"),
		CreatedAt:       psql.Quote(alias, "created_at"),
		UpdatedAt:       psql.Quote(alias, "updated_at"),
	}
}

type userWhere[Q psql.Filterable] struct {
	ID              psql.WhereMod[Q, uuid.UUID]
	Email           psql.WhereMod[Q, string]
	EmailVerifiedAt psql.WhereNullMod[Q, time.Time]
	Name            psql.WhereNullMod[Q, string]
	Image           psql.WhereNullMod[Q, string]
	CreatedAt       psql.WhereMod[Q, time.Time]
	UpdatedAt       psql.WhereMod[Q, time.Time]
}

func (userWhere[Q]) AliasedAs(alias string) userWhere[Q] {
	return buildUserWhere[Q](buildUserColumns(alias))
}

func buildUserWhere[Q psql.Filterable](cols userColumns) userWhere[Q] {
	return userWhere[Q]{
		ID:              psql.Where[Q, uuid.UUID](cols.ID),
		Email:           psql.Where[Q, string](cols.Email),
		EmailVerifiedAt: psql.WhereNull[Q, time.Time](cols.EmailVerifiedAt),
		Name:            psql.WhereNull[Q, string](cols.Name),
		Image:           psql.WhereNull[Q, string](cols.Image),
		CreatedAt:       psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:       psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var UserErrors = &userErrors{
	ErrUniqueUsersPkey: &UniqueConstraintError{s: "users_pkey"},

	ErrUniqueUsersEmailKey: &UniqueConstraintError{s: "users_email_key"},
}

type userErrors struct {
	ErrUniqueUsersPkey *UniqueConstraintError

	ErrUniqueUsersEmailKey *UniqueConstraintError
}

// UserSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSetter struct {
	ID              omit.Val[uuid.UUID]     `db:"id,pk" json:"id"`
	Email           omit.Val[string]        `db:"email" json:"email"`
	EmailVerifiedAt omitnull.Val[time.Time] `db:"email_verified_at" json:"email_verified_at"`
	Name            omitnull.Val[string]    `db:"name" json:"name"`
	Image           omitnull.Val[string]    `db:"image" json:"image"`
	CreatedAt       omit.Val[time.Time]     `db:"created_at" json:"created_at"`
	UpdatedAt       omit.Val[time.Time]     `db:"updated_at" json:"updated_at"`
}

func (s UserSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Email.IsUnset() {
		vals = append(vals, "email")
	}

	if !s.EmailVerifiedAt.IsUnset() {
		vals = append(vals, "email_verified_at")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.Image.IsUnset() {
		vals = append(vals, "image")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s UserSetter) Overwrite(t *User) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Email.IsUnset() {
		t.Email, _ = s.Email.Get()
	}
	if !s.EmailVerifiedAt.IsUnset() {
		t.EmailVerifiedAt, _ = s.EmailVerifiedAt.GetNull()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.GetNull()
	}
	if !s.Image.IsUnset() {
		t.Image, _ = s.Image.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *UserSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Users.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 7)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.Email.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Email)
		}

		if s.EmailVerifiedAt.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.EmailVerifiedAt)
		}

		if s.Name.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Name)
		}

		if s.Image.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.Image)
		}

		if s.CreatedAt.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.Email.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "email")...),
			psql.Arg(s.Email),
		}})
	}

	if !s.EmailVerifiedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "email_verified_at")...),
			psql.Arg(s.EmailVerifiedAt),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if !s.Image.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "image")...),
			psql.Arg(s.Image),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindUser retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUser(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*User, error) {
	if len(cols) == 0 {
		return Users.Query(
			SelectWhere.Users.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Users.Query(
		SelectWhere.Users.ID.EQ(IDPK),
		sm.Columns(Users.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserExists checks the presence of a single record by primary key
func UserExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return Users.Query(
		SelectWhere.Users.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after User is retrieved from the database
func (o *User) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, UserSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the User
func (o *User) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *User) pkEQ() dialect.Expression {
	return psql.Quote("users", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the User
func (o *User) Update(ctx context.Context, exec bob.Executor, s *UserSetter) error {
	v, err := Users.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single User record with an executor
func (o *User) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Users.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the User using the executor
func (o *User) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Users.Query(
		SelectWhere.Users.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserSlice is retrieved from the database
func (o UserSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("users", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserSlice) copyMatchingRows(from ...*User) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterUpdateHooks on the slice
				_, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterDeleteHooks on the slice
				_, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Users.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type userJoins[Q dialect.Joinable] struct {
	typ                 string
	AiUsages            func(context.Context) modAs[Q, aiUsageColumns]
	Media               func(context.Context) modAs[Q, mediumColumns]
	Notifications       func(context.Context) modAs[Q, notificationColumns]
	IDStripeCustomer    func(context.Context) modAs[Q, stripeCustomerColumns]
	StripeSubscriptions func(context.Context) modAs[Q, stripeSubscriptionColumns]
	TaskProjects        func(context.Context) modAs[Q, taskProjectColumns]
	Tasks               func(context.Context) modAs[Q, taskColumns]
	Tokens              func(context.Context) modAs[Q, tokenColumns]
	UserAccounts        func(context.Context) modAs[Q, userAccountColumns]
	Permissions         func(context.Context) modAs[Q, permissionColumns]
	Roles               func(context.Context) modAs[Q, roleColumns]
	UserSessions        func(context.Context) modAs[Q, userSessionColumns]
}

func (j userJoins[Q]) aliasedAs(alias string) userJoins[Q] {
	return buildUserJoins[Q](buildUserColumns(alias), j.typ)
}

func buildUserJoins[Q dialect.Joinable](cols userColumns, typ string) userJoins[Q] {
	return userJoins[Q]{
		typ:                 typ,
		AiUsages:            usersJoinAiUsages[Q](cols, typ),
		Media:               usersJoinMedia[Q](cols, typ),
		Notifications:       usersJoinNotifications[Q](cols, typ),
		IDStripeCustomer:    usersJoinIDStripeCustomer[Q](cols, typ),
		StripeSubscriptions: usersJoinStripeSubscriptions[Q](cols, typ),
		TaskProjects:        usersJoinTaskProjects[Q](cols, typ),
		Tasks:               usersJoinTasks[Q](cols, typ),
		Tokens:              usersJoinTokens[Q](cols, typ),
		UserAccounts:        usersJoinUserAccounts[Q](cols, typ),
		Permissions:         usersJoinPermissions[Q](cols, typ),
		Roles:               usersJoinRoles[Q](cols, typ),
		UserSessions:        usersJoinUserSessions[Q](cols, typ),
	}
}

func usersJoinAiUsages[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, aiUsageColumns] {
	return func(ctx context.Context) modAs[Q, aiUsageColumns] {
		return modAs[Q, aiUsageColumns]{
			c: AiUsageColumns,
			f: func(to aiUsageColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, AiUsages.Name().As(to.Alias())).On(
						to.UserID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinMedia[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, mediumColumns] {
	return func(ctx context.Context) modAs[Q, mediumColumns] {
		return modAs[Q, mediumColumns]{
			c: MediumColumns,
			f: func(to mediumColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Media.Name().As(to.Alias())).On(
						to.UserID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinNotifications[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, notificationColumns] {
	return func(ctx context.Context) modAs[Q, notificationColumns] {
		return modAs[Q, notificationColumns]{
			c: NotificationColumns,
			f: func(to notificationColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Notifications.Name().As(to.Alias())).On(
						to.UserID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinIDStripeCustomer[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, stripeCustomerColumns] {
	return func(ctx context.Context) modAs[Q, stripeCustomerColumns] {
		return modAs[Q, stripeCustomerColumns]{
			c: StripeCustomerColumns,
			f: func(to stripeCustomerColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, StripeCustomers.Name().As(to.Alias())).On(
						to.ID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinStripeSubscriptions[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, stripeSubscriptionColumns] {
	return func(ctx context.Context) modAs[Q, stripeSubscriptionColumns] {
		return modAs[Q, stripeSubscriptionColumns]{
			c: StripeSubscriptionColumns,
			f: func(to stripeSubscriptionColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, StripeSubscriptions.Name().As(to.Alias())).On(
						to.UserID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinTaskProjects[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, taskProjectColumns] {
	return func(ctx context.Context) modAs[Q, taskProjectColumns] {
		return modAs[Q, taskProjectColumns]{
			c: TaskProjectColumns,
			f: func(to taskProjectColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, TaskProjects.Name().As(to.Alias())).On(
						to.UserID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinTasks[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, taskColumns] {
	return func(ctx context.Context) modAs[Q, taskColumns] {
		return modAs[Q, taskColumns]{
			c: TaskColumns,
			f: func(to taskColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Tasks.Name().As(to.Alias())).On(
						to.UserID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinTokens[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, tokenColumns] {
	return func(ctx context.Context) modAs[Q, tokenColumns] {
		return modAs[Q, tokenColumns]{
			c: TokenColumns,
			f: func(to tokenColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Tokens.Name().As(to.Alias())).On(
						to.UserID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinUserAccounts[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, userAccountColumns] {
	return func(ctx context.Context) modAs[Q, userAccountColumns] {
		return modAs[Q, userAccountColumns]{
			c: UserAccountColumns,
			f: func(to userAccountColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, UserAccounts.Name().As(to.Alias())).On(
						to.UserID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinPermissions[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, permissionColumns] {
	return func(ctx context.Context) modAs[Q, permissionColumns] {
		return modAs[Q, permissionColumns]{
			c: PermissionColumns,
			f: func(to permissionColumns) bob.Mod[Q] {
				random := strconv.FormatInt(randInt(), 10)
				mods := make(mods.QueryMods[Q], 0, 2)

				{
					to := UserPermissionColumns.AliasedAs(UserPermissionColumns.Alias() + random)
					mods = append(mods, dialect.Join[Q](typ, UserPermissions.Name().As(to.Alias())).On(
						to.UserID.EQ(from.ID),
					))
				}
				{
					from := UserPermissionColumns.AliasedAs(UserPermissionColumns.Alias() + random)
					mods = append(mods, dialect.Join[Q](typ, Permissions.Name().As(to.Alias())).On(
						to.ID.EQ(from.PermissionID),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinRoles[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, roleColumns] {
	return func(ctx context.Context) modAs[Q, roleColumns] {
		return modAs[Q, roleColumns]{
			c: RoleColumns,
			f: func(to roleColumns) bob.Mod[Q] {
				random := strconv.FormatInt(randInt(), 10)
				mods := make(mods.QueryMods[Q], 0, 2)

				{
					to := UserRoleColumns.AliasedAs(UserRoleColumns.Alias() + random)
					mods = append(mods, dialect.Join[Q](typ, UserRoles.Name().As(to.Alias())).On(
						to.UserID.EQ(from.ID),
					))
				}
				{
					from := UserRoleColumns.AliasedAs(UserRoleColumns.Alias() + random)
					mods = append(mods, dialect.Join[Q](typ, Roles.Name().As(to.Alias())).On(
						to.ID.EQ(from.RoleID),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinUserSessions[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, userSessionColumns] {
	return func(ctx context.Context) modAs[Q, userSessionColumns] {
		return modAs[Q, userSessionColumns]{
			c: UserSessionColumns,
			f: func(to userSessionColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, UserSessions.Name().As(to.Alias())).On(
						to.UserID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

// AiUsages starts a query for related objects on ai_usages
func (o *User) AiUsages(mods ...bob.Mod[*dialect.SelectQuery]) AiUsagesQuery {
	return AiUsages.Query(append(mods,
		sm.Where(AiUsageColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) AiUsages(mods ...bob.Mod[*dialect.SelectQuery]) AiUsagesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return AiUsages.Query(append(mods,
		sm.Where(psql.Group(AiUsageColumns.UserID).In(PKArgs...)),
	)...)
}

// Media starts a query for related objects on media
func (o *User) Media(mods ...bob.Mod[*dialect.SelectQuery]) MediaQuery {
	return Media.Query(append(mods,
		sm.Where(MediumColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) Media(mods ...bob.Mod[*dialect.SelectQuery]) MediaQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return Media.Query(append(mods,
		sm.Where(psql.Group(MediumColumns.UserID).In(PKArgs...)),
	)...)
}

// Notifications starts a query for related objects on notifications
func (o *User) Notifications(mods ...bob.Mod[*dialect.SelectQuery]) NotificationsQuery {
	return Notifications.Query(append(mods,
		sm.Where(NotificationColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) Notifications(mods ...bob.Mod[*dialect.SelectQuery]) NotificationsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return Notifications.Query(append(mods,
		sm.Where(psql.Group(NotificationColumns.UserID).In(PKArgs...)),
	)...)
}

// IDStripeCustomer starts a query for related objects on stripe_customers
func (o *User) IDStripeCustomer(mods ...bob.Mod[*dialect.SelectQuery]) StripeCustomersQuery {
	return StripeCustomers.Query(append(mods,
		sm.Where(StripeCustomerColumns.ID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) IDStripeCustomer(mods ...bob.Mod[*dialect.SelectQuery]) StripeCustomersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return StripeCustomers.Query(append(mods,
		sm.Where(psql.Group(StripeCustomerColumns.ID).In(PKArgs...)),
	)...)
}

// StripeSubscriptions starts a query for related objects on stripe_subscriptions
func (o *User) StripeSubscriptions(mods ...bob.Mod[*dialect.SelectQuery]) StripeSubscriptionsQuery {
	return StripeSubscriptions.Query(append(mods,
		sm.Where(StripeSubscriptionColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) StripeSubscriptions(mods ...bob.Mod[*dialect.SelectQuery]) StripeSubscriptionsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return StripeSubscriptions.Query(append(mods,
		sm.Where(psql.Group(StripeSubscriptionColumns.UserID).In(PKArgs...)),
	)...)
}

// TaskProjects starts a query for related objects on task_projects
func (o *User) TaskProjects(mods ...bob.Mod[*dialect.SelectQuery]) TaskProjectsQuery {
	return TaskProjects.Query(append(mods,
		sm.Where(TaskProjectColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) TaskProjects(mods ...bob.Mod[*dialect.SelectQuery]) TaskProjectsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return TaskProjects.Query(append(mods,
		sm.Where(psql.Group(TaskProjectColumns.UserID).In(PKArgs...)),
	)...)
}

// Tasks starts a query for related objects on tasks
func (o *User) Tasks(mods ...bob.Mod[*dialect.SelectQuery]) TasksQuery {
	return Tasks.Query(append(mods,
		sm.Where(TaskColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) Tasks(mods ...bob.Mod[*dialect.SelectQuery]) TasksQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return Tasks.Query(append(mods,
		sm.Where(psql.Group(TaskColumns.UserID).In(PKArgs...)),
	)...)
}

// Tokens starts a query for related objects on tokens
func (o *User) Tokens(mods ...bob.Mod[*dialect.SelectQuery]) TokensQuery {
	return Tokens.Query(append(mods,
		sm.Where(TokenColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) Tokens(mods ...bob.Mod[*dialect.SelectQuery]) TokensQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return Tokens.Query(append(mods,
		sm.Where(psql.Group(TokenColumns.UserID).In(PKArgs...)),
	)...)
}

// UserAccounts starts a query for related objects on user_accounts
func (o *User) UserAccounts(mods ...bob.Mod[*dialect.SelectQuery]) UserAccountsQuery {
	return UserAccounts.Query(append(mods,
		sm.Where(UserAccountColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) UserAccounts(mods ...bob.Mod[*dialect.SelectQuery]) UserAccountsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return UserAccounts.Query(append(mods,
		sm.Where(psql.Group(UserAccountColumns.UserID).In(PKArgs...)),
	)...)
}

// Permissions starts a query for related objects on permissions
func (o *User) Permissions(mods ...bob.Mod[*dialect.SelectQuery]) PermissionsQuery {
	return Permissions.Query(append(mods,
		sm.InnerJoin(UserPermissions.NameAs()).On(
			PermissionColumns.ID.EQ(UserPermissionColumns.PermissionID)),
		sm.Where(UserPermissionColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) Permissions(mods ...bob.Mod[*dialect.SelectQuery]) PermissionsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return Permissions.Query(append(mods,
		sm.InnerJoin(UserPermissions.NameAs()).On(
			PermissionColumns.ID.EQ(UserPermissionColumns.PermissionID),
		),
		sm.Where(psql.Group(UserPermissionColumns.UserID).In(PKArgs...)),
	)...)
}

// Roles starts a query for related objects on roles
func (o *User) Roles(mods ...bob.Mod[*dialect.SelectQuery]) RolesQuery {
	return Roles.Query(append(mods,
		sm.InnerJoin(UserRoles.NameAs()).On(
			RoleColumns.ID.EQ(UserRoleColumns.RoleID)),
		sm.Where(UserRoleColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) Roles(mods ...bob.Mod[*dialect.SelectQuery]) RolesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return Roles.Query(append(mods,
		sm.InnerJoin(UserRoles.NameAs()).On(
			RoleColumns.ID.EQ(UserRoleColumns.RoleID),
		),
		sm.Where(psql.Group(UserRoleColumns.UserID).In(PKArgs...)),
	)...)
}

// UserSessions starts a query for related objects on user_sessions
func (o *User) UserSessions(mods ...bob.Mod[*dialect.SelectQuery]) UserSessionsQuery {
	return UserSessions.Query(append(mods,
		sm.Where(UserSessionColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) UserSessions(mods ...bob.Mod[*dialect.SelectQuery]) UserSessionsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return UserSessions.Query(append(mods,
		sm.Where(psql.Group(UserSessionColumns.UserID).In(PKArgs...)),
	)...)
}

func (o *User) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "AiUsages":
		rels, ok := retrieved.(AiUsageSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.AiUsages = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "Media":
		rels, ok := retrieved.(MediumSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.Media = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "Notifications":
		rels, ok := retrieved.(NotificationSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.Notifications = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "IDStripeCustomer":
		rel, ok := retrieved.(*StripeCustomer)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.IDStripeCustomer = rel

		if rel != nil {
			rel.R.IDUser = o
		}
		return nil
	case "StripeSubscriptions":
		rels, ok := retrieved.(StripeSubscriptionSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.StripeSubscriptions = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "TaskProjects":
		rels, ok := retrieved.(TaskProjectSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.TaskProjects = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "Tasks":
		rels, ok := retrieved.(TaskSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.Tasks = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "Tokens":
		rels, ok := retrieved.(TokenSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.Tokens = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "UserAccounts":
		rels, ok := retrieved.(UserAccountSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.UserAccounts = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "Permissions":
		rels, ok := retrieved.(PermissionSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.Permissions = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Users = UserSlice{o}
			}
		}
		return nil
	case "Roles":
		rels, ok := retrieved.(RoleSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.Roles = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Users = UserSlice{o}
			}
		}
		return nil
	case "UserSessions":
		rels, ok := retrieved.(UserSessionSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.UserSessions = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	default:
		return fmt.Errorf("user has no relationship %q", name)
	}
}

func ThenLoadUserAiUsages(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserAiUsages(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserAiUsages", retrieved)
		}

		err := loader.LoadUserAiUsages(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserAiUsages loads the user's AiUsages into the .R struct
func (o *User) LoadUserAiUsages(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.AiUsages = nil

	related, err := o.AiUsages(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.AiUsages = related
	return nil
}

// LoadUserAiUsages loads the user's AiUsages into the .R struct
func (os UserSlice) LoadUserAiUsages(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	aiUsages, err := os.AiUsages(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.AiUsages = nil
	}

	for _, o := range os {
		for _, rel := range aiUsages {
			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.AiUsages = append(o.R.AiUsages, rel)
		}
	}

	return nil
}

func ThenLoadUserMedia(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserMedia(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserMedia", retrieved)
		}

		err := loader.LoadUserMedia(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserMedia loads the user's Media into the .R struct
func (o *User) LoadUserMedia(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Media = nil

	related, err := o.Media(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.Media = related
	return nil
}

// LoadUserMedia loads the user's Media into the .R struct
func (os UserSlice) LoadUserMedia(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	media, err := os.Media(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Media = nil
	}

	for _, o := range os {
		for _, rel := range media {
			if o.ID != rel.UserID.GetOrZero() {
				continue
			}

			rel.R.User = o

			o.R.Media = append(o.R.Media, rel)
		}
	}

	return nil
}

func ThenLoadUserNotifications(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserNotifications(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserNotifications", retrieved)
		}

		err := loader.LoadUserNotifications(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserNotifications loads the user's Notifications into the .R struct
func (o *User) LoadUserNotifications(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Notifications = nil

	related, err := o.Notifications(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.Notifications = related
	return nil
}

// LoadUserNotifications loads the user's Notifications into the .R struct
func (os UserSlice) LoadUserNotifications(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	notifications, err := os.Notifications(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Notifications = nil
	}

	for _, o := range os {
		for _, rel := range notifications {
			if o.ID != rel.UserID.GetOrZero() {
				continue
			}

			rel.R.User = o

			o.R.Notifications = append(o.R.Notifications, rel)
		}
	}

	return nil
}

func PreloadUserIDStripeCustomer(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*StripeCustomer, StripeCustomerSlice](orm.Relationship{
		Name: "IDStripeCustomer",
		Sides: []orm.RelSide{
			{
				From: TableNames.Users,
				To:   TableNames.StripeCustomers,
				FromColumns: []string{
					ColumnNames.Users.ID,
				},
				ToColumns: []string{
					ColumnNames.StripeCustomers.ID,
				},
			},
		},
	}, StripeCustomers.Columns().Names(), opts...)
}

func ThenLoadUserIDStripeCustomer(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserIDStripeCustomer(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserIDStripeCustomer", retrieved)
		}

		err := loader.LoadUserIDStripeCustomer(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserIDStripeCustomer loads the user's IDStripeCustomer into the .R struct
func (o *User) LoadUserIDStripeCustomer(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.IDStripeCustomer = nil

	related, err := o.IDStripeCustomer(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.IDUser = o

	o.R.IDStripeCustomer = related
	return nil
}

// LoadUserIDStripeCustomer loads the user's IDStripeCustomer into the .R struct
func (os UserSlice) LoadUserIDStripeCustomer(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	stripeCustomers, err := os.IDStripeCustomer(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range stripeCustomers {
			if o.ID != rel.ID {
				continue
			}

			rel.R.IDUser = o

			o.R.IDStripeCustomer = rel
			break
		}
	}

	return nil
}

func ThenLoadUserStripeSubscriptions(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserStripeSubscriptions(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserStripeSubscriptions", retrieved)
		}

		err := loader.LoadUserStripeSubscriptions(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserStripeSubscriptions loads the user's StripeSubscriptions into the .R struct
func (o *User) LoadUserStripeSubscriptions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.StripeSubscriptions = nil

	related, err := o.StripeSubscriptions(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.StripeSubscriptions = related
	return nil
}

// LoadUserStripeSubscriptions loads the user's StripeSubscriptions into the .R struct
func (os UserSlice) LoadUserStripeSubscriptions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	stripeSubscriptions, err := os.StripeSubscriptions(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.StripeSubscriptions = nil
	}

	for _, o := range os {
		for _, rel := range stripeSubscriptions {
			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.StripeSubscriptions = append(o.R.StripeSubscriptions, rel)
		}
	}

	return nil
}

func ThenLoadUserTaskProjects(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserTaskProjects(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserTaskProjects", retrieved)
		}

		err := loader.LoadUserTaskProjects(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserTaskProjects loads the user's TaskProjects into the .R struct
func (o *User) LoadUserTaskProjects(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.TaskProjects = nil

	related, err := o.TaskProjects(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.TaskProjects = related
	return nil
}

// LoadUserTaskProjects loads the user's TaskProjects into the .R struct
func (os UserSlice) LoadUserTaskProjects(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	taskProjects, err := os.TaskProjects(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.TaskProjects = nil
	}

	for _, o := range os {
		for _, rel := range taskProjects {
			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.TaskProjects = append(o.R.TaskProjects, rel)
		}
	}

	return nil
}

func ThenLoadUserTasks(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserTasks(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserTasks", retrieved)
		}

		err := loader.LoadUserTasks(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserTasks loads the user's Tasks into the .R struct
func (o *User) LoadUserTasks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Tasks = nil

	related, err := o.Tasks(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.Tasks = related
	return nil
}

// LoadUserTasks loads the user's Tasks into the .R struct
func (os UserSlice) LoadUserTasks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	tasks, err := os.Tasks(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Tasks = nil
	}

	for _, o := range os {
		for _, rel := range tasks {
			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.Tasks = append(o.R.Tasks, rel)
		}
	}

	return nil
}

func ThenLoadUserTokens(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserTokens(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserTokens", retrieved)
		}

		err := loader.LoadUserTokens(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserTokens loads the user's Tokens into the .R struct
func (o *User) LoadUserTokens(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Tokens = nil

	related, err := o.Tokens(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.Tokens = related
	return nil
}

// LoadUserTokens loads the user's Tokens into the .R struct
func (os UserSlice) LoadUserTokens(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	tokens, err := os.Tokens(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Tokens = nil
	}

	for _, o := range os {
		for _, rel := range tokens {
			if o.ID != rel.UserID.GetOrZero() {
				continue
			}

			rel.R.User = o

			o.R.Tokens = append(o.R.Tokens, rel)
		}
	}

	return nil
}

func ThenLoadUserUserAccounts(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserUserAccounts(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserUserAccounts", retrieved)
		}

		err := loader.LoadUserUserAccounts(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserUserAccounts loads the user's UserAccounts into the .R struct
func (o *User) LoadUserUserAccounts(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UserAccounts = nil

	related, err := o.UserAccounts(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.UserAccounts = related
	return nil
}

// LoadUserUserAccounts loads the user's UserAccounts into the .R struct
func (os UserSlice) LoadUserUserAccounts(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	userAccounts, err := os.UserAccounts(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.UserAccounts = nil
	}

	for _, o := range os {
		for _, rel := range userAccounts {
			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.UserAccounts = append(o.R.UserAccounts, rel)
		}
	}

	return nil
}

func ThenLoadUserPermissions(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserPermissions(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserPermissions", retrieved)
		}

		err := loader.LoadUserPermissions(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserPermissions loads the user's Permissions into the .R struct
func (o *User) LoadUserPermissions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Permissions = nil

	related, err := o.Permissions(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Users = UserSlice{o}
	}

	o.R.Permissions = related
	return nil
}

// LoadUserPermissions loads the user's Permissions into the .R struct
func (os UserSlice) LoadUserPermissions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	// since we are changing the columns, we need to check if the original columns were set or add the defaults
	sq := dialect.SelectQuery{}
	for _, mod := range mods {
		mod.Apply(&sq)
	}

	if len(sq.SelectList.Columns) == 0 {
		mods = append(mods, sm.Columns(Permissions.Columns()))
	}

	q := os.Permissions(append(
		mods,
		sm.Columns(UserPermissionColumns.UserID.As("related_users.ID")),
	)...)

	IDSlice := []uuid.UUID{}

	mapper := scan.Mod(scan.StructMapper[*Permission](), func(ctx context.Context, cols []string) (scan.BeforeFunc, func(any, any) error) {
		return func(row *scan.Row) (any, error) {
				IDSlice = append(IDSlice, *new(uuid.UUID))
				row.ScheduleScan("related_users.ID", &IDSlice[len(IDSlice)-1])

				return nil, nil
			},
			func(any, any) error {
				return nil
			}
	})

	permissions, err := bob.Allx[*Permission, PermissionSlice](ctx, exec, q, mapper)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Permissions = nil
	}

	for _, o := range os {
		for i, rel := range permissions {
			if o.ID != IDSlice[i] {
				continue
			}

			rel.R.Users = append(rel.R.Users, o)

			o.R.Permissions = append(o.R.Permissions, rel)
		}
	}

	return nil
}

func ThenLoadUserRoles(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserRoles(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserRoles", retrieved)
		}

		err := loader.LoadUserRoles(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserRoles loads the user's Roles into the .R struct
func (o *User) LoadUserRoles(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Roles = nil

	related, err := o.Roles(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Users = UserSlice{o}
	}

	o.R.Roles = related
	return nil
}

// LoadUserRoles loads the user's Roles into the .R struct
func (os UserSlice) LoadUserRoles(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	// since we are changing the columns, we need to check if the original columns were set or add the defaults
	sq := dialect.SelectQuery{}
	for _, mod := range mods {
		mod.Apply(&sq)
	}

	if len(sq.SelectList.Columns) == 0 {
		mods = append(mods, sm.Columns(Roles.Columns()))
	}

	q := os.Roles(append(
		mods,
		sm.Columns(UserRoleColumns.UserID.As("related_users.ID")),
	)...)

	IDSlice := []uuid.UUID{}

	mapper := scan.Mod(scan.StructMapper[*Role](), func(ctx context.Context, cols []string) (scan.BeforeFunc, func(any, any) error) {
		return func(row *scan.Row) (any, error) {
				IDSlice = append(IDSlice, *new(uuid.UUID))
				row.ScheduleScan("related_users.ID", &IDSlice[len(IDSlice)-1])

				return nil, nil
			},
			func(any, any) error {
				return nil
			}
	})

	roles, err := bob.Allx[*Role, RoleSlice](ctx, exec, q, mapper)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Roles = nil
	}

	for _, o := range os {
		for i, rel := range roles {
			if o.ID != IDSlice[i] {
				continue
			}

			rel.R.Users = append(rel.R.Users, o)

			o.R.Roles = append(o.R.Roles, rel)
		}
	}

	return nil
}

func ThenLoadUserUserSessions(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserUserSessions(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserUserSessions", retrieved)
		}

		err := loader.LoadUserUserSessions(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserUserSessions loads the user's UserSessions into the .R struct
func (o *User) LoadUserUserSessions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UserSessions = nil

	related, err := o.UserSessions(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.UserSessions = related
	return nil
}

// LoadUserUserSessions loads the user's UserSessions into the .R struct
func (os UserSlice) LoadUserUserSessions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	userSessions, err := os.UserSessions(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.UserSessions = nil
	}

	for _, o := range os {
		for _, rel := range userSessions {
			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.UserSessions = append(o.R.UserSessions, rel)
		}
	}

	return nil
}

func insertUserAiUsages0(ctx context.Context, exec bob.Executor, aiUsages1 []*AiUsageSetter, user0 *User) (AiUsageSlice, error) {
	for i := range aiUsages1 {
		aiUsages1[i].UserID = omit.From(user0.ID)
	}

	ret, err := AiUsages.Insert(bob.ToMods(aiUsages1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserAiUsages0: %w", err)
	}

	return ret, nil
}

func attachUserAiUsages0(ctx context.Context, exec bob.Executor, count int, aiUsages1 AiUsageSlice, user0 *User) (AiUsageSlice, error) {
	setter := &AiUsageSetter{
		UserID: omit.From(user0.ID),
	}

	err := aiUsages1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserAiUsages0: %w", err)
	}

	return aiUsages1, nil
}

func (user0 *User) InsertAiUsages(ctx context.Context, exec bob.Executor, related ...*AiUsageSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	aiUsages1, err := insertUserAiUsages0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.AiUsages = append(user0.R.AiUsages, aiUsages1...)

	for _, rel := range aiUsages1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachAiUsages(ctx context.Context, exec bob.Executor, related ...*AiUsage) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	aiUsages1 := AiUsageSlice(related)

	_, err = attachUserAiUsages0(ctx, exec, len(related), aiUsages1, user0)
	if err != nil {
		return err
	}

	user0.R.AiUsages = append(user0.R.AiUsages, aiUsages1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func insertUserMedia0(ctx context.Context, exec bob.Executor, media1 []*MediumSetter, user0 *User) (MediumSlice, error) {
	for i := range media1 {
		media1[i].UserID = omitnull.From(user0.ID)
	}

	ret, err := Media.Insert(bob.ToMods(media1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserMedia0: %w", err)
	}

	return ret, nil
}

func attachUserMedia0(ctx context.Context, exec bob.Executor, count int, media1 MediumSlice, user0 *User) (MediumSlice, error) {
	setter := &MediumSetter{
		UserID: omitnull.From(user0.ID),
	}

	err := media1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserMedia0: %w", err)
	}

	return media1, nil
}

func (user0 *User) InsertMedia(ctx context.Context, exec bob.Executor, related ...*MediumSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	media1, err := insertUserMedia0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.Media = append(user0.R.Media, media1...)

	for _, rel := range media1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachMedia(ctx context.Context, exec bob.Executor, related ...*Medium) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	media1 := MediumSlice(related)

	_, err = attachUserMedia0(ctx, exec, len(related), media1, user0)
	if err != nil {
		return err
	}

	user0.R.Media = append(user0.R.Media, media1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func insertUserNotifications0(ctx context.Context, exec bob.Executor, notifications1 []*NotificationSetter, user0 *User) (NotificationSlice, error) {
	for i := range notifications1 {
		notifications1[i].UserID = omitnull.From(user0.ID)
	}

	ret, err := Notifications.Insert(bob.ToMods(notifications1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserNotifications0: %w", err)
	}

	return ret, nil
}

func attachUserNotifications0(ctx context.Context, exec bob.Executor, count int, notifications1 NotificationSlice, user0 *User) (NotificationSlice, error) {
	setter := &NotificationSetter{
		UserID: omitnull.From(user0.ID),
	}

	err := notifications1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserNotifications0: %w", err)
	}

	return notifications1, nil
}

func (user0 *User) InsertNotifications(ctx context.Context, exec bob.Executor, related ...*NotificationSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	notifications1, err := insertUserNotifications0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.Notifications = append(user0.R.Notifications, notifications1...)

	for _, rel := range notifications1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachNotifications(ctx context.Context, exec bob.Executor, related ...*Notification) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	notifications1 := NotificationSlice(related)

	_, err = attachUserNotifications0(ctx, exec, len(related), notifications1, user0)
	if err != nil {
		return err
	}

	user0.R.Notifications = append(user0.R.Notifications, notifications1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func insertUserIDStripeCustomer0(ctx context.Context, exec bob.Executor, stripeCustomer1 *StripeCustomerSetter, user0 *User) (*StripeCustomer, error) {
	stripeCustomer1.ID = omit.From(user0.ID)

	ret, err := StripeCustomers.Insert(stripeCustomer1).One(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserIDStripeCustomer0: %w", err)
	}

	return ret, nil
}

func attachUserIDStripeCustomer0(ctx context.Context, exec bob.Executor, count int, stripeCustomer1 *StripeCustomer, user0 *User) (*StripeCustomer, error) {
	setter := &StripeCustomerSetter{
		ID: omit.From(user0.ID),
	}

	err := stripeCustomer1.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserIDStripeCustomer0: %w", err)
	}

	return stripeCustomer1, nil
}

func (user0 *User) InsertIDStripeCustomer(ctx context.Context, exec bob.Executor, related *StripeCustomerSetter) error {
	stripeCustomer1, err := insertUserIDStripeCustomer0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.IDStripeCustomer = stripeCustomer1

	stripeCustomer1.R.IDUser = user0

	return nil
}

func (user0 *User) AttachIDStripeCustomer(ctx context.Context, exec bob.Executor, stripeCustomer1 *StripeCustomer) error {
	var err error

	_, err = attachUserIDStripeCustomer0(ctx, exec, 1, stripeCustomer1, user0)
	if err != nil {
		return err
	}

	user0.R.IDStripeCustomer = stripeCustomer1

	stripeCustomer1.R.IDUser = user0

	return nil
}

func insertUserStripeSubscriptions0(ctx context.Context, exec bob.Executor, stripeSubscriptions1 []*StripeSubscriptionSetter, user0 *User) (StripeSubscriptionSlice, error) {
	for i := range stripeSubscriptions1 {
		stripeSubscriptions1[i].UserID = omit.From(user0.ID)
	}

	ret, err := StripeSubscriptions.Insert(bob.ToMods(stripeSubscriptions1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserStripeSubscriptions0: %w", err)
	}

	return ret, nil
}

func attachUserStripeSubscriptions0(ctx context.Context, exec bob.Executor, count int, stripeSubscriptions1 StripeSubscriptionSlice, user0 *User) (StripeSubscriptionSlice, error) {
	setter := &StripeSubscriptionSetter{
		UserID: omit.From(user0.ID),
	}

	err := stripeSubscriptions1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserStripeSubscriptions0: %w", err)
	}

	return stripeSubscriptions1, nil
}

func (user0 *User) InsertStripeSubscriptions(ctx context.Context, exec bob.Executor, related ...*StripeSubscriptionSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	stripeSubscriptions1, err := insertUserStripeSubscriptions0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.StripeSubscriptions = append(user0.R.StripeSubscriptions, stripeSubscriptions1...)

	for _, rel := range stripeSubscriptions1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachStripeSubscriptions(ctx context.Context, exec bob.Executor, related ...*StripeSubscription) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	stripeSubscriptions1 := StripeSubscriptionSlice(related)

	_, err = attachUserStripeSubscriptions0(ctx, exec, len(related), stripeSubscriptions1, user0)
	if err != nil {
		return err
	}

	user0.R.StripeSubscriptions = append(user0.R.StripeSubscriptions, stripeSubscriptions1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func insertUserTaskProjects0(ctx context.Context, exec bob.Executor, taskProjects1 []*TaskProjectSetter, user0 *User) (TaskProjectSlice, error) {
	for i := range taskProjects1 {
		taskProjects1[i].UserID = omit.From(user0.ID)
	}

	ret, err := TaskProjects.Insert(bob.ToMods(taskProjects1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserTaskProjects0: %w", err)
	}

	return ret, nil
}

func attachUserTaskProjects0(ctx context.Context, exec bob.Executor, count int, taskProjects1 TaskProjectSlice, user0 *User) (TaskProjectSlice, error) {
	setter := &TaskProjectSetter{
		UserID: omit.From(user0.ID),
	}

	err := taskProjects1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserTaskProjects0: %w", err)
	}

	return taskProjects1, nil
}

func (user0 *User) InsertTaskProjects(ctx context.Context, exec bob.Executor, related ...*TaskProjectSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	taskProjects1, err := insertUserTaskProjects0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.TaskProjects = append(user0.R.TaskProjects, taskProjects1...)

	for _, rel := range taskProjects1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachTaskProjects(ctx context.Context, exec bob.Executor, related ...*TaskProject) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	taskProjects1 := TaskProjectSlice(related)

	_, err = attachUserTaskProjects0(ctx, exec, len(related), taskProjects1, user0)
	if err != nil {
		return err
	}

	user0.R.TaskProjects = append(user0.R.TaskProjects, taskProjects1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func insertUserTasks0(ctx context.Context, exec bob.Executor, tasks1 []*TaskSetter, user0 *User) (TaskSlice, error) {
	for i := range tasks1 {
		tasks1[i].UserID = omit.From(user0.ID)
	}

	ret, err := Tasks.Insert(bob.ToMods(tasks1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserTasks0: %w", err)
	}

	return ret, nil
}

func attachUserTasks0(ctx context.Context, exec bob.Executor, count int, tasks1 TaskSlice, user0 *User) (TaskSlice, error) {
	setter := &TaskSetter{
		UserID: omit.From(user0.ID),
	}

	err := tasks1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserTasks0: %w", err)
	}

	return tasks1, nil
}

func (user0 *User) InsertTasks(ctx context.Context, exec bob.Executor, related ...*TaskSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	tasks1, err := insertUserTasks0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.Tasks = append(user0.R.Tasks, tasks1...)

	for _, rel := range tasks1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachTasks(ctx context.Context, exec bob.Executor, related ...*Task) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	tasks1 := TaskSlice(related)

	_, err = attachUserTasks0(ctx, exec, len(related), tasks1, user0)
	if err != nil {
		return err
	}

	user0.R.Tasks = append(user0.R.Tasks, tasks1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func insertUserTokens0(ctx context.Context, exec bob.Executor, tokens1 []*TokenSetter, user0 *User) (TokenSlice, error) {
	for i := range tokens1 {
		tokens1[i].UserID = omitnull.From(user0.ID)
	}

	ret, err := Tokens.Insert(bob.ToMods(tokens1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserTokens0: %w", err)
	}

	return ret, nil
}

func attachUserTokens0(ctx context.Context, exec bob.Executor, count int, tokens1 TokenSlice, user0 *User) (TokenSlice, error) {
	setter := &TokenSetter{
		UserID: omitnull.From(user0.ID),
	}

	err := tokens1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserTokens0: %w", err)
	}

	return tokens1, nil
}

func (user0 *User) InsertTokens(ctx context.Context, exec bob.Executor, related ...*TokenSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	tokens1, err := insertUserTokens0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.Tokens = append(user0.R.Tokens, tokens1...)

	for _, rel := range tokens1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachTokens(ctx context.Context, exec bob.Executor, related ...*Token) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	tokens1 := TokenSlice(related)

	_, err = attachUserTokens0(ctx, exec, len(related), tokens1, user0)
	if err != nil {
		return err
	}

	user0.R.Tokens = append(user0.R.Tokens, tokens1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func insertUserUserAccounts0(ctx context.Context, exec bob.Executor, userAccounts1 []*UserAccountSetter, user0 *User) (UserAccountSlice, error) {
	for i := range userAccounts1 {
		userAccounts1[i].UserID = omit.From(user0.ID)
	}

	ret, err := UserAccounts.Insert(bob.ToMods(userAccounts1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserUserAccounts0: %w", err)
	}

	return ret, nil
}

func attachUserUserAccounts0(ctx context.Context, exec bob.Executor, count int, userAccounts1 UserAccountSlice, user0 *User) (UserAccountSlice, error) {
	setter := &UserAccountSetter{
		UserID: omit.From(user0.ID),
	}

	err := userAccounts1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserUserAccounts0: %w", err)
	}

	return userAccounts1, nil
}

func (user0 *User) InsertUserAccounts(ctx context.Context, exec bob.Executor, related ...*UserAccountSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	userAccounts1, err := insertUserUserAccounts0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.UserAccounts = append(user0.R.UserAccounts, userAccounts1...)

	for _, rel := range userAccounts1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachUserAccounts(ctx context.Context, exec bob.Executor, related ...*UserAccount) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	userAccounts1 := UserAccountSlice(related)

	_, err = attachUserUserAccounts0(ctx, exec, len(related), userAccounts1, user0)
	if err != nil {
		return err
	}

	user0.R.UserAccounts = append(user0.R.UserAccounts, userAccounts1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func attachUserPermissions0(ctx context.Context, exec bob.Executor, count int, user0 *User, permissions2 PermissionSlice) (UserPermissionSlice, error) {
	setters := make([]*UserPermissionSetter, count)
	for i := 0; i < count; i++ {
		setters[i] = &UserPermissionSetter{
			UserID:       omit.From(user0.ID),
			PermissionID: omit.From(permissions2[i].ID),
		}
	}

	userPermissions1, err := UserPermissions.Insert(bob.ToMods(setters...)).All(ctx, exec)
	if err != nil {
		return nil, fmt.Errorf("attachUserPermissions0: %w", err)
	}

	return userPermissions1, nil
}

func (user0 *User) InsertPermissions(ctx context.Context, exec bob.Executor, related ...*PermissionSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	inserted, err := Permissions.Insert(bob.ToMods(related...)).All(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	permissions2 := PermissionSlice(inserted)

	_, err = attachUserPermissions0(ctx, exec, len(related), user0, permissions2)
	if err != nil {
		return err
	}

	user0.R.Permissions = append(user0.R.Permissions, permissions2...)

	for _, rel := range permissions2 {
		rel.R.Users = append(rel.R.Users, user0)
	}
	return nil
}

func (user0 *User) AttachPermissions(ctx context.Context, exec bob.Executor, related ...*Permission) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	permissions2 := PermissionSlice(related)

	_, err = attachUserPermissions0(ctx, exec, len(related), user0, permissions2)
	if err != nil {
		return err
	}

	user0.R.Permissions = append(user0.R.Permissions, permissions2...)

	for _, rel := range related {
		rel.R.Users = append(rel.R.Users, user0)
	}

	return nil
}

func attachUserRoles0(ctx context.Context, exec bob.Executor, count int, user0 *User, roles2 RoleSlice) (UserRoleSlice, error) {
	setters := make([]*UserRoleSetter, count)
	for i := 0; i < count; i++ {
		setters[i] = &UserRoleSetter{
			UserID: omit.From(user0.ID),
			RoleID: omit.From(roles2[i].ID),
		}
	}

	userRoles1, err := UserRoles.Insert(bob.ToMods(setters...)).All(ctx, exec)
	if err != nil {
		return nil, fmt.Errorf("attachUserRoles0: %w", err)
	}

	return userRoles1, nil
}

func (user0 *User) InsertRoles(ctx context.Context, exec bob.Executor, related ...*RoleSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	inserted, err := Roles.Insert(bob.ToMods(related...)).All(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	roles2 := RoleSlice(inserted)

	_, err = attachUserRoles0(ctx, exec, len(related), user0, roles2)
	if err != nil {
		return err
	}

	user0.R.Roles = append(user0.R.Roles, roles2...)

	for _, rel := range roles2 {
		rel.R.Users = append(rel.R.Users, user0)
	}
	return nil
}

func (user0 *User) AttachRoles(ctx context.Context, exec bob.Executor, related ...*Role) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	roles2 := RoleSlice(related)

	_, err = attachUserRoles0(ctx, exec, len(related), user0, roles2)
	if err != nil {
		return err
	}

	user0.R.Roles = append(user0.R.Roles, roles2...)

	for _, rel := range related {
		rel.R.Users = append(rel.R.Users, user0)
	}

	return nil
}

func insertUserUserSessions0(ctx context.Context, exec bob.Executor, userSessions1 []*UserSessionSetter, user0 *User) (UserSessionSlice, error) {
	for i := range userSessions1 {
		userSessions1[i].UserID = omit.From(user0.ID)
	}

	ret, err := UserSessions.Insert(bob.ToMods(userSessions1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserUserSessions0: %w", err)
	}

	return ret, nil
}

func attachUserUserSessions0(ctx context.Context, exec bob.Executor, count int, userSessions1 UserSessionSlice, user0 *User) (UserSessionSlice, error) {
	setter := &UserSessionSetter{
		UserID: omit.From(user0.ID),
	}

	err := userSessions1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserUserSessions0: %w", err)
	}

	return userSessions1, nil
}

func (user0 *User) InsertUserSessions(ctx context.Context, exec bob.Executor, related ...*UserSessionSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	userSessions1, err := insertUserUserSessions0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.UserSessions = append(user0.R.UserSessions, userSessions1...)

	for _, rel := range userSessions1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachUserSessions(ctx context.Context, exec bob.Executor, related ...*UserSession) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	userSessions1 := UserSessionSlice(related)

	_, err = attachUserUserSessions0(ctx, exec, len(related), userSessions1, user0)
	if err != nil {
		return err
	}

	user0.R.UserSessions = append(user0.R.UserSessions, userSessions1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}
