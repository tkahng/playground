// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// StripeWebhookEvent is an object representing the database table.
type StripeWebhookEvent struct {
	ID                uuid.UUID        `db:"id,pk" json:"id"`
	StripeID          string           `db:"stripe_id" json:"stripe_id"`
	Type              string           `db:"type" json:"type"`
	ObjectType        string           `db:"object_type" json:"object_type"`
	ObjectStripeID    string           `db:"object_stripe_id" json:"object_stripe_id"`
	EventCreationDate time.Time        `db:"event_creation_date" json:"event_creation_date"`
	RequestID         null.Val[string] `db:"request_id" json:"request_id"`
	CreatedAt         time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt         time.Time        `db:"updated_at" json:"updated_at"`
}

// StripeWebhookEventSlice is an alias for a slice of pointers to StripeWebhookEvent.
// This should almost always be used instead of []*StripeWebhookEvent.
type StripeWebhookEventSlice []*StripeWebhookEvent

// StripeWebhookEvents contains methods to work with the stripe_webhook_events table
var StripeWebhookEvents = psql.NewTablex[*StripeWebhookEvent, StripeWebhookEventSlice, *StripeWebhookEventSetter]("", "stripe_webhook_events")

// StripeWebhookEventsQuery is a query on the stripe_webhook_events table
type StripeWebhookEventsQuery = *psql.ViewQuery[*StripeWebhookEvent, StripeWebhookEventSlice]

type stripeWebhookEventColumnNames struct {
	ID                string
	StripeID          string
	Type              string
	ObjectType        string
	ObjectStripeID    string
	EventCreationDate string
	RequestID         string
	CreatedAt         string
	UpdatedAt         string
}

var StripeWebhookEventColumns = buildStripeWebhookEventColumns("stripe_webhook_events")

type stripeWebhookEventColumns struct {
	tableAlias        string
	ID                psql.Expression
	StripeID          psql.Expression
	Type              psql.Expression
	ObjectType        psql.Expression
	ObjectStripeID    psql.Expression
	EventCreationDate psql.Expression
	RequestID         psql.Expression
	CreatedAt         psql.Expression
	UpdatedAt         psql.Expression
}

func (c stripeWebhookEventColumns) Alias() string {
	return c.tableAlias
}

func (stripeWebhookEventColumns) AliasedAs(alias string) stripeWebhookEventColumns {
	return buildStripeWebhookEventColumns(alias)
}

func buildStripeWebhookEventColumns(alias string) stripeWebhookEventColumns {
	return stripeWebhookEventColumns{
		tableAlias:        alias,
		ID:                psql.Quote(alias, "id"),
		StripeID:          psql.Quote(alias, "stripe_id"),
		Type:              psql.Quote(alias, "type"),
		ObjectType:        psql.Quote(alias, "object_type"),
		ObjectStripeID:    psql.Quote(alias, "object_stripe_id"),
		EventCreationDate: psql.Quote(alias, "event_creation_date"),
		RequestID:         psql.Quote(alias, "request_id"),
		CreatedAt:         psql.Quote(alias, "created_at"),
		UpdatedAt:         psql.Quote(alias, "updated_at"),
	}
}

type stripeWebhookEventWhere[Q psql.Filterable] struct {
	ID                psql.WhereMod[Q, uuid.UUID]
	StripeID          psql.WhereMod[Q, string]
	Type              psql.WhereMod[Q, string]
	ObjectType        psql.WhereMod[Q, string]
	ObjectStripeID    psql.WhereMod[Q, string]
	EventCreationDate psql.WhereMod[Q, time.Time]
	RequestID         psql.WhereNullMod[Q, string]
	CreatedAt         psql.WhereMod[Q, time.Time]
	UpdatedAt         psql.WhereMod[Q, time.Time]
}

func (stripeWebhookEventWhere[Q]) AliasedAs(alias string) stripeWebhookEventWhere[Q] {
	return buildStripeWebhookEventWhere[Q](buildStripeWebhookEventColumns(alias))
}

func buildStripeWebhookEventWhere[Q psql.Filterable](cols stripeWebhookEventColumns) stripeWebhookEventWhere[Q] {
	return stripeWebhookEventWhere[Q]{
		ID:                psql.Where[Q, uuid.UUID](cols.ID),
		StripeID:          psql.Where[Q, string](cols.StripeID),
		Type:              psql.Where[Q, string](cols.Type),
		ObjectType:        psql.Where[Q, string](cols.ObjectType),
		ObjectStripeID:    psql.Where[Q, string](cols.ObjectStripeID),
		EventCreationDate: psql.Where[Q, time.Time](cols.EventCreationDate),
		RequestID:         psql.WhereNull[Q, string](cols.RequestID),
		CreatedAt:         psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:         psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var StripeWebhookEventErrors = &stripeWebhookEventErrors{
	ErrUniqueStripeWebhookEventsPkey: &UniqueConstraintError{s: "stripe_webhook_events_pkey"},

	ErrUniqueStripeWebhookEventsStripeIdKey: &UniqueConstraintError{s: "stripe_webhook_events_stripe_id_key"},
}

type stripeWebhookEventErrors struct {
	ErrUniqueStripeWebhookEventsPkey *UniqueConstraintError

	ErrUniqueStripeWebhookEventsStripeIdKey *UniqueConstraintError
}

// StripeWebhookEventSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type StripeWebhookEventSetter struct {
	ID                omit.Val[uuid.UUID]  `db:"id,pk" json:"id"`
	StripeID          omit.Val[string]     `db:"stripe_id" json:"stripe_id"`
	Type              omit.Val[string]     `db:"type" json:"type"`
	ObjectType        omit.Val[string]     `db:"object_type" json:"object_type"`
	ObjectStripeID    omit.Val[string]     `db:"object_stripe_id" json:"object_stripe_id"`
	EventCreationDate omit.Val[time.Time]  `db:"event_creation_date" json:"event_creation_date"`
	RequestID         omitnull.Val[string] `db:"request_id" json:"request_id"`
	CreatedAt         omit.Val[time.Time]  `db:"created_at" json:"created_at"`
	UpdatedAt         omit.Val[time.Time]  `db:"updated_at" json:"updated_at"`
}

func (s StripeWebhookEventSetter) SetColumns() []string {
	vals := make([]string, 0, 9)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.StripeID.IsUnset() {
		vals = append(vals, "stripe_id")
	}

	if !s.Type.IsUnset() {
		vals = append(vals, "type")
	}

	if !s.ObjectType.IsUnset() {
		vals = append(vals, "object_type")
	}

	if !s.ObjectStripeID.IsUnset() {
		vals = append(vals, "object_stripe_id")
	}

	if !s.EventCreationDate.IsUnset() {
		vals = append(vals, "event_creation_date")
	}

	if !s.RequestID.IsUnset() {
		vals = append(vals, "request_id")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s StripeWebhookEventSetter) Overwrite(t *StripeWebhookEvent) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.StripeID.IsUnset() {
		t.StripeID, _ = s.StripeID.Get()
	}
	if !s.Type.IsUnset() {
		t.Type, _ = s.Type.Get()
	}
	if !s.ObjectType.IsUnset() {
		t.ObjectType, _ = s.ObjectType.Get()
	}
	if !s.ObjectStripeID.IsUnset() {
		t.ObjectStripeID, _ = s.ObjectStripeID.Get()
	}
	if !s.EventCreationDate.IsUnset() {
		t.EventCreationDate, _ = s.EventCreationDate.Get()
	}
	if !s.RequestID.IsUnset() {
		t.RequestID, _ = s.RequestID.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *StripeWebhookEventSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return StripeWebhookEvents.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 9)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.StripeID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.StripeID)
		}

		if s.Type.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Type)
		}

		if s.ObjectType.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.ObjectType)
		}

		if s.ObjectStripeID.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.ObjectStripeID)
		}

		if s.EventCreationDate.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.EventCreationDate)
		}

		if s.RequestID.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.RequestID)
		}

		if s.CreatedAt.IsUnset() {
			vals[7] = psql.Raw("DEFAULT")
		} else {
			vals[7] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[8] = psql.Raw("DEFAULT")
		} else {
			vals[8] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s StripeWebhookEventSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s StripeWebhookEventSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 9)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.StripeID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "stripe_id")...),
			psql.Arg(s.StripeID),
		}})
	}

	if !s.Type.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "type")...),
			psql.Arg(s.Type),
		}})
	}

	if !s.ObjectType.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "object_type")...),
			psql.Arg(s.ObjectType),
		}})
	}

	if !s.ObjectStripeID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "object_stripe_id")...),
			psql.Arg(s.ObjectStripeID),
		}})
	}

	if !s.EventCreationDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "event_creation_date")...),
			psql.Arg(s.EventCreationDate),
		}})
	}

	if !s.RequestID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "request_id")...),
			psql.Arg(s.RequestID),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindStripeWebhookEvent retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindStripeWebhookEvent(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*StripeWebhookEvent, error) {
	if len(cols) == 0 {
		return StripeWebhookEvents.Query(
			SelectWhere.StripeWebhookEvents.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return StripeWebhookEvents.Query(
		SelectWhere.StripeWebhookEvents.ID.EQ(IDPK),
		sm.Columns(StripeWebhookEvents.Columns().Only(cols...)),
	).One(ctx, exec)
}

// StripeWebhookEventExists checks the presence of a single record by primary key
func StripeWebhookEventExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return StripeWebhookEvents.Query(
		SelectWhere.StripeWebhookEvents.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after StripeWebhookEvent is retrieved from the database
func (o *StripeWebhookEvent) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = StripeWebhookEvents.AfterSelectHooks.RunHooks(ctx, exec, StripeWebhookEventSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = StripeWebhookEvents.AfterInsertHooks.RunHooks(ctx, exec, StripeWebhookEventSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = StripeWebhookEvents.AfterUpdateHooks.RunHooks(ctx, exec, StripeWebhookEventSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = StripeWebhookEvents.AfterDeleteHooks.RunHooks(ctx, exec, StripeWebhookEventSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the StripeWebhookEvent
func (o *StripeWebhookEvent) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *StripeWebhookEvent) pkEQ() dialect.Expression {
	return psql.Quote("stripe_webhook_events", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the StripeWebhookEvent
func (o *StripeWebhookEvent) Update(ctx context.Context, exec bob.Executor, s *StripeWebhookEventSetter) error {
	v, err := StripeWebhookEvents.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single StripeWebhookEvent record with an executor
func (o *StripeWebhookEvent) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := StripeWebhookEvents.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the StripeWebhookEvent using the executor
func (o *StripeWebhookEvent) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := StripeWebhookEvents.Query(
		SelectWhere.StripeWebhookEvents.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after StripeWebhookEventSlice is retrieved from the database
func (o StripeWebhookEventSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = StripeWebhookEvents.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = StripeWebhookEvents.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = StripeWebhookEvents.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = StripeWebhookEvents.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o StripeWebhookEventSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("stripe_webhook_events", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o StripeWebhookEventSlice) copyMatchingRows(from ...*StripeWebhookEvent) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o StripeWebhookEventSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return StripeWebhookEvents.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *StripeWebhookEvent:
				o.copyMatchingRows(retrieved)
			case []*StripeWebhookEvent:
				o.copyMatchingRows(retrieved...)
			case StripeWebhookEventSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a StripeWebhookEvent or a slice of StripeWebhookEvent
				// then run the AfterUpdateHooks on the slice
				_, err = StripeWebhookEvents.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o StripeWebhookEventSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return StripeWebhookEvents.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *StripeWebhookEvent:
				o.copyMatchingRows(retrieved)
			case []*StripeWebhookEvent:
				o.copyMatchingRows(retrieved...)
			case StripeWebhookEventSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a StripeWebhookEvent or a slice of StripeWebhookEvent
				// then run the AfterDeleteHooks on the slice
				_, err = StripeWebhookEvents.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o StripeWebhookEventSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals StripeWebhookEventSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := StripeWebhookEvents.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o StripeWebhookEventSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := StripeWebhookEvents.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o StripeWebhookEventSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := StripeWebhookEvents.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
