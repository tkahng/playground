// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type MediumMod interface {
	Apply(*MediumTemplate)
}

type MediumModFunc func(*MediumTemplate)

func (f MediumModFunc) Apply(n *MediumTemplate) {
	f(n)
}

type MediumModSlice []MediumMod

func (mods MediumModSlice) Apply(n *MediumTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// MediumTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type MediumTemplate struct {
	ID               func() uuid.UUID
	UserID           func() null.Val[uuid.UUID]
	Disk             func() string
	Directory        func() string
	Filename         func() string
	OriginalFilename func() string
	Extension        func() string
	MimeType         func() string
	Size             func() int64
	CreatedAt        func() time.Time
	UpdatedAt        func() time.Time

	r mediumR
	f *Factory
}

type mediumR struct {
	User *mediumRUserR
}

type mediumRUserR struct {
	o *UserTemplate
}

// Apply mods to the MediumTemplate
func (o *MediumTemplate) Apply(mods ...MediumMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Medium
// this does nothing with the relationship templates
func (o MediumTemplate) toModel() *models.Medium {
	m := &models.Medium{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.Disk != nil {
		m.Disk = o.Disk()
	}
	if o.Directory != nil {
		m.Directory = o.Directory()
	}
	if o.Filename != nil {
		m.Filename = o.Filename()
	}
	if o.OriginalFilename != nil {
		m.OriginalFilename = o.OriginalFilename()
	}
	if o.Extension != nil {
		m.Extension = o.Extension()
	}
	if o.MimeType != nil {
		m.MimeType = o.MimeType()
	}
	if o.Size != nil {
		m.Size = o.Size()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.MediumSlice
// this does nothing with the relationship templates
func (o MediumTemplate) toModels(number int) models.MediumSlice {
	m := make(models.MediumSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Medium
// according to the relationships in the template. Nothing is inserted into the db
func (t MediumTemplate) setModelRels(o *models.Medium) {
	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		rel.R.Media = append(rel.R.Media, o)
		o.UserID = null.From(rel.ID)
		o.R.User = rel
	}
}

// BuildSetter returns an *models.MediumSetter
// this does nothing with the relationship templates
func (o MediumTemplate) BuildSetter() *models.MediumSetter {
	m := &models.MediumSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.UserID != nil {
		m.UserID = omitnull.FromNull(o.UserID())
	}
	if o.Disk != nil {
		m.Disk = omit.From(o.Disk())
	}
	if o.Directory != nil {
		m.Directory = omit.From(o.Directory())
	}
	if o.Filename != nil {
		m.Filename = omit.From(o.Filename())
	}
	if o.OriginalFilename != nil {
		m.OriginalFilename = omit.From(o.OriginalFilename())
	}
	if o.Extension != nil {
		m.Extension = omit.From(o.Extension())
	}
	if o.MimeType != nil {
		m.MimeType = omit.From(o.MimeType())
	}
	if o.Size != nil {
		m.Size = omit.From(o.Size())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.MediumSetter
// this does nothing with the relationship templates
func (o MediumTemplate) BuildManySetter(number int) []*models.MediumSetter {
	m := make([]*models.MediumSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Medium
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use MediumTemplate.Create
func (o MediumTemplate) Build() *models.Medium {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.MediumSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use MediumTemplate.CreateMany
func (o MediumTemplate) BuildMany(number int) models.MediumSlice {
	m := make(models.MediumSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableMedium(m *models.MediumSetter) {
	if m.Disk.IsUnset() {
		m.Disk = omit.From(random_string(nil))
	}
	if m.Directory.IsUnset() {
		m.Directory = omit.From(random_string(nil))
	}
	if m.Filename.IsUnset() {
		m.Filename = omit.From(random_string(nil))
	}
	if m.OriginalFilename.IsUnset() {
		m.OriginalFilename = omit.From(random_string(nil))
	}
	if m.Extension.IsUnset() {
		m.Extension = omit.From(random_string(nil))
	}
	if m.MimeType.IsUnset() {
		m.MimeType = omit.From(random_string(nil))
	}
	if m.Size.IsUnset() {
		m.Size = omit.From(random_int64(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Medium
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *MediumTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Medium) (context.Context, error) {
	var err error

	if o.r.User != nil {
		var rel0 *models.User
		ctx, rel0, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachUser(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}
	}

	return ctx, err
}

// Create builds a medium and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *MediumTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Medium, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a medium and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *MediumTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Medium {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a medium and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *MediumTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Medium {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a medium and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *MediumTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Medium, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableMedium(opt)

	m, err := models.Media.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = mediumCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple media and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o MediumTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.MediumSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple media and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o MediumTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.MediumSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple media and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o MediumTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.MediumSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple media and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o MediumTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.MediumSlice, error) {
	var err error
	m := make(models.MediumSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Medium has methods that act as mods for the MediumTemplate
var MediumMods mediumMods

type mediumMods struct{}

func (m mediumMods) RandomizeAllColumns(f *faker.Faker) MediumMod {
	return MediumModSlice{
		MediumMods.RandomID(f),
		MediumMods.RandomUserID(f),
		MediumMods.RandomDisk(f),
		MediumMods.RandomDirectory(f),
		MediumMods.RandomFilename(f),
		MediumMods.RandomOriginalFilename(f),
		MediumMods.RandomExtension(f),
		MediumMods.RandomMimeType(f),
		MediumMods.RandomSize(f),
		MediumMods.RandomCreatedAt(f),
		MediumMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m mediumMods) ID(val uuid.UUID) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m mediumMods) IDFunc(f func() uuid.UUID) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m mediumMods) UnsetID() MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediumMods) RandomID(f *faker.Faker) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m mediumMods) UserID(val null.Val[uuid.UUID]) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.UserID = func() null.Val[uuid.UUID] { return val }
	})
}

// Set the Column from the function
func (m mediumMods) UserIDFunc(f func() null.Val[uuid.UUID]) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m mediumMods) UnsetUserID() MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediumMods) RandomUserID(f *faker.Faker) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.UserID = func() null.Val[uuid.UUID] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[uuid.UUID](nil)
			}

			return null.From(random_uuid_UUID(f))
		}
	})
}

// Set the model columns to this value
func (m mediumMods) Disk(val string) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Disk = func() string { return val }
	})
}

// Set the Column from the function
func (m mediumMods) DiskFunc(f func() string) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Disk = f
	})
}

// Clear any values for the column
func (m mediumMods) UnsetDisk() MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Disk = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediumMods) RandomDisk(f *faker.Faker) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Disk = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m mediumMods) Directory(val string) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Directory = func() string { return val }
	})
}

// Set the Column from the function
func (m mediumMods) DirectoryFunc(f func() string) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Directory = f
	})
}

// Clear any values for the column
func (m mediumMods) UnsetDirectory() MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Directory = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediumMods) RandomDirectory(f *faker.Faker) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Directory = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m mediumMods) Filename(val string) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Filename = func() string { return val }
	})
}

// Set the Column from the function
func (m mediumMods) FilenameFunc(f func() string) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Filename = f
	})
}

// Clear any values for the column
func (m mediumMods) UnsetFilename() MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Filename = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediumMods) RandomFilename(f *faker.Faker) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Filename = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m mediumMods) OriginalFilename(val string) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.OriginalFilename = func() string { return val }
	})
}

// Set the Column from the function
func (m mediumMods) OriginalFilenameFunc(f func() string) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.OriginalFilename = f
	})
}

// Clear any values for the column
func (m mediumMods) UnsetOriginalFilename() MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.OriginalFilename = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediumMods) RandomOriginalFilename(f *faker.Faker) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.OriginalFilename = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m mediumMods) Extension(val string) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Extension = func() string { return val }
	})
}

// Set the Column from the function
func (m mediumMods) ExtensionFunc(f func() string) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Extension = f
	})
}

// Clear any values for the column
func (m mediumMods) UnsetExtension() MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Extension = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediumMods) RandomExtension(f *faker.Faker) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Extension = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m mediumMods) MimeType(val string) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.MimeType = func() string { return val }
	})
}

// Set the Column from the function
func (m mediumMods) MimeTypeFunc(f func() string) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.MimeType = f
	})
}

// Clear any values for the column
func (m mediumMods) UnsetMimeType() MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.MimeType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediumMods) RandomMimeType(f *faker.Faker) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.MimeType = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m mediumMods) Size(val int64) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Size = func() int64 { return val }
	})
}

// Set the Column from the function
func (m mediumMods) SizeFunc(f func() int64) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Size = f
	})
}

// Clear any values for the column
func (m mediumMods) UnsetSize() MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Size = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediumMods) RandomSize(f *faker.Faker) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.Size = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m mediumMods) CreatedAt(val time.Time) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m mediumMods) CreatedAtFunc(f func() time.Time) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m mediumMods) UnsetCreatedAt() MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediumMods) RandomCreatedAt(f *faker.Faker) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m mediumMods) UpdatedAt(val time.Time) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m mediumMods) UpdatedAtFunc(f func() time.Time) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m mediumMods) UnsetUpdatedAt() MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m mediumMods) RandomUpdatedAt(f *faker.Faker) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m mediumMods) WithUser(rel *UserTemplate) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.r.User = &mediumRUserR{
			o: rel,
		}
	})
}

func (m mediumMods) WithNewUser(mods ...UserMod) MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m mediumMods) WithoutUser() MediumMod {
	return MediumModFunc(func(o *MediumTemplate) {
		o.r.User = nil
	})
}
