// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type TokenMod interface {
	Apply(*TokenTemplate)
}

type TokenModFunc func(*TokenTemplate)

func (f TokenModFunc) Apply(n *TokenTemplate) {
	f(n)
}

type TokenModSlice []TokenMod

func (mods TokenModSlice) Apply(n *TokenTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// TokenTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TokenTemplate struct {
	ID         func() uuid.UUID
	Type       func() TokenTypes
	UserID     func() null.Val[uuid.UUID]
	Otp        func() null.Val[string]
	Identifier func() string
	Expires    func() time.Time
	Token      func() string
	CreatedAt  func() time.Time
	UpdatedAt  func() time.Time

	r tokenR
	f *Factory
}

type tokenR struct {
	User *tokenRUserR
}

type tokenRUserR struct {
	o *UserTemplate
}

// Apply mods to the TokenTemplate
func (o *TokenTemplate) Apply(mods ...TokenMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Token
// this does nothing with the relationship templates
func (o TokenTemplate) toModel() *models.Token {
	m := &models.Token{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Type != nil {
		m.Type = o.Type()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.Otp != nil {
		m.Otp = o.Otp()
	}
	if o.Identifier != nil {
		m.Identifier = o.Identifier()
	}
	if o.Expires != nil {
		m.Expires = o.Expires()
	}
	if o.Token != nil {
		m.Token = o.Token()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.TokenSlice
// this does nothing with the relationship templates
func (o TokenTemplate) toModels(number int) models.TokenSlice {
	m := make(models.TokenSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Token
// according to the relationships in the template. Nothing is inserted into the db
func (t TokenTemplate) setModelRels(o *models.Token) {
	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		rel.R.Tokens = append(rel.R.Tokens, o)
		o.UserID = null.From(rel.ID)
		o.R.User = rel
	}
}

// BuildSetter returns an *models.TokenSetter
// this does nothing with the relationship templates
func (o TokenTemplate) BuildSetter() *models.TokenSetter {
	m := &models.TokenSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Type != nil {
		m.Type = omit.From(o.Type())
	}
	if o.UserID != nil {
		m.UserID = omitnull.FromNull(o.UserID())
	}
	if o.Otp != nil {
		m.Otp = omitnull.FromNull(o.Otp())
	}
	if o.Identifier != nil {
		m.Identifier = omit.From(o.Identifier())
	}
	if o.Expires != nil {
		m.Expires = omit.From(o.Expires())
	}
	if o.Token != nil {
		m.Token = omit.From(o.Token())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.TokenSetter
// this does nothing with the relationship templates
func (o TokenTemplate) BuildManySetter(number int) []*models.TokenSetter {
	m := make([]*models.TokenSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Token
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TokenTemplate.Create
func (o TokenTemplate) Build() *models.Token {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TokenSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TokenTemplate.CreateMany
func (o TokenTemplate) BuildMany(number int) models.TokenSlice {
	m := make(models.TokenSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableToken(m *models.TokenSetter) {
	if m.Type.IsUnset() {
		m.Type = omit.From(random_TokenTypes(nil))
	}
	if m.Identifier.IsUnset() {
		m.Identifier = omit.From(random_string(nil))
	}
	if m.Expires.IsUnset() {
		m.Expires = omit.From(random_time_Time(nil))
	}
	if m.Token.IsUnset() {
		m.Token = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Token
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TokenTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Token) (context.Context, error) {
	var err error

	if o.r.User != nil {
		var rel0 *models.User
		ctx, rel0, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachUser(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}
	}

	return ctx, err
}

// Create builds a token and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TokenTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Token, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a token and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *TokenTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Token {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a token and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *TokenTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Token {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a token and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *TokenTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Token, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableToken(opt)

	m, err := models.Tokens.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = tokenCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple tokens and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TokenTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TokenSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple tokens and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o TokenTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.TokenSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple tokens and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o TokenTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.TokenSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple tokens and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o TokenTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.TokenSlice, error) {
	var err error
	m := make(models.TokenSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Token has methods that act as mods for the TokenTemplate
var TokenMods tokenMods

type tokenMods struct{}

func (m tokenMods) RandomizeAllColumns(f *faker.Faker) TokenMod {
	return TokenModSlice{
		TokenMods.RandomID(f),
		TokenMods.RandomType(f),
		TokenMods.RandomUserID(f),
		TokenMods.RandomOtp(f),
		TokenMods.RandomIdentifier(f),
		TokenMods.RandomExpires(f),
		TokenMods.RandomToken(f),
		TokenMods.RandomCreatedAt(f),
		TokenMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m tokenMods) ID(val uuid.UUID) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m tokenMods) IDFunc(f func() uuid.UUID) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetID() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomID(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m tokenMods) Type(val TokenTypes) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Type = func() TokenTypes { return val }
	})
}

// Set the Column from the function
func (m tokenMods) TypeFunc(f func() TokenTypes) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Type = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetType() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Type = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomType(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Type = func() TokenTypes {
			return random_TokenTypes(f)
		}
	})
}

// Set the model columns to this value
func (m tokenMods) UserID(val null.Val[uuid.UUID]) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.UserID = func() null.Val[uuid.UUID] { return val }
	})
}

// Set the Column from the function
func (m tokenMods) UserIDFunc(f func() null.Val[uuid.UUID]) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetUserID() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomUserID(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.UserID = func() null.Val[uuid.UUID] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[uuid.UUID](nil)
			}

			return null.From(random_uuid_UUID(f))
		}
	})
}

// Set the model columns to this value
func (m tokenMods) Otp(val null.Val[string]) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Otp = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m tokenMods) OtpFunc(f func() null.Val[string]) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Otp = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetOtp() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Otp = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomOtp(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Otp = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m tokenMods) Identifier(val string) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Identifier = func() string { return val }
	})
}

// Set the Column from the function
func (m tokenMods) IdentifierFunc(f func() string) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Identifier = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetIdentifier() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Identifier = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomIdentifier(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Identifier = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m tokenMods) Expires(val time.Time) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Expires = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m tokenMods) ExpiresFunc(f func() time.Time) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Expires = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetExpires() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Expires = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomExpires(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Expires = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m tokenMods) Token(val string) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Token = func() string { return val }
	})
}

// Set the Column from the function
func (m tokenMods) TokenFunc(f func() string) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Token = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetToken() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Token = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomToken(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Token = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m tokenMods) CreatedAt(val time.Time) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m tokenMods) CreatedAtFunc(f func() time.Time) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetCreatedAt() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomCreatedAt(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m tokenMods) UpdatedAt(val time.Time) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m tokenMods) UpdatedAtFunc(f func() time.Time) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetUpdatedAt() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomUpdatedAt(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m tokenMods) WithUser(rel *UserTemplate) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.r.User = &tokenRUserR{
			o: rel,
		}
	})
}

func (m tokenMods) WithNewUser(mods ...UserMod) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m tokenMods) WithoutUser() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.r.User = nil
	})
}
