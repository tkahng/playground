// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type NotificationMod interface {
	Apply(*NotificationTemplate)
}

type NotificationModFunc func(*NotificationTemplate)

func (f NotificationModFunc) Apply(n *NotificationTemplate) {
	f(n)
}

type NotificationModSlice []NotificationMod

func (mods NotificationModSlice) Apply(n *NotificationTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// NotificationTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type NotificationTemplate struct {
	ID        func() uuid.UUID
	CreatedAt func() time.Time
	UpdatedAt func() time.Time
	UserID    func() null.Val[uuid.UUID]
	Type      func() null.Val[string]

	r notificationR
	f *Factory
}

type notificationR struct {
	User *notificationRUserR
}

type notificationRUserR struct {
	o *UserTemplate
}

// Apply mods to the NotificationTemplate
func (o *NotificationTemplate) Apply(mods ...NotificationMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Notification
// this does nothing with the relationship templates
func (o NotificationTemplate) toModel() *models.Notification {
	m := &models.Notification{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.Type != nil {
		m.Type = o.Type()
	}

	return m
}

// toModels returns an models.NotificationSlice
// this does nothing with the relationship templates
func (o NotificationTemplate) toModels(number int) models.NotificationSlice {
	m := make(models.NotificationSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Notification
// according to the relationships in the template. Nothing is inserted into the db
func (t NotificationTemplate) setModelRels(o *models.Notification) {
	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		rel.R.Notifications = append(rel.R.Notifications, o)
		o.UserID = null.From(rel.ID)
		o.R.User = rel
	}
}

// BuildSetter returns an *models.NotificationSetter
// this does nothing with the relationship templates
func (o NotificationTemplate) BuildSetter() *models.NotificationSetter {
	m := &models.NotificationSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}
	if o.UserID != nil {
		m.UserID = omitnull.FromNull(o.UserID())
	}
	if o.Type != nil {
		m.Type = omitnull.FromNull(o.Type())
	}

	return m
}

// BuildManySetter returns an []*models.NotificationSetter
// this does nothing with the relationship templates
func (o NotificationTemplate) BuildManySetter(number int) []*models.NotificationSetter {
	m := make([]*models.NotificationSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Notification
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use NotificationTemplate.Create
func (o NotificationTemplate) Build() *models.Notification {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.NotificationSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use NotificationTemplate.CreateMany
func (o NotificationTemplate) BuildMany(number int) models.NotificationSlice {
	m := make(models.NotificationSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableNotification(m *models.NotificationSetter) {
}

// insertOptRels creates and inserts any optional the relationships on *models.Notification
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *NotificationTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Notification) (context.Context, error) {
	var err error

	if o.r.User != nil {
		var rel0 *models.User
		ctx, rel0, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachUser(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}
	}

	return ctx, err
}

// Create builds a notification and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *NotificationTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Notification, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a notification and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *NotificationTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Notification {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a notification and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *NotificationTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Notification {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a notification and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *NotificationTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Notification, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableNotification(opt)

	m, err := models.Notifications.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = notificationCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple notifications and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o NotificationTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.NotificationSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple notifications and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o NotificationTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.NotificationSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple notifications and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o NotificationTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.NotificationSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple notifications and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o NotificationTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.NotificationSlice, error) {
	var err error
	m := make(models.NotificationSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Notification has methods that act as mods for the NotificationTemplate
var NotificationMods notificationMods

type notificationMods struct{}

func (m notificationMods) RandomizeAllColumns(f *faker.Faker) NotificationMod {
	return NotificationModSlice{
		NotificationMods.RandomID(f),
		NotificationMods.RandomCreatedAt(f),
		NotificationMods.RandomUpdatedAt(f),
		NotificationMods.RandomUserID(f),
		NotificationMods.RandomType(f),
	}
}

// Set the model columns to this value
func (m notificationMods) ID(val uuid.UUID) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m notificationMods) IDFunc(f func() uuid.UUID) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m notificationMods) UnsetID() NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m notificationMods) RandomID(f *faker.Faker) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m notificationMods) CreatedAt(val time.Time) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m notificationMods) CreatedAtFunc(f func() time.Time) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m notificationMods) UnsetCreatedAt() NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m notificationMods) RandomCreatedAt(f *faker.Faker) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m notificationMods) UpdatedAt(val time.Time) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m notificationMods) UpdatedAtFunc(f func() time.Time) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m notificationMods) UnsetUpdatedAt() NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m notificationMods) RandomUpdatedAt(f *faker.Faker) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m notificationMods) UserID(val null.Val[uuid.UUID]) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.UserID = func() null.Val[uuid.UUID] { return val }
	})
}

// Set the Column from the function
func (m notificationMods) UserIDFunc(f func() null.Val[uuid.UUID]) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m notificationMods) UnsetUserID() NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m notificationMods) RandomUserID(f *faker.Faker) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.UserID = func() null.Val[uuid.UUID] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[uuid.UUID](nil)
			}

			return null.From(random_uuid_UUID(f))
		}
	})
}

// Set the model columns to this value
func (m notificationMods) Type(val null.Val[string]) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.Type = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m notificationMods) TypeFunc(f func() null.Val[string]) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.Type = f
	})
}

// Clear any values for the column
func (m notificationMods) UnsetType() NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.Type = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m notificationMods) RandomType(f *faker.Faker) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.Type = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

func (m notificationMods) WithUser(rel *UserTemplate) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.r.User = &notificationRUserR{
			o: rel,
		}
	})
}

func (m notificationMods) WithNewUser(mods ...UserMod) NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m notificationMods) WithoutUser() NotificationMod {
	return NotificationModFunc(func(o *NotificationTemplate) {
		o.r.User = nil
	})
}
