// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type UserAccountMod interface {
	Apply(*UserAccountTemplate)
}

type UserAccountModFunc func(*UserAccountTemplate)

func (f UserAccountModFunc) Apply(n *UserAccountTemplate) {
	f(n)
}

type UserAccountModSlice []UserAccountMod

func (mods UserAccountModSlice) Apply(n *UserAccountTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// UserAccountTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserAccountTemplate struct {
	ID                func() uuid.UUID
	UserID            func() uuid.UUID
	Type              func() ProviderTypes
	Provider          func() Providers
	ProviderAccountID func() string
	Password          func() null.Val[string]
	RefreshToken      func() null.Val[string]
	AccessToken       func() null.Val[string]
	ExpiresAt         func() null.Val[int64]
	IDToken           func() null.Val[string]
	Scope             func() null.Val[string]
	SessionState      func() null.Val[string]
	TokenType         func() null.Val[string]
	CreatedAt         func() time.Time
	UpdatedAt         func() time.Time

	r userAccountR
	f *Factory
}

type userAccountR struct {
	User *userAccountRUserR
}

type userAccountRUserR struct {
	o *UserTemplate
}

// Apply mods to the UserAccountTemplate
func (o *UserAccountTemplate) Apply(mods ...UserAccountMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.UserAccount
// this does nothing with the relationship templates
func (o UserAccountTemplate) toModel() *models.UserAccount {
	m := &models.UserAccount{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.Type != nil {
		m.Type = o.Type()
	}
	if o.Provider != nil {
		m.Provider = o.Provider()
	}
	if o.ProviderAccountID != nil {
		m.ProviderAccountID = o.ProviderAccountID()
	}
	if o.Password != nil {
		m.Password = o.Password()
	}
	if o.RefreshToken != nil {
		m.RefreshToken = o.RefreshToken()
	}
	if o.AccessToken != nil {
		m.AccessToken = o.AccessToken()
	}
	if o.ExpiresAt != nil {
		m.ExpiresAt = o.ExpiresAt()
	}
	if o.IDToken != nil {
		m.IDToken = o.IDToken()
	}
	if o.Scope != nil {
		m.Scope = o.Scope()
	}
	if o.SessionState != nil {
		m.SessionState = o.SessionState()
	}
	if o.TokenType != nil {
		m.TokenType = o.TokenType()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.UserAccountSlice
// this does nothing with the relationship templates
func (o UserAccountTemplate) toModels(number int) models.UserAccountSlice {
	m := make(models.UserAccountSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.UserAccount
// according to the relationships in the template. Nothing is inserted into the db
func (t UserAccountTemplate) setModelRels(o *models.UserAccount) {
	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		rel.R.UserAccounts = append(rel.R.UserAccounts, o)
		o.UserID = rel.ID
		o.R.User = rel
	}
}

// BuildSetter returns an *models.UserAccountSetter
// this does nothing with the relationship templates
func (o UserAccountTemplate) BuildSetter() *models.UserAccountSetter {
	m := &models.UserAccountSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.Type != nil {
		m.Type = omit.From(o.Type())
	}
	if o.Provider != nil {
		m.Provider = omit.From(o.Provider())
	}
	if o.ProviderAccountID != nil {
		m.ProviderAccountID = omit.From(o.ProviderAccountID())
	}
	if o.Password != nil {
		m.Password = omitnull.FromNull(o.Password())
	}
	if o.RefreshToken != nil {
		m.RefreshToken = omitnull.FromNull(o.RefreshToken())
	}
	if o.AccessToken != nil {
		m.AccessToken = omitnull.FromNull(o.AccessToken())
	}
	if o.ExpiresAt != nil {
		m.ExpiresAt = omitnull.FromNull(o.ExpiresAt())
	}
	if o.IDToken != nil {
		m.IDToken = omitnull.FromNull(o.IDToken())
	}
	if o.Scope != nil {
		m.Scope = omitnull.FromNull(o.Scope())
	}
	if o.SessionState != nil {
		m.SessionState = omitnull.FromNull(o.SessionState())
	}
	if o.TokenType != nil {
		m.TokenType = omitnull.FromNull(o.TokenType())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.UserAccountSetter
// this does nothing with the relationship templates
func (o UserAccountTemplate) BuildManySetter(number int) []*models.UserAccountSetter {
	m := make([]*models.UserAccountSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.UserAccount
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserAccountTemplate.Create
func (o UserAccountTemplate) Build() *models.UserAccount {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserAccountSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserAccountTemplate.CreateMany
func (o UserAccountTemplate) BuildMany(number int) models.UserAccountSlice {
	m := make(models.UserAccountSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUserAccount(m *models.UserAccountSetter) {
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random_uuid_UUID(nil))
	}
	if m.Type.IsUnset() {
		m.Type = omit.From(random_ProviderTypes(nil))
	}
	if m.Provider.IsUnset() {
		m.Provider = omit.From(random_Providers(nil))
	}
	if m.ProviderAccountID.IsUnset() {
		m.ProviderAccountID = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.UserAccount
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserAccountTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.UserAccount) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a userAccount and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserAccountTemplate) Create(ctx context.Context, exec bob.Executor) (*models.UserAccount, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a userAccount and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserAccountTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.UserAccount {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a userAccount and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserAccountTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.UserAccount {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a userAccount and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserAccountTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.UserAccount, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUserAccount(opt)

	var rel0 *models.User
	if o.r.User == nil {
		var ok bool
		rel0, ok = userCtx.Value(ctx)
		if !ok {
			UserAccountMods.WithNewUser().Apply(o)
		}
	}
	if o.r.User != nil {
		ctx, rel0, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.UserID = omit.From(rel0.ID)

	m, err := models.UserAccounts.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userAccountCtx.WithValue(ctx, m)

	m.R.User = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple userAccounts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserAccountTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserAccountSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple userAccounts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserAccountTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserAccountSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple userAccounts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserAccountTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserAccountSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple userAccounts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserAccountTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserAccountSlice, error) {
	var err error
	m := make(models.UserAccountSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// UserAccount has methods that act as mods for the UserAccountTemplate
var UserAccountMods userAccountMods

type userAccountMods struct{}

func (m userAccountMods) RandomizeAllColumns(f *faker.Faker) UserAccountMod {
	return UserAccountModSlice{
		UserAccountMods.RandomID(f),
		UserAccountMods.RandomUserID(f),
		UserAccountMods.RandomType(f),
		UserAccountMods.RandomProvider(f),
		UserAccountMods.RandomProviderAccountID(f),
		UserAccountMods.RandomPassword(f),
		UserAccountMods.RandomRefreshToken(f),
		UserAccountMods.RandomAccessToken(f),
		UserAccountMods.RandomExpiresAt(f),
		UserAccountMods.RandomIDToken(f),
		UserAccountMods.RandomScope(f),
		UserAccountMods.RandomSessionState(f),
		UserAccountMods.RandomTokenType(f),
		UserAccountMods.RandomCreatedAt(f),
		UserAccountMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m userAccountMods) ID(val uuid.UUID) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) IDFunc(f func() uuid.UUID) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetID() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomID(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) UserID(val uuid.UUID) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.UserID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) UserIDFunc(f func() uuid.UUID) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetUserID() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomUserID(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.UserID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) Type(val ProviderTypes) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Type = func() ProviderTypes { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) TypeFunc(f func() ProviderTypes) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Type = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetType() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Type = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomType(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Type = func() ProviderTypes {
			return random_ProviderTypes(f)
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) Provider(val Providers) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Provider = func() Providers { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) ProviderFunc(f func() Providers) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Provider = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetProvider() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Provider = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomProvider(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Provider = func() Providers {
			return random_Providers(f)
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) ProviderAccountID(val string) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.ProviderAccountID = func() string { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) ProviderAccountIDFunc(f func() string) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.ProviderAccountID = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetProviderAccountID() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.ProviderAccountID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomProviderAccountID(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.ProviderAccountID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) Password(val null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Password = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) PasswordFunc(f func() null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Password = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetPassword() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Password = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomPassword(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Password = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) RefreshToken(val null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.RefreshToken = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) RefreshTokenFunc(f func() null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.RefreshToken = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetRefreshToken() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.RefreshToken = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomRefreshToken(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.RefreshToken = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) AccessToken(val null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.AccessToken = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) AccessTokenFunc(f func() null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.AccessToken = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetAccessToken() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.AccessToken = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomAccessToken(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.AccessToken = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) ExpiresAt(val null.Val[int64]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.ExpiresAt = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) ExpiresAtFunc(f func() null.Val[int64]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.ExpiresAt = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetExpiresAt() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.ExpiresAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomExpiresAt(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.ExpiresAt = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[int64](nil)
			}

			return null.From(random_int64(f))
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) IDToken(val null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.IDToken = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) IDTokenFunc(f func() null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.IDToken = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetIDToken() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.IDToken = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomIDToken(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.IDToken = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) Scope(val null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Scope = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) ScopeFunc(f func() null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Scope = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetScope() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Scope = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomScope(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.Scope = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) SessionState(val null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.SessionState = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) SessionStateFunc(f func() null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.SessionState = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetSessionState() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.SessionState = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomSessionState(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.SessionState = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) TokenType(val null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.TokenType = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) TokenTypeFunc(f func() null.Val[string]) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.TokenType = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetTokenType() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.TokenType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomTokenType(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.TokenType = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) CreatedAt(val time.Time) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) CreatedAtFunc(f func() time.Time) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetCreatedAt() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomCreatedAt(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userAccountMods) UpdatedAt(val time.Time) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userAccountMods) UpdatedAtFunc(f func() time.Time) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m userAccountMods) UnsetUpdatedAt() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userAccountMods) RandomUpdatedAt(f *faker.Faker) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m userAccountMods) WithUser(rel *UserTemplate) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.r.User = &userAccountRUserR{
			o: rel,
		}
	})
}

func (m userAccountMods) WithNewUser(mods ...UserMod) UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m userAccountMods) WithoutUser() UserAccountMod {
	return UserAccountModFunc(func(o *UserAccountTemplate) {
		o.r.User = nil
	})
}
