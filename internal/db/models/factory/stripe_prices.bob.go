// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
	models "github.com/tkahng/authgo/internal/db/models"
)

type StripePriceMod interface {
	Apply(*StripePriceTemplate)
}

type StripePriceModFunc func(*StripePriceTemplate)

func (f StripePriceModFunc) Apply(n *StripePriceTemplate) {
	f(n)
}

type StripePriceModSlice []StripePriceMod

func (mods StripePriceModSlice) Apply(n *StripePriceTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// StripePriceTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type StripePriceTemplate struct {
	ID              func() string
	ProductID       func() string
	LookupKey       func() null.Val[string]
	Active          func() bool
	UnitAmount      func() null.Val[int64]
	Currency        func() string
	Type            func() StripePricingType
	Interval        func() null.Val[StripePricingPlanInterval]
	IntervalCount   func() null.Val[int64]
	TrialPeriodDays func() null.Val[int64]
	Metadata        func() types.JSON[map[string]string]
	CreatedAt       func() time.Time
	UpdatedAt       func() time.Time

	r stripePriceR
	f *Factory
}

type stripePriceR struct {
	ProductStripeProduct     *stripePriceRProductStripeProductR
	PriceStripeSubscriptions []*stripePriceRPriceStripeSubscriptionsR
}

type stripePriceRProductStripeProductR struct {
	o *StripeProductTemplate
}
type stripePriceRPriceStripeSubscriptionsR struct {
	number int
	o      *StripeSubscriptionTemplate
}

// Apply mods to the StripePriceTemplate
func (o *StripePriceTemplate) Apply(mods ...StripePriceMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.StripePrice
// this does nothing with the relationship templates
func (o StripePriceTemplate) toModel() *models.StripePrice {
	m := &models.StripePrice{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.ProductID != nil {
		m.ProductID = o.ProductID()
	}
	if o.LookupKey != nil {
		m.LookupKey = o.LookupKey()
	}
	if o.Active != nil {
		m.Active = o.Active()
	}
	if o.UnitAmount != nil {
		m.UnitAmount = o.UnitAmount()
	}
	if o.Currency != nil {
		m.Currency = o.Currency()
	}
	if o.Type != nil {
		m.Type = o.Type()
	}
	if o.Interval != nil {
		m.Interval = o.Interval()
	}
	if o.IntervalCount != nil {
		m.IntervalCount = o.IntervalCount()
	}
	if o.TrialPeriodDays != nil {
		m.TrialPeriodDays = o.TrialPeriodDays()
	}
	if o.Metadata != nil {
		m.Metadata = o.Metadata()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.StripePriceSlice
// this does nothing with the relationship templates
func (o StripePriceTemplate) toModels(number int) models.StripePriceSlice {
	m := make(models.StripePriceSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.StripePrice
// according to the relationships in the template. Nothing is inserted into the db
func (t StripePriceTemplate) setModelRels(o *models.StripePrice) {
	if t.r.ProductStripeProduct != nil {
		rel := t.r.ProductStripeProduct.o.toModel()
		rel.R.ProductStripePrices = append(rel.R.ProductStripePrices, o)
		o.ProductID = rel.ID
		o.R.ProductStripeProduct = rel
	}

	if t.r.PriceStripeSubscriptions != nil {
		rel := models.StripeSubscriptionSlice{}
		for _, r := range t.r.PriceStripeSubscriptions {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.PriceID = o.ID
				rel.R.PriceStripePrice = o
			}
			rel = append(rel, related...)
		}
		o.R.PriceStripeSubscriptions = rel
	}
}

// BuildSetter returns an *models.StripePriceSetter
// this does nothing with the relationship templates
func (o StripePriceTemplate) BuildSetter() *models.StripePriceSetter {
	m := &models.StripePriceSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.ProductID != nil {
		m.ProductID = omit.From(o.ProductID())
	}
	if o.LookupKey != nil {
		m.LookupKey = omitnull.FromNull(o.LookupKey())
	}
	if o.Active != nil {
		m.Active = omit.From(o.Active())
	}
	if o.UnitAmount != nil {
		m.UnitAmount = omitnull.FromNull(o.UnitAmount())
	}
	if o.Currency != nil {
		m.Currency = omit.From(o.Currency())
	}
	if o.Type != nil {
		m.Type = omit.From(o.Type())
	}
	if o.Interval != nil {
		m.Interval = omitnull.FromNull(o.Interval())
	}
	if o.IntervalCount != nil {
		m.IntervalCount = omitnull.FromNull(o.IntervalCount())
	}
	if o.TrialPeriodDays != nil {
		m.TrialPeriodDays = omitnull.FromNull(o.TrialPeriodDays())
	}
	if o.Metadata != nil {
		m.Metadata = omit.From(o.Metadata())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.StripePriceSetter
// this does nothing with the relationship templates
func (o StripePriceTemplate) BuildManySetter(number int) []*models.StripePriceSetter {
	m := make([]*models.StripePriceSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.StripePrice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use StripePriceTemplate.Create
func (o StripePriceTemplate) Build() *models.StripePrice {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.StripePriceSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use StripePriceTemplate.CreateMany
func (o StripePriceTemplate) BuildMany(number int) models.StripePriceSlice {
	m := make(models.StripePriceSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableStripePrice(m *models.StripePriceSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random_string(nil))
	}
	if m.ProductID.IsUnset() {
		m.ProductID = omit.From(random_string(nil))
	}
	if m.Currency.IsUnset() {
		m.Currency = omit.From(random_string(nil))
	}
	if m.Type.IsUnset() {
		m.Type = omit.From(random_StripePricingType(nil))
	}
	if m.Metadata.IsUnset() {
		m.Metadata = omit.From(random_types_JSON_map_string_string_(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.StripePrice
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *StripePriceTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.StripePrice) (context.Context, error) {
	var err error

	if o.r.PriceStripeSubscriptions != nil {
		for _, r := range o.r.PriceStripeSubscriptions {
			var rel1 models.StripeSubscriptionSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachPriceStripeSubscriptions(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a stripePrice and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *StripePriceTemplate) Create(ctx context.Context, exec bob.Executor) (*models.StripePrice, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a stripePrice and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *StripePriceTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.StripePrice {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a stripePrice and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *StripePriceTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.StripePrice {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a stripePrice and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *StripePriceTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.StripePrice, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableStripePrice(opt)

	var rel0 *models.StripeProduct
	if o.r.ProductStripeProduct == nil {
		var ok bool
		rel0, ok = stripeProductCtx.Value(ctx)
		if !ok {
			StripePriceMods.WithNewProductStripeProduct().Apply(o)
		}
	}
	if o.r.ProductStripeProduct != nil {
		ctx, rel0, err = o.r.ProductStripeProduct.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.ProductID = omit.From(rel0.ID)

	m, err := models.StripePrices.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = stripePriceCtx.WithValue(ctx, m)

	m.R.ProductStripeProduct = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple stripePrices and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o StripePriceTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.StripePriceSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple stripePrices and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o StripePriceTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.StripePriceSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple stripePrices and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o StripePriceTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.StripePriceSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple stripePrices and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o StripePriceTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.StripePriceSlice, error) {
	var err error
	m := make(models.StripePriceSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// StripePrice has methods that act as mods for the StripePriceTemplate
var StripePriceMods stripePriceMods

type stripePriceMods struct{}

func (m stripePriceMods) RandomizeAllColumns(f *faker.Faker) StripePriceMod {
	return StripePriceModSlice{
		StripePriceMods.RandomID(f),
		StripePriceMods.RandomProductID(f),
		StripePriceMods.RandomLookupKey(f),
		StripePriceMods.RandomActive(f),
		StripePriceMods.RandomUnitAmount(f),
		StripePriceMods.RandomCurrency(f),
		StripePriceMods.RandomType(f),
		StripePriceMods.RandomInterval(f),
		StripePriceMods.RandomIntervalCount(f),
		StripePriceMods.RandomTrialPeriodDays(f),
		StripePriceMods.RandomMetadata(f),
		StripePriceMods.RandomCreatedAt(f),
		StripePriceMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m stripePriceMods) ID(val string) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m stripePriceMods) IDFunc(f func() string) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m stripePriceMods) UnsetID() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripePriceMods) RandomID(f *faker.Faker) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.ID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m stripePriceMods) ProductID(val string) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.ProductID = func() string { return val }
	})
}

// Set the Column from the function
func (m stripePriceMods) ProductIDFunc(f func() string) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.ProductID = f
	})
}

// Clear any values for the column
func (m stripePriceMods) UnsetProductID() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.ProductID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripePriceMods) RandomProductID(f *faker.Faker) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.ProductID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m stripePriceMods) LookupKey(val null.Val[string]) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.LookupKey = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m stripePriceMods) LookupKeyFunc(f func() null.Val[string]) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.LookupKey = f
	})
}

// Clear any values for the column
func (m stripePriceMods) UnsetLookupKey() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.LookupKey = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripePriceMods) RandomLookupKey(f *faker.Faker) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.LookupKey = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m stripePriceMods) Active(val bool) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Active = func() bool { return val }
	})
}

// Set the Column from the function
func (m stripePriceMods) ActiveFunc(f func() bool) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Active = f
	})
}

// Clear any values for the column
func (m stripePriceMods) UnsetActive() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Active = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripePriceMods) RandomActive(f *faker.Faker) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Active = func() bool {
			return random_bool(f)
		}
	})
}

// Set the model columns to this value
func (m stripePriceMods) UnitAmount(val null.Val[int64]) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.UnitAmount = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m stripePriceMods) UnitAmountFunc(f func() null.Val[int64]) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.UnitAmount = f
	})
}

// Clear any values for the column
func (m stripePriceMods) UnsetUnitAmount() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.UnitAmount = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripePriceMods) RandomUnitAmount(f *faker.Faker) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.UnitAmount = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[int64](nil)
			}

			return null.From(random_int64(f))
		}
	})
}

// Set the model columns to this value
func (m stripePriceMods) Currency(val string) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Currency = func() string { return val }
	})
}

// Set the Column from the function
func (m stripePriceMods) CurrencyFunc(f func() string) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Currency = f
	})
}

// Clear any values for the column
func (m stripePriceMods) UnsetCurrency() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Currency = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripePriceMods) RandomCurrency(f *faker.Faker) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Currency = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m stripePriceMods) Type(val StripePricingType) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Type = func() StripePricingType { return val }
	})
}

// Set the Column from the function
func (m stripePriceMods) TypeFunc(f func() StripePricingType) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Type = f
	})
}

// Clear any values for the column
func (m stripePriceMods) UnsetType() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Type = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripePriceMods) RandomType(f *faker.Faker) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Type = func() StripePricingType {
			return random_StripePricingType(f)
		}
	})
}

// Set the model columns to this value
func (m stripePriceMods) Interval(val null.Val[StripePricingPlanInterval]) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Interval = func() null.Val[StripePricingPlanInterval] { return val }
	})
}

// Set the Column from the function
func (m stripePriceMods) IntervalFunc(f func() null.Val[StripePricingPlanInterval]) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Interval = f
	})
}

// Clear any values for the column
func (m stripePriceMods) UnsetInterval() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Interval = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripePriceMods) RandomInterval(f *faker.Faker) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Interval = func() null.Val[StripePricingPlanInterval] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[StripePricingPlanInterval](nil)
			}

			return null.From(random_StripePricingPlanInterval(f))
		}
	})
}

// Set the model columns to this value
func (m stripePriceMods) IntervalCount(val null.Val[int64]) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.IntervalCount = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m stripePriceMods) IntervalCountFunc(f func() null.Val[int64]) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.IntervalCount = f
	})
}

// Clear any values for the column
func (m stripePriceMods) UnsetIntervalCount() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.IntervalCount = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripePriceMods) RandomIntervalCount(f *faker.Faker) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.IntervalCount = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[int64](nil)
			}

			return null.From(random_int64(f))
		}
	})
}

// Set the model columns to this value
func (m stripePriceMods) TrialPeriodDays(val null.Val[int64]) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.TrialPeriodDays = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m stripePriceMods) TrialPeriodDaysFunc(f func() null.Val[int64]) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.TrialPeriodDays = f
	})
}

// Clear any values for the column
func (m stripePriceMods) UnsetTrialPeriodDays() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.TrialPeriodDays = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripePriceMods) RandomTrialPeriodDays(f *faker.Faker) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.TrialPeriodDays = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[int64](nil)
			}

			return null.From(random_int64(f))
		}
	})
}

// Set the model columns to this value
func (m stripePriceMods) Metadata(val types.JSON[map[string]string]) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Metadata = func() types.JSON[map[string]string] { return val }
	})
}

// Set the Column from the function
func (m stripePriceMods) MetadataFunc(f func() types.JSON[map[string]string]) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Metadata = f
	})
}

// Clear any values for the column
func (m stripePriceMods) UnsetMetadata() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Metadata = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripePriceMods) RandomMetadata(f *faker.Faker) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.Metadata = func() types.JSON[map[string]string] {
			return random_types_JSON_map_string_string_(f)
		}
	})
}

// Set the model columns to this value
func (m stripePriceMods) CreatedAt(val time.Time) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripePriceMods) CreatedAtFunc(f func() time.Time) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m stripePriceMods) UnsetCreatedAt() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripePriceMods) RandomCreatedAt(f *faker.Faker) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m stripePriceMods) UpdatedAt(val time.Time) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripePriceMods) UpdatedAtFunc(f func() time.Time) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m stripePriceMods) UnsetUpdatedAt() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripePriceMods) RandomUpdatedAt(f *faker.Faker) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m stripePriceMods) WithProductStripeProduct(rel *StripeProductTemplate) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.r.ProductStripeProduct = &stripePriceRProductStripeProductR{
			o: rel,
		}
	})
}

func (m stripePriceMods) WithNewProductStripeProduct(mods ...StripeProductMod) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		related := o.f.NewStripeProduct(mods...)

		m.WithProductStripeProduct(related).Apply(o)
	})
}

func (m stripePriceMods) WithoutProductStripeProduct() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.r.ProductStripeProduct = nil
	})
}

func (m stripePriceMods) WithPriceStripeSubscriptions(number int, related *StripeSubscriptionTemplate) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.r.PriceStripeSubscriptions = []*stripePriceRPriceStripeSubscriptionsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m stripePriceMods) WithNewPriceStripeSubscriptions(number int, mods ...StripeSubscriptionMod) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		related := o.f.NewStripeSubscription(mods...)
		m.WithPriceStripeSubscriptions(number, related).Apply(o)
	})
}

func (m stripePriceMods) AddPriceStripeSubscriptions(number int, related *StripeSubscriptionTemplate) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.r.PriceStripeSubscriptions = append(o.r.PriceStripeSubscriptions, &stripePriceRPriceStripeSubscriptionsR{
			number: number,
			o:      related,
		})
	})
}

func (m stripePriceMods) AddNewPriceStripeSubscriptions(number int, mods ...StripeSubscriptionMod) StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		related := o.f.NewStripeSubscription(mods...)
		m.AddPriceStripeSubscriptions(number, related).Apply(o)
	})
}

func (m stripePriceMods) WithoutPriceStripeSubscriptions() StripePriceMod {
	return StripePriceModFunc(func(o *StripePriceTemplate) {
		o.r.PriceStripeSubscriptions = nil
	})
}
