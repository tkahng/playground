// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type ProductPermissionMod interface {
	Apply(*ProductPermissionTemplate)
}

type ProductPermissionModFunc func(*ProductPermissionTemplate)

func (f ProductPermissionModFunc) Apply(n *ProductPermissionTemplate) {
	f(n)
}

type ProductPermissionModSlice []ProductPermissionMod

func (mods ProductPermissionModSlice) Apply(n *ProductPermissionTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// ProductPermissionTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type ProductPermissionTemplate struct {
	ProductID    func() string
	PermissionID func() uuid.UUID

	r productPermissionR
	f *Factory
}

type productPermissionR struct {
	Permission           *productPermissionRPermissionR
	ProductStripeProduct *productPermissionRProductStripeProductR
}

type productPermissionRPermissionR struct {
	o *PermissionTemplate
}
type productPermissionRProductStripeProductR struct {
	o *StripeProductTemplate
}

// Apply mods to the ProductPermissionTemplate
func (o *ProductPermissionTemplate) Apply(mods ...ProductPermissionMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.ProductPermission
// this does nothing with the relationship templates
func (o ProductPermissionTemplate) toModel() *models.ProductPermission {
	m := &models.ProductPermission{}

	if o.ProductID != nil {
		m.ProductID = o.ProductID()
	}
	if o.PermissionID != nil {
		m.PermissionID = o.PermissionID()
	}

	return m
}

// toModels returns an models.ProductPermissionSlice
// this does nothing with the relationship templates
func (o ProductPermissionTemplate) toModels(number int) models.ProductPermissionSlice {
	m := make(models.ProductPermissionSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.ProductPermission
// according to the relationships in the template. Nothing is inserted into the db
func (t ProductPermissionTemplate) setModelRels(o *models.ProductPermission) {
	if t.r.Permission != nil {
		rel := t.r.Permission.o.toModel()
		o.PermissionID = rel.ID
		o.R.Permission = rel
	}

	if t.r.ProductStripeProduct != nil {
		rel := t.r.ProductStripeProduct.o.toModel()
		o.ProductID = rel.ID
		o.R.ProductStripeProduct = rel
	}
}

// BuildSetter returns an *models.ProductPermissionSetter
// this does nothing with the relationship templates
func (o ProductPermissionTemplate) BuildSetter() *models.ProductPermissionSetter {
	m := &models.ProductPermissionSetter{}

	if o.ProductID != nil {
		m.ProductID = omit.From(o.ProductID())
	}
	if o.PermissionID != nil {
		m.PermissionID = omit.From(o.PermissionID())
	}

	return m
}

// BuildManySetter returns an []*models.ProductPermissionSetter
// this does nothing with the relationship templates
func (o ProductPermissionTemplate) BuildManySetter(number int) []*models.ProductPermissionSetter {
	m := make([]*models.ProductPermissionSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.ProductPermission
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ProductPermissionTemplate.Create
func (o ProductPermissionTemplate) Build() *models.ProductPermission {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.ProductPermissionSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ProductPermissionTemplate.CreateMany
func (o ProductPermissionTemplate) BuildMany(number int) models.ProductPermissionSlice {
	m := make(models.ProductPermissionSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableProductPermission(m *models.ProductPermissionSetter) {
	if m.ProductID.IsUnset() {
		m.ProductID = omit.From(random_string(nil))
	}
	if m.PermissionID.IsUnset() {
		m.PermissionID = omit.From(random_uuid_UUID(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.ProductPermission
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *ProductPermissionTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.ProductPermission) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a productPermission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *ProductPermissionTemplate) Create(ctx context.Context, exec bob.Executor) (*models.ProductPermission, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a productPermission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *ProductPermissionTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.ProductPermission {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a productPermission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *ProductPermissionTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.ProductPermission {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a productPermission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *ProductPermissionTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.ProductPermission, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableProductPermission(opt)

	var rel0 *models.Permission
	if o.r.Permission == nil {
		var ok bool
		rel0, ok = permissionCtx.Value(ctx)
		if !ok {
			ProductPermissionMods.WithNewPermission().Apply(o)
		}
	}
	if o.r.Permission != nil {
		ctx, rel0, err = o.r.Permission.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.PermissionID = omit.From(rel0.ID)

	var rel1 *models.StripeProduct
	if o.r.ProductStripeProduct == nil {
		var ok bool
		rel1, ok = stripeProductCtx.Value(ctx)
		if !ok {
			ProductPermissionMods.WithNewProductStripeProduct().Apply(o)
		}
	}
	if o.r.ProductStripeProduct != nil {
		ctx, rel1, err = o.r.ProductStripeProduct.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.ProductID = omit.From(rel1.ID)

	m, err := models.ProductPermissions.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = productPermissionCtx.WithValue(ctx, m)

	m.R.Permission = rel0
	m.R.ProductStripeProduct = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple productPermissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o ProductPermissionTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.ProductPermissionSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple productPermissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o ProductPermissionTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.ProductPermissionSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple productPermissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o ProductPermissionTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.ProductPermissionSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple productPermissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o ProductPermissionTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.ProductPermissionSlice, error) {
	var err error
	m := make(models.ProductPermissionSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// ProductPermission has methods that act as mods for the ProductPermissionTemplate
var ProductPermissionMods productPermissionMods

type productPermissionMods struct{}

func (m productPermissionMods) RandomizeAllColumns(f *faker.Faker) ProductPermissionMod {
	return ProductPermissionModSlice{
		ProductPermissionMods.RandomProductID(f),
		ProductPermissionMods.RandomPermissionID(f),
	}
}

// Set the model columns to this value
func (m productPermissionMods) ProductID(val string) ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		o.ProductID = func() string { return val }
	})
}

// Set the Column from the function
func (m productPermissionMods) ProductIDFunc(f func() string) ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		o.ProductID = f
	})
}

// Clear any values for the column
func (m productPermissionMods) UnsetProductID() ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		o.ProductID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m productPermissionMods) RandomProductID(f *faker.Faker) ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		o.ProductID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m productPermissionMods) PermissionID(val uuid.UUID) ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		o.PermissionID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m productPermissionMods) PermissionIDFunc(f func() uuid.UUID) ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		o.PermissionID = f
	})
}

// Clear any values for the column
func (m productPermissionMods) UnsetPermissionID() ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		o.PermissionID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m productPermissionMods) RandomPermissionID(f *faker.Faker) ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		o.PermissionID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

func (m productPermissionMods) WithPermission(rel *PermissionTemplate) ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		o.r.Permission = &productPermissionRPermissionR{
			o: rel,
		}
	})
}

func (m productPermissionMods) WithNewPermission(mods ...PermissionMod) ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		related := o.f.NewPermission(mods...)

		m.WithPermission(related).Apply(o)
	})
}

func (m productPermissionMods) WithoutPermission() ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		o.r.Permission = nil
	})
}

func (m productPermissionMods) WithProductStripeProduct(rel *StripeProductTemplate) ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		o.r.ProductStripeProduct = &productPermissionRProductStripeProductR{
			o: rel,
		}
	})
}

func (m productPermissionMods) WithNewProductStripeProduct(mods ...StripeProductMod) ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		related := o.f.NewStripeProduct(mods...)

		m.WithProductStripeProduct(related).Apply(o)
	})
}

func (m productPermissionMods) WithoutProductStripeProduct() ProductPermissionMod {
	return ProductPermissionModFunc(func(o *ProductPermissionTemplate) {
		o.r.ProductStripeProduct = nil
	})
}
