// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
	models "github.com/tkahng/authgo/internal/db/models"
)

type StripeProductMod interface {
	Apply(*StripeProductTemplate)
}

type StripeProductModFunc func(*StripeProductTemplate)

func (f StripeProductModFunc) Apply(n *StripeProductTemplate) {
	f(n)
}

type StripeProductModSlice []StripeProductMod

func (mods StripeProductModSlice) Apply(n *StripeProductTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// StripeProductTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type StripeProductTemplate struct {
	ID          func() string
	Active      func() bool
	Name        func() null.Val[string]
	Description func() null.Val[string]
	Image       func() null.Val[string]
	Metadata    func() types.JSON[map[string]string]
	CreatedAt   func() time.Time
	UpdatedAt   func() time.Time

	r stripeProductR
	f *Factory
}

type stripeProductR struct {
	ProductStripePrices []*stripeProductRProductStripePricesR
}

type stripeProductRProductStripePricesR struct {
	number int
	o      *StripePriceTemplate
}

// Apply mods to the StripeProductTemplate
func (o *StripeProductTemplate) Apply(mods ...StripeProductMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.StripeProduct
// this does nothing with the relationship templates
func (o StripeProductTemplate) toModel() *models.StripeProduct {
	m := &models.StripeProduct{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Active != nil {
		m.Active = o.Active()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}
	if o.Image != nil {
		m.Image = o.Image()
	}
	if o.Metadata != nil {
		m.Metadata = o.Metadata()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.StripeProductSlice
// this does nothing with the relationship templates
func (o StripeProductTemplate) toModels(number int) models.StripeProductSlice {
	m := make(models.StripeProductSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.StripeProduct
// according to the relationships in the template. Nothing is inserted into the db
func (t StripeProductTemplate) setModelRels(o *models.StripeProduct) {
	if t.r.ProductStripePrices != nil {
		rel := models.StripePriceSlice{}
		for _, r := range t.r.ProductStripePrices {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.ProductID = o.ID
				rel.R.ProductStripeProduct = o
			}
			rel = append(rel, related...)
		}
		o.R.ProductStripePrices = rel
	}
}

// BuildSetter returns an *models.StripeProductSetter
// this does nothing with the relationship templates
func (o StripeProductTemplate) BuildSetter() *models.StripeProductSetter {
	m := &models.StripeProductSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Active != nil {
		m.Active = omit.From(o.Active())
	}
	if o.Name != nil {
		m.Name = omitnull.FromNull(o.Name())
	}
	if o.Description != nil {
		m.Description = omitnull.FromNull(o.Description())
	}
	if o.Image != nil {
		m.Image = omitnull.FromNull(o.Image())
	}
	if o.Metadata != nil {
		m.Metadata = omit.From(o.Metadata())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.StripeProductSetter
// this does nothing with the relationship templates
func (o StripeProductTemplate) BuildManySetter(number int) []*models.StripeProductSetter {
	m := make([]*models.StripeProductSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.StripeProduct
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use StripeProductTemplate.Create
func (o StripeProductTemplate) Build() *models.StripeProduct {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.StripeProductSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use StripeProductTemplate.CreateMany
func (o StripeProductTemplate) BuildMany(number int) models.StripeProductSlice {
	m := make(models.StripeProductSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableStripeProduct(m *models.StripeProductSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random_string(nil))
	}
	if m.Metadata.IsUnset() {
		m.Metadata = omit.From(random_types_JSON_map_string_string_(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.StripeProduct
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *StripeProductTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.StripeProduct) (context.Context, error) {
	var err error

	if o.r.ProductStripePrices != nil {
		for _, r := range o.r.ProductStripePrices {
			var rel0 models.StripePriceSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachProductStripePrices(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a stripeProduct and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *StripeProductTemplate) Create(ctx context.Context, exec bob.Executor) (*models.StripeProduct, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a stripeProduct and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *StripeProductTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.StripeProduct {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a stripeProduct and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *StripeProductTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.StripeProduct {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a stripeProduct and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *StripeProductTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.StripeProduct, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableStripeProduct(opt)

	m, err := models.StripeProducts.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = stripeProductCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple stripeProducts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o StripeProductTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.StripeProductSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple stripeProducts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o StripeProductTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.StripeProductSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple stripeProducts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o StripeProductTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.StripeProductSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple stripeProducts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o StripeProductTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.StripeProductSlice, error) {
	var err error
	m := make(models.StripeProductSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// StripeProduct has methods that act as mods for the StripeProductTemplate
var StripeProductMods stripeProductMods

type stripeProductMods struct{}

func (m stripeProductMods) RandomizeAllColumns(f *faker.Faker) StripeProductMod {
	return StripeProductModSlice{
		StripeProductMods.RandomID(f),
		StripeProductMods.RandomActive(f),
		StripeProductMods.RandomName(f),
		StripeProductMods.RandomDescription(f),
		StripeProductMods.RandomImage(f),
		StripeProductMods.RandomMetadata(f),
		StripeProductMods.RandomCreatedAt(f),
		StripeProductMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m stripeProductMods) ID(val string) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m stripeProductMods) IDFunc(f func() string) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m stripeProductMods) UnsetID() StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeProductMods) RandomID(f *faker.Faker) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.ID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m stripeProductMods) Active(val bool) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Active = func() bool { return val }
	})
}

// Set the Column from the function
func (m stripeProductMods) ActiveFunc(f func() bool) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Active = f
	})
}

// Clear any values for the column
func (m stripeProductMods) UnsetActive() StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Active = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeProductMods) RandomActive(f *faker.Faker) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Active = func() bool {
			return random_bool(f)
		}
	})
}

// Set the model columns to this value
func (m stripeProductMods) Name(val null.Val[string]) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Name = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m stripeProductMods) NameFunc(f func() null.Val[string]) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m stripeProductMods) UnsetName() StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeProductMods) RandomName(f *faker.Faker) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Name = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m stripeProductMods) Description(val null.Val[string]) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Description = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m stripeProductMods) DescriptionFunc(f func() null.Val[string]) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m stripeProductMods) UnsetDescription() StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeProductMods) RandomDescription(f *faker.Faker) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m stripeProductMods) Image(val null.Val[string]) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Image = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m stripeProductMods) ImageFunc(f func() null.Val[string]) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Image = f
	})
}

// Clear any values for the column
func (m stripeProductMods) UnsetImage() StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Image = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeProductMods) RandomImage(f *faker.Faker) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Image = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m stripeProductMods) Metadata(val types.JSON[map[string]string]) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Metadata = func() types.JSON[map[string]string] { return val }
	})
}

// Set the Column from the function
func (m stripeProductMods) MetadataFunc(f func() types.JSON[map[string]string]) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Metadata = f
	})
}

// Clear any values for the column
func (m stripeProductMods) UnsetMetadata() StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Metadata = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeProductMods) RandomMetadata(f *faker.Faker) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.Metadata = func() types.JSON[map[string]string] {
			return random_types_JSON_map_string_string_(f)
		}
	})
}

// Set the model columns to this value
func (m stripeProductMods) CreatedAt(val time.Time) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripeProductMods) CreatedAtFunc(f func() time.Time) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m stripeProductMods) UnsetCreatedAt() StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeProductMods) RandomCreatedAt(f *faker.Faker) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m stripeProductMods) UpdatedAt(val time.Time) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripeProductMods) UpdatedAtFunc(f func() time.Time) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m stripeProductMods) UnsetUpdatedAt() StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeProductMods) RandomUpdatedAt(f *faker.Faker) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m stripeProductMods) WithProductStripePrices(number int, related *StripePriceTemplate) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.r.ProductStripePrices = []*stripeProductRProductStripePricesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m stripeProductMods) WithNewProductStripePrices(number int, mods ...StripePriceMod) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		related := o.f.NewStripePrice(mods...)
		m.WithProductStripePrices(number, related).Apply(o)
	})
}

func (m stripeProductMods) AddProductStripePrices(number int, related *StripePriceTemplate) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.r.ProductStripePrices = append(o.r.ProductStripePrices, &stripeProductRProductStripePricesR{
			number: number,
			o:      related,
		})
	})
}

func (m stripeProductMods) AddNewProductStripePrices(number int, mods ...StripePriceMod) StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		related := o.f.NewStripePrice(mods...)
		m.AddProductStripePrices(number, related).Apply(o)
	})
}

func (m stripeProductMods) WithoutProductStripePrices() StripeProductMod {
	return StripeProductModFunc(func(o *StripeProductTemplate) {
		o.r.ProductStripePrices = nil
	})
}
