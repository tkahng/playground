// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type StripeWebhookEventMod interface {
	Apply(*StripeWebhookEventTemplate)
}

type StripeWebhookEventModFunc func(*StripeWebhookEventTemplate)

func (f StripeWebhookEventModFunc) Apply(n *StripeWebhookEventTemplate) {
	f(n)
}

type StripeWebhookEventModSlice []StripeWebhookEventMod

func (mods StripeWebhookEventModSlice) Apply(n *StripeWebhookEventTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// StripeWebhookEventTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type StripeWebhookEventTemplate struct {
	ID                func() string
	Type              func() string
	ObjectType        func() string
	ObjectStripeID    func() string
	EventCreationDate func() time.Time
	RequestID         func() null.Val[string]
	CreatedAt         func() time.Time
	UpdatedAt         func() time.Time

	f *Factory
}

// Apply mods to the StripeWebhookEventTemplate
func (o *StripeWebhookEventTemplate) Apply(mods ...StripeWebhookEventMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.StripeWebhookEvent
// this does nothing with the relationship templates
func (o StripeWebhookEventTemplate) toModel() *models.StripeWebhookEvent {
	m := &models.StripeWebhookEvent{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Type != nil {
		m.Type = o.Type()
	}
	if o.ObjectType != nil {
		m.ObjectType = o.ObjectType()
	}
	if o.ObjectStripeID != nil {
		m.ObjectStripeID = o.ObjectStripeID()
	}
	if o.EventCreationDate != nil {
		m.EventCreationDate = o.EventCreationDate()
	}
	if o.RequestID != nil {
		m.RequestID = o.RequestID()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.StripeWebhookEventSlice
// this does nothing with the relationship templates
func (o StripeWebhookEventTemplate) toModels(number int) models.StripeWebhookEventSlice {
	m := make(models.StripeWebhookEventSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.StripeWebhookEvent
// according to the relationships in the template. Nothing is inserted into the db
func (t StripeWebhookEventTemplate) setModelRels(o *models.StripeWebhookEvent) {}

// BuildSetter returns an *models.StripeWebhookEventSetter
// this does nothing with the relationship templates
func (o StripeWebhookEventTemplate) BuildSetter() *models.StripeWebhookEventSetter {
	m := &models.StripeWebhookEventSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Type != nil {
		m.Type = omit.From(o.Type())
	}
	if o.ObjectType != nil {
		m.ObjectType = omit.From(o.ObjectType())
	}
	if o.ObjectStripeID != nil {
		m.ObjectStripeID = omit.From(o.ObjectStripeID())
	}
	if o.EventCreationDate != nil {
		m.EventCreationDate = omit.From(o.EventCreationDate())
	}
	if o.RequestID != nil {
		m.RequestID = omitnull.FromNull(o.RequestID())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.StripeWebhookEventSetter
// this does nothing with the relationship templates
func (o StripeWebhookEventTemplate) BuildManySetter(number int) []*models.StripeWebhookEventSetter {
	m := make([]*models.StripeWebhookEventSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.StripeWebhookEvent
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use StripeWebhookEventTemplate.Create
func (o StripeWebhookEventTemplate) Build() *models.StripeWebhookEvent {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.StripeWebhookEventSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use StripeWebhookEventTemplate.CreateMany
func (o StripeWebhookEventTemplate) BuildMany(number int) models.StripeWebhookEventSlice {
	m := make(models.StripeWebhookEventSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableStripeWebhookEvent(m *models.StripeWebhookEventSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random_string(nil))
	}
	if m.Type.IsUnset() {
		m.Type = omit.From(random_string(nil))
	}
	if m.ObjectType.IsUnset() {
		m.ObjectType = omit.From(random_string(nil))
	}
	if m.ObjectStripeID.IsUnset() {
		m.ObjectStripeID = omit.From(random_string(nil))
	}
	if m.EventCreationDate.IsUnset() {
		m.EventCreationDate = omit.From(random_time_Time(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.StripeWebhookEvent
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *StripeWebhookEventTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.StripeWebhookEvent) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a stripeWebhookEvent and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *StripeWebhookEventTemplate) Create(ctx context.Context, exec bob.Executor) (*models.StripeWebhookEvent, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a stripeWebhookEvent and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *StripeWebhookEventTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.StripeWebhookEvent {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a stripeWebhookEvent and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *StripeWebhookEventTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.StripeWebhookEvent {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a stripeWebhookEvent and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *StripeWebhookEventTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.StripeWebhookEvent, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableStripeWebhookEvent(opt)

	m, err := models.StripeWebhookEvents.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = stripeWebhookEventCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple stripeWebhookEvents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o StripeWebhookEventTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.StripeWebhookEventSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple stripeWebhookEvents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o StripeWebhookEventTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.StripeWebhookEventSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple stripeWebhookEvents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o StripeWebhookEventTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.StripeWebhookEventSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple stripeWebhookEvents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o StripeWebhookEventTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.StripeWebhookEventSlice, error) {
	var err error
	m := make(models.StripeWebhookEventSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// StripeWebhookEvent has methods that act as mods for the StripeWebhookEventTemplate
var StripeWebhookEventMods stripeWebhookEventMods

type stripeWebhookEventMods struct{}

func (m stripeWebhookEventMods) RandomizeAllColumns(f *faker.Faker) StripeWebhookEventMod {
	return StripeWebhookEventModSlice{
		StripeWebhookEventMods.RandomID(f),
		StripeWebhookEventMods.RandomType(f),
		StripeWebhookEventMods.RandomObjectType(f),
		StripeWebhookEventMods.RandomObjectStripeID(f),
		StripeWebhookEventMods.RandomEventCreationDate(f),
		StripeWebhookEventMods.RandomRequestID(f),
		StripeWebhookEventMods.RandomCreatedAt(f),
		StripeWebhookEventMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m stripeWebhookEventMods) ID(val string) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m stripeWebhookEventMods) IDFunc(f func() string) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m stripeWebhookEventMods) UnsetID() StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeWebhookEventMods) RandomID(f *faker.Faker) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.ID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m stripeWebhookEventMods) Type(val string) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.Type = func() string { return val }
	})
}

// Set the Column from the function
func (m stripeWebhookEventMods) TypeFunc(f func() string) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.Type = f
	})
}

// Clear any values for the column
func (m stripeWebhookEventMods) UnsetType() StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.Type = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeWebhookEventMods) RandomType(f *faker.Faker) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.Type = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m stripeWebhookEventMods) ObjectType(val string) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.ObjectType = func() string { return val }
	})
}

// Set the Column from the function
func (m stripeWebhookEventMods) ObjectTypeFunc(f func() string) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.ObjectType = f
	})
}

// Clear any values for the column
func (m stripeWebhookEventMods) UnsetObjectType() StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.ObjectType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeWebhookEventMods) RandomObjectType(f *faker.Faker) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.ObjectType = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m stripeWebhookEventMods) ObjectStripeID(val string) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.ObjectStripeID = func() string { return val }
	})
}

// Set the Column from the function
func (m stripeWebhookEventMods) ObjectStripeIDFunc(f func() string) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.ObjectStripeID = f
	})
}

// Clear any values for the column
func (m stripeWebhookEventMods) UnsetObjectStripeID() StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.ObjectStripeID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeWebhookEventMods) RandomObjectStripeID(f *faker.Faker) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.ObjectStripeID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m stripeWebhookEventMods) EventCreationDate(val time.Time) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.EventCreationDate = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripeWebhookEventMods) EventCreationDateFunc(f func() time.Time) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.EventCreationDate = f
	})
}

// Clear any values for the column
func (m stripeWebhookEventMods) UnsetEventCreationDate() StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.EventCreationDate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeWebhookEventMods) RandomEventCreationDate(f *faker.Faker) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.EventCreationDate = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m stripeWebhookEventMods) RequestID(val null.Val[string]) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.RequestID = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m stripeWebhookEventMods) RequestIDFunc(f func() null.Val[string]) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.RequestID = f
	})
}

// Clear any values for the column
func (m stripeWebhookEventMods) UnsetRequestID() StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.RequestID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeWebhookEventMods) RandomRequestID(f *faker.Faker) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.RequestID = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m stripeWebhookEventMods) CreatedAt(val time.Time) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripeWebhookEventMods) CreatedAtFunc(f func() time.Time) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m stripeWebhookEventMods) UnsetCreatedAt() StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeWebhookEventMods) RandomCreatedAt(f *faker.Faker) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m stripeWebhookEventMods) UpdatedAt(val time.Time) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripeWebhookEventMods) UpdatedAtFunc(f func() time.Time) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m stripeWebhookEventMods) UnsetUpdatedAt() StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeWebhookEventMods) RandomUpdatedAt(f *faker.Faker) StripeWebhookEventMod {
	return StripeWebhookEventModFunc(func(o *StripeWebhookEventTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}
