// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type UserPermissionMod interface {
	Apply(*UserPermissionTemplate)
}

type UserPermissionModFunc func(*UserPermissionTemplate)

func (f UserPermissionModFunc) Apply(n *UserPermissionTemplate) {
	f(n)
}

type UserPermissionModSlice []UserPermissionMod

func (mods UserPermissionModSlice) Apply(n *UserPermissionTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// UserPermissionTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserPermissionTemplate struct {
	UserID       func() uuid.UUID
	PermissionID func() uuid.UUID

	r userPermissionR
	f *Factory
}

type userPermissionR struct {
	Permission *userPermissionRPermissionR
	User       *userPermissionRUserR
}

type userPermissionRPermissionR struct {
	o *PermissionTemplate
}
type userPermissionRUserR struct {
	o *UserTemplate
}

// Apply mods to the UserPermissionTemplate
func (o *UserPermissionTemplate) Apply(mods ...UserPermissionMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.UserPermission
// this does nothing with the relationship templates
func (o UserPermissionTemplate) toModel() *models.UserPermission {
	m := &models.UserPermission{}

	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.PermissionID != nil {
		m.PermissionID = o.PermissionID()
	}

	return m
}

// toModels returns an models.UserPermissionSlice
// this does nothing with the relationship templates
func (o UserPermissionTemplate) toModels(number int) models.UserPermissionSlice {
	m := make(models.UserPermissionSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.UserPermission
// according to the relationships in the template. Nothing is inserted into the db
func (t UserPermissionTemplate) setModelRels(o *models.UserPermission) {
	if t.r.Permission != nil {
		rel := t.r.Permission.o.toModel()
		o.PermissionID = rel.ID
		o.R.Permission = rel
	}

	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		o.UserID = rel.ID
		o.R.User = rel
	}
}

// BuildSetter returns an *models.UserPermissionSetter
// this does nothing with the relationship templates
func (o UserPermissionTemplate) BuildSetter() *models.UserPermissionSetter {
	m := &models.UserPermissionSetter{}

	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.PermissionID != nil {
		m.PermissionID = omit.From(o.PermissionID())
	}

	return m
}

// BuildManySetter returns an []*models.UserPermissionSetter
// this does nothing with the relationship templates
func (o UserPermissionTemplate) BuildManySetter(number int) []*models.UserPermissionSetter {
	m := make([]*models.UserPermissionSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.UserPermission
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserPermissionTemplate.Create
func (o UserPermissionTemplate) Build() *models.UserPermission {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserPermissionSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserPermissionTemplate.CreateMany
func (o UserPermissionTemplate) BuildMany(number int) models.UserPermissionSlice {
	m := make(models.UserPermissionSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUserPermission(m *models.UserPermissionSetter) {
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random_uuid_UUID(nil))
	}
	if m.PermissionID.IsUnset() {
		m.PermissionID = omit.From(random_uuid_UUID(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.UserPermission
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserPermissionTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.UserPermission) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a userPermission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserPermissionTemplate) Create(ctx context.Context, exec bob.Executor) (*models.UserPermission, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a userPermission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserPermissionTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.UserPermission {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a userPermission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserPermissionTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.UserPermission {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a userPermission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserPermissionTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.UserPermission, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUserPermission(opt)

	var rel0 *models.Permission
	if o.r.Permission == nil {
		var ok bool
		rel0, ok = permissionCtx.Value(ctx)
		if !ok {
			UserPermissionMods.WithNewPermission().Apply(o)
		}
	}
	if o.r.Permission != nil {
		ctx, rel0, err = o.r.Permission.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.PermissionID = omit.From(rel0.ID)

	var rel1 *models.User
	if o.r.User == nil {
		var ok bool
		rel1, ok = userCtx.Value(ctx)
		if !ok {
			UserPermissionMods.WithNewUser().Apply(o)
		}
	}
	if o.r.User != nil {
		ctx, rel1, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.UserID = omit.From(rel1.ID)

	m, err := models.UserPermissions.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userPermissionCtx.WithValue(ctx, m)

	m.R.Permission = rel0
	m.R.User = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple userPermissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserPermissionTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserPermissionSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple userPermissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserPermissionTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserPermissionSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple userPermissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserPermissionTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserPermissionSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple userPermissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserPermissionTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserPermissionSlice, error) {
	var err error
	m := make(models.UserPermissionSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// UserPermission has methods that act as mods for the UserPermissionTemplate
var UserPermissionMods userPermissionMods

type userPermissionMods struct{}

func (m userPermissionMods) RandomizeAllColumns(f *faker.Faker) UserPermissionMod {
	return UserPermissionModSlice{
		UserPermissionMods.RandomUserID(f),
		UserPermissionMods.RandomPermissionID(f),
	}
}

// Set the model columns to this value
func (m userPermissionMods) UserID(val uuid.UUID) UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		o.UserID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m userPermissionMods) UserIDFunc(f func() uuid.UUID) UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m userPermissionMods) UnsetUserID() UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userPermissionMods) RandomUserID(f *faker.Faker) UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		o.UserID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m userPermissionMods) PermissionID(val uuid.UUID) UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		o.PermissionID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m userPermissionMods) PermissionIDFunc(f func() uuid.UUID) UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		o.PermissionID = f
	})
}

// Clear any values for the column
func (m userPermissionMods) UnsetPermissionID() UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		o.PermissionID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userPermissionMods) RandomPermissionID(f *faker.Faker) UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		o.PermissionID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

func (m userPermissionMods) WithPermission(rel *PermissionTemplate) UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		o.r.Permission = &userPermissionRPermissionR{
			o: rel,
		}
	})
}

func (m userPermissionMods) WithNewPermission(mods ...PermissionMod) UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		related := o.f.NewPermission(mods...)

		m.WithPermission(related).Apply(o)
	})
}

func (m userPermissionMods) WithoutPermission() UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		o.r.Permission = nil
	})
}

func (m userPermissionMods) WithUser(rel *UserTemplate) UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		o.r.User = &userPermissionRUserR{
			o: rel,
		}
	})
}

func (m userPermissionMods) WithNewUser(mods ...UserMod) UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m userPermissionMods) WithoutUser() UserPermissionMod {
	return UserPermissionModFunc(func(o *UserPermissionTemplate) {
		o.r.User = nil
	})
}
