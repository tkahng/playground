// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type TaskProjectMod interface {
	Apply(*TaskProjectTemplate)
}

type TaskProjectModFunc func(*TaskProjectTemplate)

func (f TaskProjectModFunc) Apply(n *TaskProjectTemplate) {
	f(n)
}

type TaskProjectModSlice []TaskProjectMod

func (mods TaskProjectModSlice) Apply(n *TaskProjectTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// TaskProjectTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TaskProjectTemplate struct {
	ID          func() uuid.UUID
	UserID      func() uuid.UUID
	Name        func() string
	Description func() null.Val[string]
	Status      func() TaskProjectStatus
	Order       func() float64
	CreatedAt   func() time.Time
	UpdatedAt   func() time.Time

	r taskProjectR
	f *Factory
}

type taskProjectR struct {
	User         *taskProjectRUserR
	ProjectTasks []*taskProjectRProjectTasksR
}

type taskProjectRUserR struct {
	o *UserTemplate
}
type taskProjectRProjectTasksR struct {
	number int
	o      *TaskTemplate
}

// Apply mods to the TaskProjectTemplate
func (o *TaskProjectTemplate) Apply(mods ...TaskProjectMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.TaskProject
// this does nothing with the relationship templates
func (o TaskProjectTemplate) toModel() *models.TaskProject {
	m := &models.TaskProject{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}
	if o.Status != nil {
		m.Status = o.Status()
	}
	if o.Order != nil {
		m.Order = o.Order()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.TaskProjectSlice
// this does nothing with the relationship templates
func (o TaskProjectTemplate) toModels(number int) models.TaskProjectSlice {
	m := make(models.TaskProjectSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.TaskProject
// according to the relationships in the template. Nothing is inserted into the db
func (t TaskProjectTemplate) setModelRels(o *models.TaskProject) {
	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		rel.R.TaskProjects = append(rel.R.TaskProjects, o)
		o.UserID = rel.ID
		o.R.User = rel
	}

	if t.r.ProjectTasks != nil {
		rel := models.TaskSlice{}
		for _, r := range t.r.ProjectTasks {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.ProjectID = o.ID
				rel.R.ProjectTaskProject = o
			}
			rel = append(rel, related...)
		}
		o.R.ProjectTasks = rel
	}
}

// BuildSetter returns an *models.TaskProjectSetter
// this does nothing with the relationship templates
func (o TaskProjectTemplate) BuildSetter() *models.TaskProjectSetter {
	m := &models.TaskProjectSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.Description != nil {
		m.Description = omitnull.FromNull(o.Description())
	}
	if o.Status != nil {
		m.Status = omit.From(o.Status())
	}
	if o.Order != nil {
		m.Order = omit.From(o.Order())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.TaskProjectSetter
// this does nothing with the relationship templates
func (o TaskProjectTemplate) BuildManySetter(number int) []*models.TaskProjectSetter {
	m := make([]*models.TaskProjectSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.TaskProject
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TaskProjectTemplate.Create
func (o TaskProjectTemplate) Build() *models.TaskProject {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TaskProjectSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TaskProjectTemplate.CreateMany
func (o TaskProjectTemplate) BuildMany(number int) models.TaskProjectSlice {
	m := make(models.TaskProjectSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableTaskProject(m *models.TaskProjectSetter) {
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random_uuid_UUID(nil))
	}
	if m.Name.IsUnset() {
		m.Name = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.TaskProject
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TaskProjectTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.TaskProject) (context.Context, error) {
	var err error

	if o.r.ProjectTasks != nil {
		for _, r := range o.r.ProjectTasks {
			var rel1 models.TaskSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachProjectTasks(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a taskProject and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TaskProjectTemplate) Create(ctx context.Context, exec bob.Executor) (*models.TaskProject, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a taskProject and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *TaskProjectTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.TaskProject {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a taskProject and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *TaskProjectTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.TaskProject {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a taskProject and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *TaskProjectTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.TaskProject, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableTaskProject(opt)

	var rel0 *models.User
	if o.r.User == nil {
		var ok bool
		rel0, ok = userCtx.Value(ctx)
		if !ok {
			TaskProjectMods.WithNewUser().Apply(o)
		}
	}
	if o.r.User != nil {
		ctx, rel0, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.UserID = omit.From(rel0.ID)

	m, err := models.TaskProjects.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = taskProjectCtx.WithValue(ctx, m)

	m.R.User = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple taskProjects and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TaskProjectTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TaskProjectSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple taskProjects and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o TaskProjectTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.TaskProjectSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple taskProjects and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o TaskProjectTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.TaskProjectSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple taskProjects and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o TaskProjectTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.TaskProjectSlice, error) {
	var err error
	m := make(models.TaskProjectSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// TaskProject has methods that act as mods for the TaskProjectTemplate
var TaskProjectMods taskProjectMods

type taskProjectMods struct{}

func (m taskProjectMods) RandomizeAllColumns(f *faker.Faker) TaskProjectMod {
	return TaskProjectModSlice{
		TaskProjectMods.RandomID(f),
		TaskProjectMods.RandomUserID(f),
		TaskProjectMods.RandomName(f),
		TaskProjectMods.RandomDescription(f),
		TaskProjectMods.RandomStatus(f),
		TaskProjectMods.RandomOrder(f),
		TaskProjectMods.RandomCreatedAt(f),
		TaskProjectMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m taskProjectMods) ID(val uuid.UUID) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m taskProjectMods) IDFunc(f func() uuid.UUID) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m taskProjectMods) UnsetID() TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskProjectMods) RandomID(f *faker.Faker) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m taskProjectMods) UserID(val uuid.UUID) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.UserID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m taskProjectMods) UserIDFunc(f func() uuid.UUID) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m taskProjectMods) UnsetUserID() TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskProjectMods) RandomUserID(f *faker.Faker) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.UserID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m taskProjectMods) Name(val string) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m taskProjectMods) NameFunc(f func() string) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m taskProjectMods) UnsetName() TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskProjectMods) RandomName(f *faker.Faker) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m taskProjectMods) Description(val null.Val[string]) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Description = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m taskProjectMods) DescriptionFunc(f func() null.Val[string]) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m taskProjectMods) UnsetDescription() TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskProjectMods) RandomDescription(f *faker.Faker) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m taskProjectMods) Status(val TaskProjectStatus) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Status = func() TaskProjectStatus { return val }
	})
}

// Set the Column from the function
func (m taskProjectMods) StatusFunc(f func() TaskProjectStatus) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Status = f
	})
}

// Clear any values for the column
func (m taskProjectMods) UnsetStatus() TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Status = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskProjectMods) RandomStatus(f *faker.Faker) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Status = func() TaskProjectStatus {
			return random_TaskProjectStatus(f)
		}
	})
}

// Set the model columns to this value
func (m taskProjectMods) Order(val float64) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Order = func() float64 { return val }
	})
}

// Set the Column from the function
func (m taskProjectMods) OrderFunc(f func() float64) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Order = f
	})
}

// Clear any values for the column
func (m taskProjectMods) UnsetOrder() TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Order = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskProjectMods) RandomOrder(f *faker.Faker) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.Order = func() float64 {
			return random_float64(f)
		}
	})
}

// Set the model columns to this value
func (m taskProjectMods) CreatedAt(val time.Time) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m taskProjectMods) CreatedAtFunc(f func() time.Time) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m taskProjectMods) UnsetCreatedAt() TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskProjectMods) RandomCreatedAt(f *faker.Faker) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m taskProjectMods) UpdatedAt(val time.Time) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m taskProjectMods) UpdatedAtFunc(f func() time.Time) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m taskProjectMods) UnsetUpdatedAt() TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskProjectMods) RandomUpdatedAt(f *faker.Faker) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m taskProjectMods) WithUser(rel *UserTemplate) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.r.User = &taskProjectRUserR{
			o: rel,
		}
	})
}

func (m taskProjectMods) WithNewUser(mods ...UserMod) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m taskProjectMods) WithoutUser() TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.r.User = nil
	})
}

func (m taskProjectMods) WithProjectTasks(number int, related *TaskTemplate) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.r.ProjectTasks = []*taskProjectRProjectTasksR{{
			number: number,
			o:      related,
		}}
	})
}

func (m taskProjectMods) WithNewProjectTasks(number int, mods ...TaskMod) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		related := o.f.NewTask(mods...)
		m.WithProjectTasks(number, related).Apply(o)
	})
}

func (m taskProjectMods) AddProjectTasks(number int, related *TaskTemplate) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.r.ProjectTasks = append(o.r.ProjectTasks, &taskProjectRProjectTasksR{
			number: number,
			o:      related,
		})
	})
}

func (m taskProjectMods) AddNewProjectTasks(number int, mods ...TaskMod) TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		related := o.f.NewTask(mods...)
		m.AddProjectTasks(number, related).Apply(o)
	})
}

func (m taskProjectMods) WithoutProjectTasks() TaskProjectMod {
	return TaskProjectModFunc(func(o *TaskProjectTemplate) {
		o.r.ProjectTasks = nil
	})
}
