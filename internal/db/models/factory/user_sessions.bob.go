// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type UserSessionMod interface {
	Apply(*UserSessionTemplate)
}

type UserSessionModFunc func(*UserSessionTemplate)

func (f UserSessionModFunc) Apply(n *UserSessionTemplate) {
	f(n)
}

type UserSessionModSlice []UserSessionMod

func (mods UserSessionModSlice) Apply(n *UserSessionTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// UserSessionTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserSessionTemplate struct {
	ID           func() uuid.UUID
	UserID       func() uuid.UUID
	Expires      func() time.Time
	SessionToken func() string
	CreatedAt    func() time.Time
	UpdatedAt    func() time.Time

	r userSessionR
	f *Factory
}

type userSessionR struct {
	User *userSessionRUserR
}

type userSessionRUserR struct {
	o *UserTemplate
}

// Apply mods to the UserSessionTemplate
func (o *UserSessionTemplate) Apply(mods ...UserSessionMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.UserSession
// this does nothing with the relationship templates
func (o UserSessionTemplate) toModel() *models.UserSession {
	m := &models.UserSession{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.Expires != nil {
		m.Expires = o.Expires()
	}
	if o.SessionToken != nil {
		m.SessionToken = o.SessionToken()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.UserSessionSlice
// this does nothing with the relationship templates
func (o UserSessionTemplate) toModels(number int) models.UserSessionSlice {
	m := make(models.UserSessionSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.UserSession
// according to the relationships in the template. Nothing is inserted into the db
func (t UserSessionTemplate) setModelRels(o *models.UserSession) {
	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		rel.R.UserSessions = append(rel.R.UserSessions, o)
		o.UserID = rel.ID
		o.R.User = rel
	}
}

// BuildSetter returns an *models.UserSessionSetter
// this does nothing with the relationship templates
func (o UserSessionTemplate) BuildSetter() *models.UserSessionSetter {
	m := &models.UserSessionSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.Expires != nil {
		m.Expires = omit.From(o.Expires())
	}
	if o.SessionToken != nil {
		m.SessionToken = omit.From(o.SessionToken())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.UserSessionSetter
// this does nothing with the relationship templates
func (o UserSessionTemplate) BuildManySetter(number int) []*models.UserSessionSetter {
	m := make([]*models.UserSessionSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.UserSession
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserSessionTemplate.Create
func (o UserSessionTemplate) Build() *models.UserSession {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserSessionSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserSessionTemplate.CreateMany
func (o UserSessionTemplate) BuildMany(number int) models.UserSessionSlice {
	m := make(models.UserSessionSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUserSession(m *models.UserSessionSetter) {
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random_uuid_UUID(nil))
	}
	if m.Expires.IsUnset() {
		m.Expires = omit.From(random_time_Time(nil))
	}
	if m.SessionToken.IsUnset() {
		m.SessionToken = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.UserSession
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserSessionTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.UserSession) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a userSession and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserSessionTemplate) Create(ctx context.Context, exec bob.Executor) (*models.UserSession, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a userSession and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserSessionTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.UserSession {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a userSession and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserSessionTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.UserSession {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a userSession and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserSessionTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.UserSession, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUserSession(opt)

	var rel0 *models.User
	if o.r.User == nil {
		var ok bool
		rel0, ok = userCtx.Value(ctx)
		if !ok {
			UserSessionMods.WithNewUser().Apply(o)
		}
	}
	if o.r.User != nil {
		ctx, rel0, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.UserID = omit.From(rel0.ID)

	m, err := models.UserSessions.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userSessionCtx.WithValue(ctx, m)

	m.R.User = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple userSessions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserSessionTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserSessionSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple userSessions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserSessionTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserSessionSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple userSessions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserSessionTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserSessionSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple userSessions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserSessionTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserSessionSlice, error) {
	var err error
	m := make(models.UserSessionSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// UserSession has methods that act as mods for the UserSessionTemplate
var UserSessionMods userSessionMods

type userSessionMods struct{}

func (m userSessionMods) RandomizeAllColumns(f *faker.Faker) UserSessionMod {
	return UserSessionModSlice{
		UserSessionMods.RandomID(f),
		UserSessionMods.RandomUserID(f),
		UserSessionMods.RandomExpires(f),
		UserSessionMods.RandomSessionToken(f),
		UserSessionMods.RandomCreatedAt(f),
		UserSessionMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m userSessionMods) ID(val uuid.UUID) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m userSessionMods) IDFunc(f func() uuid.UUID) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userSessionMods) UnsetID() UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userSessionMods) RandomID(f *faker.Faker) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m userSessionMods) UserID(val uuid.UUID) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.UserID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m userSessionMods) UserIDFunc(f func() uuid.UUID) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m userSessionMods) UnsetUserID() UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userSessionMods) RandomUserID(f *faker.Faker) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.UserID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m userSessionMods) Expires(val time.Time) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.Expires = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userSessionMods) ExpiresFunc(f func() time.Time) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.Expires = f
	})
}

// Clear any values for the column
func (m userSessionMods) UnsetExpires() UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.Expires = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userSessionMods) RandomExpires(f *faker.Faker) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.Expires = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userSessionMods) SessionToken(val string) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.SessionToken = func() string { return val }
	})
}

// Set the Column from the function
func (m userSessionMods) SessionTokenFunc(f func() string) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.SessionToken = f
	})
}

// Clear any values for the column
func (m userSessionMods) UnsetSessionToken() UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.SessionToken = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userSessionMods) RandomSessionToken(f *faker.Faker) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.SessionToken = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userSessionMods) CreatedAt(val time.Time) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userSessionMods) CreatedAtFunc(f func() time.Time) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m userSessionMods) UnsetCreatedAt() UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userSessionMods) RandomCreatedAt(f *faker.Faker) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userSessionMods) UpdatedAt(val time.Time) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userSessionMods) UpdatedAtFunc(f func() time.Time) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m userSessionMods) UnsetUpdatedAt() UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userSessionMods) RandomUpdatedAt(f *faker.Faker) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m userSessionMods) WithUser(rel *UserTemplate) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.r.User = &userSessionRUserR{
			o: rel,
		}
	})
}

func (m userSessionMods) WithNewUser(mods ...UserMod) UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m userSessionMods) WithoutUser() UserSessionMod {
	return UserSessionModFunc(func(o *UserSessionTemplate) {
		o.r.User = nil
	})
}
