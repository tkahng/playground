// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"encoding/json"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
	models "github.com/tkahng/authgo/internal/db/models"
)

type StripeCustomerMod interface {
	Apply(*StripeCustomerTemplate)
}

type StripeCustomerModFunc func(*StripeCustomerTemplate)

func (f StripeCustomerModFunc) Apply(n *StripeCustomerTemplate) {
	f(n)
}

type StripeCustomerModSlice []StripeCustomerMod

func (mods StripeCustomerModSlice) Apply(n *StripeCustomerTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// StripeCustomerTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type StripeCustomerTemplate struct {
	ID             func() uuid.UUID
	StripeID       func() string
	BillingAddress func() null.Val[types.JSON[json.RawMessage]]
	PaymentMethod  func() null.Val[types.JSON[json.RawMessage]]
	CreatedAt      func() time.Time
	UpdatedAt      func() time.Time

	r stripeCustomerR
	f *Factory
}

type stripeCustomerR struct {
	IDUser *stripeCustomerRIDUserR
}

type stripeCustomerRIDUserR struct {
	o *UserTemplate
}

// Apply mods to the StripeCustomerTemplate
func (o *StripeCustomerTemplate) Apply(mods ...StripeCustomerMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.StripeCustomer
// this does nothing with the relationship templates
func (o StripeCustomerTemplate) toModel() *models.StripeCustomer {
	m := &models.StripeCustomer{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.StripeID != nil {
		m.StripeID = o.StripeID()
	}
	if o.BillingAddress != nil {
		m.BillingAddress = o.BillingAddress()
	}
	if o.PaymentMethod != nil {
		m.PaymentMethod = o.PaymentMethod()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.StripeCustomerSlice
// this does nothing with the relationship templates
func (o StripeCustomerTemplate) toModels(number int) models.StripeCustomerSlice {
	m := make(models.StripeCustomerSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.StripeCustomer
// according to the relationships in the template. Nothing is inserted into the db
func (t StripeCustomerTemplate) setModelRels(o *models.StripeCustomer) {
	if t.r.IDUser != nil {
		rel := t.r.IDUser.o.toModel()
		rel.R.IDStripeCustomer = o
		o.ID = rel.ID
		o.R.IDUser = rel
	}
}

// BuildSetter returns an *models.StripeCustomerSetter
// this does nothing with the relationship templates
func (o StripeCustomerTemplate) BuildSetter() *models.StripeCustomerSetter {
	m := &models.StripeCustomerSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.StripeID != nil {
		m.StripeID = omit.From(o.StripeID())
	}
	if o.BillingAddress != nil {
		m.BillingAddress = omitnull.FromNull(o.BillingAddress())
	}
	if o.PaymentMethod != nil {
		m.PaymentMethod = omitnull.FromNull(o.PaymentMethod())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.StripeCustomerSetter
// this does nothing with the relationship templates
func (o StripeCustomerTemplate) BuildManySetter(number int) []*models.StripeCustomerSetter {
	m := make([]*models.StripeCustomerSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.StripeCustomer
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use StripeCustomerTemplate.Create
func (o StripeCustomerTemplate) Build() *models.StripeCustomer {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.StripeCustomerSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use StripeCustomerTemplate.CreateMany
func (o StripeCustomerTemplate) BuildMany(number int) models.StripeCustomerSlice {
	m := make(models.StripeCustomerSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableStripeCustomer(m *models.StripeCustomerSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random_uuid_UUID(nil))
	}
	if m.StripeID.IsUnset() {
		m.StripeID = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.StripeCustomer
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *StripeCustomerTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.StripeCustomer) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a stripeCustomer and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *StripeCustomerTemplate) Create(ctx context.Context, exec bob.Executor) (*models.StripeCustomer, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a stripeCustomer and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *StripeCustomerTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.StripeCustomer {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a stripeCustomer and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *StripeCustomerTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.StripeCustomer {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a stripeCustomer and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *StripeCustomerTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.StripeCustomer, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableStripeCustomer(opt)

	var rel0 *models.User
	if o.r.IDUser == nil {
		var ok bool
		rel0, ok = userCtx.Value(ctx)
		if !ok {
			StripeCustomerMods.WithNewIDUser().Apply(o)
		}
	}
	if o.r.IDUser != nil {
		ctx, rel0, err = o.r.IDUser.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.ID = omit.From(rel0.ID)

	m, err := models.StripeCustomers.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = stripeCustomerCtx.WithValue(ctx, m)

	m.R.IDUser = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple stripeCustomers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o StripeCustomerTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.StripeCustomerSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple stripeCustomers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o StripeCustomerTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.StripeCustomerSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple stripeCustomers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o StripeCustomerTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.StripeCustomerSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple stripeCustomers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o StripeCustomerTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.StripeCustomerSlice, error) {
	var err error
	m := make(models.StripeCustomerSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// StripeCustomer has methods that act as mods for the StripeCustomerTemplate
var StripeCustomerMods stripeCustomerMods

type stripeCustomerMods struct{}

func (m stripeCustomerMods) RandomizeAllColumns(f *faker.Faker) StripeCustomerMod {
	return StripeCustomerModSlice{
		StripeCustomerMods.RandomID(f),
		StripeCustomerMods.RandomStripeID(f),
		StripeCustomerMods.RandomBillingAddress(f),
		StripeCustomerMods.RandomPaymentMethod(f),
		StripeCustomerMods.RandomCreatedAt(f),
		StripeCustomerMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m stripeCustomerMods) ID(val uuid.UUID) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m stripeCustomerMods) IDFunc(f func() uuid.UUID) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m stripeCustomerMods) UnsetID() StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeCustomerMods) RandomID(f *faker.Faker) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m stripeCustomerMods) StripeID(val string) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.StripeID = func() string { return val }
	})
}

// Set the Column from the function
func (m stripeCustomerMods) StripeIDFunc(f func() string) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.StripeID = f
	})
}

// Clear any values for the column
func (m stripeCustomerMods) UnsetStripeID() StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.StripeID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeCustomerMods) RandomStripeID(f *faker.Faker) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.StripeID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m stripeCustomerMods) BillingAddress(val null.Val[types.JSON[json.RawMessage]]) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.BillingAddress = func() null.Val[types.JSON[json.RawMessage]] { return val }
	})
}

// Set the Column from the function
func (m stripeCustomerMods) BillingAddressFunc(f func() null.Val[types.JSON[json.RawMessage]]) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.BillingAddress = f
	})
}

// Clear any values for the column
func (m stripeCustomerMods) UnsetBillingAddress() StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.BillingAddress = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeCustomerMods) RandomBillingAddress(f *faker.Faker) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.BillingAddress = func() null.Val[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[types.JSON[json.RawMessage]](nil)
			}

			return null.From(random_types_JSON_json_RawMessage_(f))
		}
	})
}

// Set the model columns to this value
func (m stripeCustomerMods) PaymentMethod(val null.Val[types.JSON[json.RawMessage]]) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.PaymentMethod = func() null.Val[types.JSON[json.RawMessage]] { return val }
	})
}

// Set the Column from the function
func (m stripeCustomerMods) PaymentMethodFunc(f func() null.Val[types.JSON[json.RawMessage]]) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.PaymentMethod = f
	})
}

// Clear any values for the column
func (m stripeCustomerMods) UnsetPaymentMethod() StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.PaymentMethod = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeCustomerMods) RandomPaymentMethod(f *faker.Faker) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.PaymentMethod = func() null.Val[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[types.JSON[json.RawMessage]](nil)
			}

			return null.From(random_types_JSON_json_RawMessage_(f))
		}
	})
}

// Set the model columns to this value
func (m stripeCustomerMods) CreatedAt(val time.Time) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripeCustomerMods) CreatedAtFunc(f func() time.Time) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m stripeCustomerMods) UnsetCreatedAt() StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeCustomerMods) RandomCreatedAt(f *faker.Faker) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m stripeCustomerMods) UpdatedAt(val time.Time) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripeCustomerMods) UpdatedAtFunc(f func() time.Time) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m stripeCustomerMods) UnsetUpdatedAt() StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeCustomerMods) RandomUpdatedAt(f *faker.Faker) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m stripeCustomerMods) WithIDUser(rel *UserTemplate) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.r.IDUser = &stripeCustomerRIDUserR{
			o: rel,
		}
	})
}

func (m stripeCustomerMods) WithNewIDUser(mods ...UserMod) StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		related := o.f.NewUser(mods...)

		m.WithIDUser(related).Apply(o)
	})
}

func (m stripeCustomerMods) WithoutIDUser() StripeCustomerMod {
	return StripeCustomerModFunc(func(o *StripeCustomerTemplate) {
		o.r.IDUser = nil
	})
}
