// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"encoding/json"
	"testing"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
	models "github.com/tkahng/authgo/internal/db/models"
)

type AppParamMod interface {
	Apply(*AppParamTemplate)
}

type AppParamModFunc func(*AppParamTemplate)

func (f AppParamModFunc) Apply(n *AppParamTemplate) {
	f(n)
}

type AppParamModSlice []AppParamMod

func (mods AppParamModSlice) Apply(n *AppParamTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// AppParamTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type AppParamTemplate struct {
	ID        func() uuid.UUID
	Name      func() string
	Value     func() types.JSON[json.RawMessage]
	CreatedAt func() time.Time
	UpdatedAt func() time.Time

	f *Factory
}

// Apply mods to the AppParamTemplate
func (o *AppParamTemplate) Apply(mods ...AppParamMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.AppParam
// this does nothing with the relationship templates
func (o AppParamTemplate) toModel() *models.AppParam {
	m := &models.AppParam{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Value != nil {
		m.Value = o.Value()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.AppParamSlice
// this does nothing with the relationship templates
func (o AppParamTemplate) toModels(number int) models.AppParamSlice {
	m := make(models.AppParamSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.AppParam
// according to the relationships in the template. Nothing is inserted into the db
func (t AppParamTemplate) setModelRels(o *models.AppParam) {}

// BuildSetter returns an *models.AppParamSetter
// this does nothing with the relationship templates
func (o AppParamTemplate) BuildSetter() *models.AppParamSetter {
	m := &models.AppParamSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.Value != nil {
		m.Value = omit.From(o.Value())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.AppParamSetter
// this does nothing with the relationship templates
func (o AppParamTemplate) BuildManySetter(number int) []*models.AppParamSetter {
	m := make([]*models.AppParamSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.AppParam
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AppParamTemplate.Create
func (o AppParamTemplate) Build() *models.AppParam {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.AppParamSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AppParamTemplate.CreateMany
func (o AppParamTemplate) BuildMany(number int) models.AppParamSlice {
	m := make(models.AppParamSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableAppParam(m *models.AppParamSetter) {
	if m.Name.IsUnset() {
		m.Name = omit.From(random_string(nil))
	}
	if m.Value.IsUnset() {
		m.Value = omit.From(random_types_JSON_json_RawMessage_(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.AppParam
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *AppParamTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.AppParam) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a appParam and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *AppParamTemplate) Create(ctx context.Context, exec bob.Executor) (*models.AppParam, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a appParam and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *AppParamTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.AppParam {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a appParam and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *AppParamTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.AppParam {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a appParam and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *AppParamTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.AppParam, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableAppParam(opt)

	m, err := models.AppParams.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = appParamCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple appParams and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o AppParamTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.AppParamSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple appParams and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o AppParamTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.AppParamSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple appParams and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o AppParamTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.AppParamSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple appParams and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o AppParamTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.AppParamSlice, error) {
	var err error
	m := make(models.AppParamSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// AppParam has methods that act as mods for the AppParamTemplate
var AppParamMods appParamMods

type appParamMods struct{}

func (m appParamMods) RandomizeAllColumns(f *faker.Faker) AppParamMod {
	return AppParamModSlice{
		AppParamMods.RandomID(f),
		AppParamMods.RandomName(f),
		AppParamMods.RandomValue(f),
		AppParamMods.RandomCreatedAt(f),
		AppParamMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m appParamMods) ID(val uuid.UUID) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m appParamMods) IDFunc(f func() uuid.UUID) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m appParamMods) UnsetID() AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m appParamMods) RandomID(f *faker.Faker) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m appParamMods) Name(val string) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m appParamMods) NameFunc(f func() string) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m appParamMods) UnsetName() AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m appParamMods) RandomName(f *faker.Faker) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m appParamMods) Value(val types.JSON[json.RawMessage]) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.Value = func() types.JSON[json.RawMessage] { return val }
	})
}

// Set the Column from the function
func (m appParamMods) ValueFunc(f func() types.JSON[json.RawMessage]) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.Value = f
	})
}

// Clear any values for the column
func (m appParamMods) UnsetValue() AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.Value = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m appParamMods) RandomValue(f *faker.Faker) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.Value = func() types.JSON[json.RawMessage] {
			return random_types_JSON_json_RawMessage_(f)
		}
	})
}

// Set the model columns to this value
func (m appParamMods) CreatedAt(val time.Time) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m appParamMods) CreatedAtFunc(f func() time.Time) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m appParamMods) UnsetCreatedAt() AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m appParamMods) RandomCreatedAt(f *faker.Faker) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m appParamMods) UpdatedAt(val time.Time) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m appParamMods) UpdatedAtFunc(f func() time.Time) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m appParamMods) UnsetUpdatedAt() AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m appParamMods) RandomUpdatedAt(f *faker.Faker) AppParamMod {
	return AppParamModFunc(func(o *AppParamTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}
