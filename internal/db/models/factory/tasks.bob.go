// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type TaskMod interface {
	Apply(*TaskTemplate)
}

type TaskModFunc func(*TaskTemplate)

func (f TaskModFunc) Apply(n *TaskTemplate) {
	f(n)
}

type TaskModSlice []TaskMod

func (mods TaskModSlice) Apply(n *TaskTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// TaskTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TaskTemplate struct {
	ID          func() uuid.UUID
	UserID      func() uuid.UUID
	ProjectID   func() uuid.UUID
	Name        func() string
	Description func() null.Val[string]
	Status      func() TaskStatus
	Order       func() float64
	ParentID    func() null.Val[uuid.UUID]
	CreatedAt   func() time.Time
	UpdatedAt   func() time.Time

	r taskR
	f *Factory
}

type taskR struct {
	Parent             *taskRParentR
	ReverseParents     []*taskRReverseParentsR
	ProjectTaskProject *taskRProjectTaskProjectR
	User               *taskRUserR
}

type taskRParentR struct {
	o *TaskTemplate
}
type taskRReverseParentsR struct {
	number int
	o      *TaskTemplate
}
type taskRProjectTaskProjectR struct {
	o *TaskProjectTemplate
}
type taskRUserR struct {
	o *UserTemplate
}

// Apply mods to the TaskTemplate
func (o *TaskTemplate) Apply(mods ...TaskMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Task
// this does nothing with the relationship templates
func (o TaskTemplate) toModel() *models.Task {
	m := &models.Task{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.ProjectID != nil {
		m.ProjectID = o.ProjectID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}
	if o.Status != nil {
		m.Status = o.Status()
	}
	if o.Order != nil {
		m.Order = o.Order()
	}
	if o.ParentID != nil {
		m.ParentID = o.ParentID()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.TaskSlice
// this does nothing with the relationship templates
func (o TaskTemplate) toModels(number int) models.TaskSlice {
	m := make(models.TaskSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Task
// according to the relationships in the template. Nothing is inserted into the db
func (t TaskTemplate) setModelRels(o *models.Task) {
	if t.r.Parent != nil {
		rel := t.r.Parent.o.toModel()
		rel.R.Parent = o
		o.ParentID = null.From(rel.ID)
		o.R.Parent = rel
	}

	if t.r.ReverseParents != nil {
		rel := models.TaskSlice{}
		for _, r := range t.r.ReverseParents {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.ParentID = null.From(o.ID)
				rel.R.ReverseParents = append(rel.R.ReverseParents, o)
			}
			rel = append(rel, related...)
		}
		o.R.ReverseParents = rel
	}

	if t.r.ProjectTaskProject != nil {
		rel := t.r.ProjectTaskProject.o.toModel()
		rel.R.ProjectTasks = append(rel.R.ProjectTasks, o)
		o.ProjectID = rel.ID
		o.R.ProjectTaskProject = rel
	}

	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		rel.R.Tasks = append(rel.R.Tasks, o)
		o.UserID = rel.ID
		o.R.User = rel
	}
}

// BuildSetter returns an *models.TaskSetter
// this does nothing with the relationship templates
func (o TaskTemplate) BuildSetter() *models.TaskSetter {
	m := &models.TaskSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.ProjectID != nil {
		m.ProjectID = omit.From(o.ProjectID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.Description != nil {
		m.Description = omitnull.FromNull(o.Description())
	}
	if o.Status != nil {
		m.Status = omit.From(o.Status())
	}
	if o.Order != nil {
		m.Order = omit.From(o.Order())
	}
	if o.ParentID != nil {
		m.ParentID = omitnull.FromNull(o.ParentID())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.TaskSetter
// this does nothing with the relationship templates
func (o TaskTemplate) BuildManySetter(number int) []*models.TaskSetter {
	m := make([]*models.TaskSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Task
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TaskTemplate.Create
func (o TaskTemplate) Build() *models.Task {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TaskSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TaskTemplate.CreateMany
func (o TaskTemplate) BuildMany(number int) models.TaskSlice {
	m := make(models.TaskSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableTask(m *models.TaskSetter) {
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random_uuid_UUID(nil))
	}
	if m.ProjectID.IsUnset() {
		m.ProjectID = omit.From(random_uuid_UUID(nil))
	}
	if m.Name.IsUnset() {
		m.Name = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Task
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TaskTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Task) (context.Context, error) {
	var err error

	if o.r.Parent != nil {
		var rel0 *models.Task
		ctx, rel0, err = o.r.Parent.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachParent(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}
	}

	if o.r.ReverseParents != nil {
		for _, r := range o.r.ReverseParents {
			var rel1 models.TaskSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachReverseParents(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a task and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TaskTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Task, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a task and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *TaskTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Task {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a task and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *TaskTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Task {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a task and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *TaskTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Task, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableTask(opt)

	var rel2 *models.TaskProject
	if o.r.ProjectTaskProject == nil {
		var ok bool
		rel2, ok = taskProjectCtx.Value(ctx)
		if !ok {
			TaskMods.WithNewProjectTaskProject().Apply(o)
		}
	}
	if o.r.ProjectTaskProject != nil {
		ctx, rel2, err = o.r.ProjectTaskProject.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.ProjectID = omit.From(rel2.ID)

	var rel3 *models.User
	if o.r.User == nil {
		var ok bool
		rel3, ok = userCtx.Value(ctx)
		if !ok {
			TaskMods.WithNewUser().Apply(o)
		}
	}
	if o.r.User != nil {
		ctx, rel3, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.UserID = omit.From(rel3.ID)

	m, err := models.Tasks.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = taskCtx.WithValue(ctx, m)

	m.R.ProjectTaskProject = rel2
	m.R.User = rel3

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple tasks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TaskTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TaskSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple tasks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o TaskTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.TaskSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple tasks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o TaskTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.TaskSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple tasks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o TaskTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.TaskSlice, error) {
	var err error
	m := make(models.TaskSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Task has methods that act as mods for the TaskTemplate
var TaskMods taskMods

type taskMods struct{}

func (m taskMods) RandomizeAllColumns(f *faker.Faker) TaskMod {
	return TaskModSlice{
		TaskMods.RandomID(f),
		TaskMods.RandomUserID(f),
		TaskMods.RandomProjectID(f),
		TaskMods.RandomName(f),
		TaskMods.RandomDescription(f),
		TaskMods.RandomStatus(f),
		TaskMods.RandomOrder(f),
		TaskMods.RandomParentID(f),
		TaskMods.RandomCreatedAt(f),
		TaskMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m taskMods) ID(val uuid.UUID) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m taskMods) IDFunc(f func() uuid.UUID) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetID() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomID(f *faker.Faker) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m taskMods) UserID(val uuid.UUID) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.UserID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m taskMods) UserIDFunc(f func() uuid.UUID) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetUserID() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomUserID(f *faker.Faker) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.UserID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m taskMods) ProjectID(val uuid.UUID) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.ProjectID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m taskMods) ProjectIDFunc(f func() uuid.UUID) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.ProjectID = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetProjectID() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.ProjectID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomProjectID(f *faker.Faker) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.ProjectID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m taskMods) Name(val string) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m taskMods) NameFunc(f func() string) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetName() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomName(f *faker.Faker) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m taskMods) Description(val null.Val[string]) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Description = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m taskMods) DescriptionFunc(f func() null.Val[string]) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetDescription() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomDescription(f *faker.Faker) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m taskMods) Status(val TaskStatus) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Status = func() TaskStatus { return val }
	})
}

// Set the Column from the function
func (m taskMods) StatusFunc(f func() TaskStatus) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Status = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetStatus() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Status = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomStatus(f *faker.Faker) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Status = func() TaskStatus {
			return random_TaskStatus(f)
		}
	})
}

// Set the model columns to this value
func (m taskMods) Order(val float64) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Order = func() float64 { return val }
	})
}

// Set the Column from the function
func (m taskMods) OrderFunc(f func() float64) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Order = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetOrder() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Order = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomOrder(f *faker.Faker) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.Order = func() float64 {
			return random_float64(f)
		}
	})
}

// Set the model columns to this value
func (m taskMods) ParentID(val null.Val[uuid.UUID]) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.ParentID = func() null.Val[uuid.UUID] { return val }
	})
}

// Set the Column from the function
func (m taskMods) ParentIDFunc(f func() null.Val[uuid.UUID]) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.ParentID = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetParentID() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.ParentID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomParentID(f *faker.Faker) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.ParentID = func() null.Val[uuid.UUID] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[uuid.UUID](nil)
			}

			return null.From(random_uuid_UUID(f))
		}
	})
}

// Set the model columns to this value
func (m taskMods) CreatedAt(val time.Time) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m taskMods) CreatedAtFunc(f func() time.Time) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetCreatedAt() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomCreatedAt(f *faker.Faker) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m taskMods) UpdatedAt(val time.Time) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m taskMods) UpdatedAtFunc(f func() time.Time) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetUpdatedAt() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomUpdatedAt(f *faker.Faker) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m taskMods) WithParent(rel *TaskTemplate) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.r.Parent = &taskRParentR{
			o: rel,
		}
	})
}

func (m taskMods) WithNewParent(mods ...TaskMod) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		related := o.f.NewTask(mods...)

		m.WithParent(related).Apply(o)
	})
}

func (m taskMods) WithoutParent() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.r.Parent = nil
	})
}

func (m taskMods) WithProjectTaskProject(rel *TaskProjectTemplate) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.r.ProjectTaskProject = &taskRProjectTaskProjectR{
			o: rel,
		}
	})
}

func (m taskMods) WithNewProjectTaskProject(mods ...TaskProjectMod) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		related := o.f.NewTaskProject(mods...)

		m.WithProjectTaskProject(related).Apply(o)
	})
}

func (m taskMods) WithoutProjectTaskProject() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.r.ProjectTaskProject = nil
	})
}

func (m taskMods) WithUser(rel *UserTemplate) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.r.User = &taskRUserR{
			o: rel,
		}
	})
}

func (m taskMods) WithNewUser(mods ...UserMod) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m taskMods) WithoutUser() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.r.User = nil
	})
}

func (m taskMods) WithReverseParents(number int, related *TaskTemplate) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.r.ReverseParents = []*taskRReverseParentsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m taskMods) WithNewReverseParents(number int, mods ...TaskMod) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		related := o.f.NewTask(mods...)
		m.WithReverseParents(number, related).Apply(o)
	})
}

func (m taskMods) AddReverseParents(number int, related *TaskTemplate) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.r.ReverseParents = append(o.r.ReverseParents, &taskRReverseParentsR{
			number: number,
			o:      related,
		})
	})
}

func (m taskMods) AddNewReverseParents(number int, mods ...TaskMod) TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		related := o.f.NewTask(mods...)
		m.AddReverseParents(number, related).Apply(o)
	})
}

func (m taskMods) WithoutReverseParents() TaskMod {
	return TaskModFunc(func(o *TaskTemplate) {
		o.r.ReverseParents = nil
	})
}
