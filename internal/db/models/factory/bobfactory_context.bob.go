// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	models "github.com/tkahng/authgo/internal/db/models"
)

type contextKey string

var (
	appParamCtx           = newContextual[*models.AppParam]("appParam")
	mediumCtx             = newContextual[*models.Medium]("medium")
	notificationCtx       = newContextual[*models.Notification]("notification")
	permissionCtx         = newContextual[*models.Permission]("permission")
	rolePermissionCtx     = newContextual[*models.RolePermission]("rolePermission")
	roleCtx               = newContextual[*models.Role]("role")
	schemaMigrationCtx    = newContextual[*models.SchemaMigration]("schemaMigration")
	stripeCustomerCtx     = newContextual[*models.StripeCustomer]("stripeCustomer")
	stripePriceCtx        = newContextual[*models.StripePrice]("stripePrice")
	stripeProductCtx      = newContextual[*models.StripeProduct]("stripeProduct")
	stripeSubscriptionCtx = newContextual[*models.StripeSubscription]("stripeSubscription")
	stripeWebhookEventCtx = newContextual[*models.StripeWebhookEvent]("stripeWebhookEvent")
	tokenCtx              = newContextual[*models.Token]("token")
	userAccountCtx        = newContextual[*models.UserAccount]("userAccount")
	userPermissionCtx     = newContextual[*models.UserPermission]("userPermission")
	userRoleCtx           = newContextual[*models.UserRole]("userRole")
	userSessionCtx        = newContextual[*models.UserSession]("userSession")
	userCtx               = newContextual[*models.User]("user")
)

// Contextual is a convienience wrapper around context.WithValue and context.Value
type contextual[V any] struct {
	key contextKey
}

func newContextual[V any](key string) contextual[V] {
	return contextual[V]{key: contextKey(key)}
}

func (k contextual[V]) WithValue(ctx context.Context, val V) context.Context {
	return context.WithValue(ctx, k.key, val)
}

func (k contextual[V]) Value(ctx context.Context) (V, bool) {
	v, ok := ctx.Value(k.key).(V)
	return v, ok
}
