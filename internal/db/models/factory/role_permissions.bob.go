// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type RolePermissionMod interface {
	Apply(*RolePermissionTemplate)
}

type RolePermissionModFunc func(*RolePermissionTemplate)

func (f RolePermissionModFunc) Apply(n *RolePermissionTemplate) {
	f(n)
}

type RolePermissionModSlice []RolePermissionMod

func (mods RolePermissionModSlice) Apply(n *RolePermissionTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// RolePermissionTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type RolePermissionTemplate struct {
	RoleID       func() uuid.UUID
	PermissionID func() uuid.UUID

	r rolePermissionR
	f *Factory
}

type rolePermissionR struct {
	Permission *rolePermissionRPermissionR
	Role       *rolePermissionRRoleR
}

type rolePermissionRPermissionR struct {
	o *PermissionTemplate
}
type rolePermissionRRoleR struct {
	o *RoleTemplate
}

// Apply mods to the RolePermissionTemplate
func (o *RolePermissionTemplate) Apply(mods ...RolePermissionMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.RolePermission
// this does nothing with the relationship templates
func (o RolePermissionTemplate) toModel() *models.RolePermission {
	m := &models.RolePermission{}

	if o.RoleID != nil {
		m.RoleID = o.RoleID()
	}
	if o.PermissionID != nil {
		m.PermissionID = o.PermissionID()
	}

	return m
}

// toModels returns an models.RolePermissionSlice
// this does nothing with the relationship templates
func (o RolePermissionTemplate) toModels(number int) models.RolePermissionSlice {
	m := make(models.RolePermissionSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.RolePermission
// according to the relationships in the template. Nothing is inserted into the db
func (t RolePermissionTemplate) setModelRels(o *models.RolePermission) {
	if t.r.Permission != nil {
		rel := t.r.Permission.o.toModel()
		o.PermissionID = rel.ID
		o.R.Permission = rel
	}

	if t.r.Role != nil {
		rel := t.r.Role.o.toModel()
		o.RoleID = rel.ID
		o.R.Role = rel
	}
}

// BuildSetter returns an *models.RolePermissionSetter
// this does nothing with the relationship templates
func (o RolePermissionTemplate) BuildSetter() *models.RolePermissionSetter {
	m := &models.RolePermissionSetter{}

	if o.RoleID != nil {
		m.RoleID = omit.From(o.RoleID())
	}
	if o.PermissionID != nil {
		m.PermissionID = omit.From(o.PermissionID())
	}

	return m
}

// BuildManySetter returns an []*models.RolePermissionSetter
// this does nothing with the relationship templates
func (o RolePermissionTemplate) BuildManySetter(number int) []*models.RolePermissionSetter {
	m := make([]*models.RolePermissionSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.RolePermission
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use RolePermissionTemplate.Create
func (o RolePermissionTemplate) Build() *models.RolePermission {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.RolePermissionSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use RolePermissionTemplate.CreateMany
func (o RolePermissionTemplate) BuildMany(number int) models.RolePermissionSlice {
	m := make(models.RolePermissionSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableRolePermission(m *models.RolePermissionSetter) {
	if m.RoleID.IsUnset() {
		m.RoleID = omit.From(random_uuid_UUID(nil))
	}
	if m.PermissionID.IsUnset() {
		m.PermissionID = omit.From(random_uuid_UUID(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.RolePermission
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *RolePermissionTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.RolePermission) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a rolePermission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *RolePermissionTemplate) Create(ctx context.Context, exec bob.Executor) (*models.RolePermission, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a rolePermission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *RolePermissionTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.RolePermission {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a rolePermission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *RolePermissionTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.RolePermission {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a rolePermission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *RolePermissionTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.RolePermission, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableRolePermission(opt)

	var rel0 *models.Permission
	if o.r.Permission == nil {
		var ok bool
		rel0, ok = permissionCtx.Value(ctx)
		if !ok {
			RolePermissionMods.WithNewPermission().Apply(o)
		}
	}
	if o.r.Permission != nil {
		ctx, rel0, err = o.r.Permission.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.PermissionID = omit.From(rel0.ID)

	var rel1 *models.Role
	if o.r.Role == nil {
		var ok bool
		rel1, ok = roleCtx.Value(ctx)
		if !ok {
			RolePermissionMods.WithNewRole().Apply(o)
		}
	}
	if o.r.Role != nil {
		ctx, rel1, err = o.r.Role.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.RoleID = omit.From(rel1.ID)

	m, err := models.RolePermissions.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = rolePermissionCtx.WithValue(ctx, m)

	m.R.Permission = rel0
	m.R.Role = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple rolePermissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o RolePermissionTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.RolePermissionSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple rolePermissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o RolePermissionTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.RolePermissionSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple rolePermissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o RolePermissionTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.RolePermissionSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple rolePermissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o RolePermissionTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.RolePermissionSlice, error) {
	var err error
	m := make(models.RolePermissionSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// RolePermission has methods that act as mods for the RolePermissionTemplate
var RolePermissionMods rolePermissionMods

type rolePermissionMods struct{}

func (m rolePermissionMods) RandomizeAllColumns(f *faker.Faker) RolePermissionMod {
	return RolePermissionModSlice{
		RolePermissionMods.RandomRoleID(f),
		RolePermissionMods.RandomPermissionID(f),
	}
}

// Set the model columns to this value
func (m rolePermissionMods) RoleID(val uuid.UUID) RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		o.RoleID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m rolePermissionMods) RoleIDFunc(f func() uuid.UUID) RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		o.RoleID = f
	})
}

// Clear any values for the column
func (m rolePermissionMods) UnsetRoleID() RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		o.RoleID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m rolePermissionMods) RandomRoleID(f *faker.Faker) RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		o.RoleID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m rolePermissionMods) PermissionID(val uuid.UUID) RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		o.PermissionID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m rolePermissionMods) PermissionIDFunc(f func() uuid.UUID) RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		o.PermissionID = f
	})
}

// Clear any values for the column
func (m rolePermissionMods) UnsetPermissionID() RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		o.PermissionID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m rolePermissionMods) RandomPermissionID(f *faker.Faker) RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		o.PermissionID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

func (m rolePermissionMods) WithPermission(rel *PermissionTemplate) RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		o.r.Permission = &rolePermissionRPermissionR{
			o: rel,
		}
	})
}

func (m rolePermissionMods) WithNewPermission(mods ...PermissionMod) RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		related := o.f.NewPermission(mods...)

		m.WithPermission(related).Apply(o)
	})
}

func (m rolePermissionMods) WithoutPermission() RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		o.r.Permission = nil
	})
}

func (m rolePermissionMods) WithRole(rel *RoleTemplate) RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		o.r.Role = &rolePermissionRRoleR{
			o: rel,
		}
	})
}

func (m rolePermissionMods) WithNewRole(mods ...RoleMod) RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		related := o.f.NewRole(mods...)

		m.WithRole(related).Apply(o)
	})
}

func (m rolePermissionMods) WithoutRole() RolePermissionMod {
	return RolePermissionModFunc(func(o *RolePermissionTemplate) {
		o.r.Role = nil
	})
}
