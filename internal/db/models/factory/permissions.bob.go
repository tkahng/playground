// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type PermissionMod interface {
	Apply(*PermissionTemplate)
}

type PermissionModFunc func(*PermissionTemplate)

func (f PermissionModFunc) Apply(n *PermissionTemplate) {
	f(n)
}

type PermissionModSlice []PermissionMod

func (mods PermissionModSlice) Apply(n *PermissionTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// PermissionTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type PermissionTemplate struct {
	ID          func() uuid.UUID
	Name        func() string
	Description func() null.Val[string]
	CreatedAt   func() time.Time
	UpdatedAt   func() time.Time

	r permissionR
	f *Factory
}

type permissionR struct {
	StripeProducts []*permissionRStripeProductsR
	Roles          []*permissionRRolesR
	Users          []*permissionRUsersR
}

type permissionRStripeProductsR struct {
	number int
	o      *StripeProductTemplate
}
type permissionRRolesR struct {
	number int
	o      *RoleTemplate
}
type permissionRUsersR struct {
	number int
	o      *UserTemplate
}

// Apply mods to the PermissionTemplate
func (o *PermissionTemplate) Apply(mods ...PermissionMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Permission
// this does nothing with the relationship templates
func (o PermissionTemplate) toModel() *models.Permission {
	m := &models.Permission{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.PermissionSlice
// this does nothing with the relationship templates
func (o PermissionTemplate) toModels(number int) models.PermissionSlice {
	m := make(models.PermissionSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Permission
// according to the relationships in the template. Nothing is inserted into the db
func (t PermissionTemplate) setModelRels(o *models.Permission) {
	if t.r.StripeProducts != nil {
		rel := models.StripeProductSlice{}
		for _, r := range t.r.StripeProducts {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.R.Permissions = append(rel.R.Permissions, o)
			}
			rel = append(rel, related...)
		}
		o.R.StripeProducts = rel
	}

	if t.r.Roles != nil {
		rel := models.RoleSlice{}
		for _, r := range t.r.Roles {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.R.Permissions = append(rel.R.Permissions, o)
			}
			rel = append(rel, related...)
		}
		o.R.Roles = rel
	}

	if t.r.Users != nil {
		rel := models.UserSlice{}
		for _, r := range t.r.Users {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.R.Permissions = append(rel.R.Permissions, o)
			}
			rel = append(rel, related...)
		}
		o.R.Users = rel
	}
}

// BuildSetter returns an *models.PermissionSetter
// this does nothing with the relationship templates
func (o PermissionTemplate) BuildSetter() *models.PermissionSetter {
	m := &models.PermissionSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.Description != nil {
		m.Description = omitnull.FromNull(o.Description())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.PermissionSetter
// this does nothing with the relationship templates
func (o PermissionTemplate) BuildManySetter(number int) []*models.PermissionSetter {
	m := make([]*models.PermissionSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Permission
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PermissionTemplate.Create
func (o PermissionTemplate) Build() *models.Permission {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.PermissionSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PermissionTemplate.CreateMany
func (o PermissionTemplate) BuildMany(number int) models.PermissionSlice {
	m := make(models.PermissionSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatablePermission(m *models.PermissionSetter) {
	if m.Name.IsUnset() {
		m.Name = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Permission
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *PermissionTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Permission) (context.Context, error) {
	var err error

	if o.r.StripeProducts != nil {
		for _, r := range o.r.StripeProducts {
			var rel0 models.StripeProductSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachStripeProducts(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.Roles != nil {
		for _, r := range o.r.Roles {
			var rel1 models.RoleSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachRoles(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.Users != nil {
		for _, r := range o.r.Users {
			var rel2 models.UserSlice
			ctx, rel2, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachUsers(ctx, exec, rel2...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a permission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *PermissionTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Permission, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a permission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *PermissionTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Permission {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a permission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *PermissionTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Permission {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a permission and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *PermissionTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Permission, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatablePermission(opt)

	m, err := models.Permissions.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = permissionCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple permissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o PermissionTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.PermissionSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple permissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o PermissionTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.PermissionSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple permissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o PermissionTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.PermissionSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple permissions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o PermissionTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.PermissionSlice, error) {
	var err error
	m := make(models.PermissionSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Permission has methods that act as mods for the PermissionTemplate
var PermissionMods permissionMods

type permissionMods struct{}

func (m permissionMods) RandomizeAllColumns(f *faker.Faker) PermissionMod {
	return PermissionModSlice{
		PermissionMods.RandomID(f),
		PermissionMods.RandomName(f),
		PermissionMods.RandomDescription(f),
		PermissionMods.RandomCreatedAt(f),
		PermissionMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m permissionMods) ID(val uuid.UUID) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m permissionMods) IDFunc(f func() uuid.UUID) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m permissionMods) UnsetID() PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m permissionMods) RandomID(f *faker.Faker) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m permissionMods) Name(val string) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m permissionMods) NameFunc(f func() string) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m permissionMods) UnsetName() PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m permissionMods) RandomName(f *faker.Faker) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m permissionMods) Description(val null.Val[string]) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.Description = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m permissionMods) DescriptionFunc(f func() null.Val[string]) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m permissionMods) UnsetDescription() PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m permissionMods) RandomDescription(f *faker.Faker) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m permissionMods) CreatedAt(val time.Time) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m permissionMods) CreatedAtFunc(f func() time.Time) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m permissionMods) UnsetCreatedAt() PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m permissionMods) RandomCreatedAt(f *faker.Faker) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m permissionMods) UpdatedAt(val time.Time) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m permissionMods) UpdatedAtFunc(f func() time.Time) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m permissionMods) UnsetUpdatedAt() PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m permissionMods) RandomUpdatedAt(f *faker.Faker) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m permissionMods) WithStripeProducts(number int, related *StripeProductTemplate) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.r.StripeProducts = []*permissionRStripeProductsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m permissionMods) WithNewStripeProducts(number int, mods ...StripeProductMod) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		related := o.f.NewStripeProduct(mods...)
		m.WithStripeProducts(number, related).Apply(o)
	})
}

func (m permissionMods) AddStripeProducts(number int, related *StripeProductTemplate) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.r.StripeProducts = append(o.r.StripeProducts, &permissionRStripeProductsR{
			number: number,
			o:      related,
		})
	})
}

func (m permissionMods) AddNewStripeProducts(number int, mods ...StripeProductMod) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		related := o.f.NewStripeProduct(mods...)
		m.AddStripeProducts(number, related).Apply(o)
	})
}

func (m permissionMods) WithoutStripeProducts() PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.r.StripeProducts = nil
	})
}

func (m permissionMods) WithRoles(number int, related *RoleTemplate) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.r.Roles = []*permissionRRolesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m permissionMods) WithNewRoles(number int, mods ...RoleMod) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		related := o.f.NewRole(mods...)
		m.WithRoles(number, related).Apply(o)
	})
}

func (m permissionMods) AddRoles(number int, related *RoleTemplate) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.r.Roles = append(o.r.Roles, &permissionRRolesR{
			number: number,
			o:      related,
		})
	})
}

func (m permissionMods) AddNewRoles(number int, mods ...RoleMod) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		related := o.f.NewRole(mods...)
		m.AddRoles(number, related).Apply(o)
	})
}

func (m permissionMods) WithoutRoles() PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.r.Roles = nil
	})
}

func (m permissionMods) WithUsers(number int, related *UserTemplate) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.r.Users = []*permissionRUsersR{{
			number: number,
			o:      related,
		}}
	})
}

func (m permissionMods) WithNewUsers(number int, mods ...UserMod) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		related := o.f.NewUser(mods...)
		m.WithUsers(number, related).Apply(o)
	})
}

func (m permissionMods) AddUsers(number int, related *UserTemplate) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.r.Users = append(o.r.Users, &permissionRUsersR{
			number: number,
			o:      related,
		})
	})
}

func (m permissionMods) AddNewUsers(number int, mods ...UserMod) PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		related := o.f.NewUser(mods...)
		m.AddUsers(number, related).Apply(o)
	})
}

func (m permissionMods) WithoutUsers() PermissionMod {
	return PermissionModFunc(func(o *PermissionTemplate) {
		o.r.Users = nil
	})
}
