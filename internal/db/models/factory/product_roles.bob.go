// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type ProductRoleMod interface {
	Apply(*ProductRoleTemplate)
}

type ProductRoleModFunc func(*ProductRoleTemplate)

func (f ProductRoleModFunc) Apply(n *ProductRoleTemplate) {
	f(n)
}

type ProductRoleModSlice []ProductRoleMod

func (mods ProductRoleModSlice) Apply(n *ProductRoleTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// ProductRoleTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type ProductRoleTemplate struct {
	ProductID func() string
	RoleID    func() uuid.UUID

	r productRoleR
	f *Factory
}

type productRoleR struct {
	ProductStripeProduct *productRoleRProductStripeProductR
	Role                 *productRoleRRoleR
}

type productRoleRProductStripeProductR struct {
	o *StripeProductTemplate
}
type productRoleRRoleR struct {
	o *RoleTemplate
}

// Apply mods to the ProductRoleTemplate
func (o *ProductRoleTemplate) Apply(mods ...ProductRoleMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.ProductRole
// this does nothing with the relationship templates
func (o ProductRoleTemplate) toModel() *models.ProductRole {
	m := &models.ProductRole{}

	if o.ProductID != nil {
		m.ProductID = o.ProductID()
	}
	if o.RoleID != nil {
		m.RoleID = o.RoleID()
	}

	return m
}

// toModels returns an models.ProductRoleSlice
// this does nothing with the relationship templates
func (o ProductRoleTemplate) toModels(number int) models.ProductRoleSlice {
	m := make(models.ProductRoleSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.ProductRole
// according to the relationships in the template. Nothing is inserted into the db
func (t ProductRoleTemplate) setModelRels(o *models.ProductRole) {
	if t.r.ProductStripeProduct != nil {
		rel := t.r.ProductStripeProduct.o.toModel()
		o.ProductID = rel.ID
		o.R.ProductStripeProduct = rel
	}

	if t.r.Role != nil {
		rel := t.r.Role.o.toModel()
		o.RoleID = rel.ID
		o.R.Role = rel
	}
}

// BuildSetter returns an *models.ProductRoleSetter
// this does nothing with the relationship templates
func (o ProductRoleTemplate) BuildSetter() *models.ProductRoleSetter {
	m := &models.ProductRoleSetter{}

	if o.ProductID != nil {
		m.ProductID = omit.From(o.ProductID())
	}
	if o.RoleID != nil {
		m.RoleID = omit.From(o.RoleID())
	}

	return m
}

// BuildManySetter returns an []*models.ProductRoleSetter
// this does nothing with the relationship templates
func (o ProductRoleTemplate) BuildManySetter(number int) []*models.ProductRoleSetter {
	m := make([]*models.ProductRoleSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.ProductRole
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ProductRoleTemplate.Create
func (o ProductRoleTemplate) Build() *models.ProductRole {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.ProductRoleSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ProductRoleTemplate.CreateMany
func (o ProductRoleTemplate) BuildMany(number int) models.ProductRoleSlice {
	m := make(models.ProductRoleSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableProductRole(m *models.ProductRoleSetter) {
	if m.ProductID.IsUnset() {
		m.ProductID = omit.From(random_string(nil))
	}
	if m.RoleID.IsUnset() {
		m.RoleID = omit.From(random_uuid_UUID(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.ProductRole
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *ProductRoleTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.ProductRole) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a productRole and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *ProductRoleTemplate) Create(ctx context.Context, exec bob.Executor) (*models.ProductRole, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a productRole and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *ProductRoleTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.ProductRole {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a productRole and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *ProductRoleTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.ProductRole {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a productRole and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *ProductRoleTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.ProductRole, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableProductRole(opt)

	var rel0 *models.StripeProduct
	if o.r.ProductStripeProduct == nil {
		var ok bool
		rel0, ok = stripeProductCtx.Value(ctx)
		if !ok {
			ProductRoleMods.WithNewProductStripeProduct().Apply(o)
		}
	}
	if o.r.ProductStripeProduct != nil {
		ctx, rel0, err = o.r.ProductStripeProduct.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.ProductID = omit.From(rel0.ID)

	var rel1 *models.Role
	if o.r.Role == nil {
		var ok bool
		rel1, ok = roleCtx.Value(ctx)
		if !ok {
			ProductRoleMods.WithNewRole().Apply(o)
		}
	}
	if o.r.Role != nil {
		ctx, rel1, err = o.r.Role.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.RoleID = omit.From(rel1.ID)

	m, err := models.ProductRoles.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = productRoleCtx.WithValue(ctx, m)

	m.R.ProductStripeProduct = rel0
	m.R.Role = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple productRoles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o ProductRoleTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.ProductRoleSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple productRoles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o ProductRoleTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.ProductRoleSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple productRoles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o ProductRoleTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.ProductRoleSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple productRoles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o ProductRoleTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.ProductRoleSlice, error) {
	var err error
	m := make(models.ProductRoleSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// ProductRole has methods that act as mods for the ProductRoleTemplate
var ProductRoleMods productRoleMods

type productRoleMods struct{}

func (m productRoleMods) RandomizeAllColumns(f *faker.Faker) ProductRoleMod {
	return ProductRoleModSlice{
		ProductRoleMods.RandomProductID(f),
		ProductRoleMods.RandomRoleID(f),
	}
}

// Set the model columns to this value
func (m productRoleMods) ProductID(val string) ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		o.ProductID = func() string { return val }
	})
}

// Set the Column from the function
func (m productRoleMods) ProductIDFunc(f func() string) ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		o.ProductID = f
	})
}

// Clear any values for the column
func (m productRoleMods) UnsetProductID() ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		o.ProductID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m productRoleMods) RandomProductID(f *faker.Faker) ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		o.ProductID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m productRoleMods) RoleID(val uuid.UUID) ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		o.RoleID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m productRoleMods) RoleIDFunc(f func() uuid.UUID) ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		o.RoleID = f
	})
}

// Clear any values for the column
func (m productRoleMods) UnsetRoleID() ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		o.RoleID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m productRoleMods) RandomRoleID(f *faker.Faker) ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		o.RoleID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

func (m productRoleMods) WithProductStripeProduct(rel *StripeProductTemplate) ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		o.r.ProductStripeProduct = &productRoleRProductStripeProductR{
			o: rel,
		}
	})
}

func (m productRoleMods) WithNewProductStripeProduct(mods ...StripeProductMod) ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		related := o.f.NewStripeProduct(mods...)

		m.WithProductStripeProduct(related).Apply(o)
	})
}

func (m productRoleMods) WithoutProductStripeProduct() ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		o.r.ProductStripeProduct = nil
	})
}

func (m productRoleMods) WithRole(rel *RoleTemplate) ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		o.r.Role = &productRoleRRoleR{
			o: rel,
		}
	})
}

func (m productRoleMods) WithNewRole(mods ...RoleMod) ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		related := o.f.NewRole(mods...)

		m.WithRole(related).Apply(o)
	})
}

func (m productRoleMods) WithoutRole() ProductRoleMod {
	return ProductRoleModFunc(func(o *ProductRoleTemplate) {
		o.r.Role = nil
	})
}
