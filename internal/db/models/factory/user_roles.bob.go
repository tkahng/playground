// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type UserRoleMod interface {
	Apply(*UserRoleTemplate)
}

type UserRoleModFunc func(*UserRoleTemplate)

func (f UserRoleModFunc) Apply(n *UserRoleTemplate) {
	f(n)
}

type UserRoleModSlice []UserRoleMod

func (mods UserRoleModSlice) Apply(n *UserRoleTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// UserRoleTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserRoleTemplate struct {
	UserID func() uuid.UUID
	RoleID func() uuid.UUID

	r userRoleR
	f *Factory
}

type userRoleR struct {
	Role *userRoleRRoleR
	User *userRoleRUserR
}

type userRoleRRoleR struct {
	o *RoleTemplate
}
type userRoleRUserR struct {
	o *UserTemplate
}

// Apply mods to the UserRoleTemplate
func (o *UserRoleTemplate) Apply(mods ...UserRoleMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.UserRole
// this does nothing with the relationship templates
func (o UserRoleTemplate) toModel() *models.UserRole {
	m := &models.UserRole{}

	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.RoleID != nil {
		m.RoleID = o.RoleID()
	}

	return m
}

// toModels returns an models.UserRoleSlice
// this does nothing with the relationship templates
func (o UserRoleTemplate) toModels(number int) models.UserRoleSlice {
	m := make(models.UserRoleSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.UserRole
// according to the relationships in the template. Nothing is inserted into the db
func (t UserRoleTemplate) setModelRels(o *models.UserRole) {
	if t.r.Role != nil {
		rel := t.r.Role.o.toModel()
		o.RoleID = rel.ID
		o.R.Role = rel
	}

	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		o.UserID = rel.ID
		o.R.User = rel
	}
}

// BuildSetter returns an *models.UserRoleSetter
// this does nothing with the relationship templates
func (o UserRoleTemplate) BuildSetter() *models.UserRoleSetter {
	m := &models.UserRoleSetter{}

	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.RoleID != nil {
		m.RoleID = omit.From(o.RoleID())
	}

	return m
}

// BuildManySetter returns an []*models.UserRoleSetter
// this does nothing with the relationship templates
func (o UserRoleTemplate) BuildManySetter(number int) []*models.UserRoleSetter {
	m := make([]*models.UserRoleSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.UserRole
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserRoleTemplate.Create
func (o UserRoleTemplate) Build() *models.UserRole {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserRoleSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserRoleTemplate.CreateMany
func (o UserRoleTemplate) BuildMany(number int) models.UserRoleSlice {
	m := make(models.UserRoleSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUserRole(m *models.UserRoleSetter) {
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random_uuid_UUID(nil))
	}
	if m.RoleID.IsUnset() {
		m.RoleID = omit.From(random_uuid_UUID(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.UserRole
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserRoleTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.UserRole) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a userRole and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserRoleTemplate) Create(ctx context.Context, exec bob.Executor) (*models.UserRole, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a userRole and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserRoleTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.UserRole {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a userRole and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserRoleTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.UserRole {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a userRole and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserRoleTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.UserRole, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUserRole(opt)

	var rel0 *models.Role
	if o.r.Role == nil {
		var ok bool
		rel0, ok = roleCtx.Value(ctx)
		if !ok {
			UserRoleMods.WithNewRole().Apply(o)
		}
	}
	if o.r.Role != nil {
		ctx, rel0, err = o.r.Role.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.RoleID = omit.From(rel0.ID)

	var rel1 *models.User
	if o.r.User == nil {
		var ok bool
		rel1, ok = userCtx.Value(ctx)
		if !ok {
			UserRoleMods.WithNewUser().Apply(o)
		}
	}
	if o.r.User != nil {
		ctx, rel1, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.UserID = omit.From(rel1.ID)

	m, err := models.UserRoles.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userRoleCtx.WithValue(ctx, m)

	m.R.Role = rel0
	m.R.User = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple userRoles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserRoleTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserRoleSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple userRoles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserRoleTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserRoleSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple userRoles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserRoleTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserRoleSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple userRoles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserRoleTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserRoleSlice, error) {
	var err error
	m := make(models.UserRoleSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// UserRole has methods that act as mods for the UserRoleTemplate
var UserRoleMods userRoleMods

type userRoleMods struct{}

func (m userRoleMods) RandomizeAllColumns(f *faker.Faker) UserRoleMod {
	return UserRoleModSlice{
		UserRoleMods.RandomUserID(f),
		UserRoleMods.RandomRoleID(f),
	}
}

// Set the model columns to this value
func (m userRoleMods) UserID(val uuid.UUID) UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		o.UserID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m userRoleMods) UserIDFunc(f func() uuid.UUID) UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m userRoleMods) UnsetUserID() UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userRoleMods) RandomUserID(f *faker.Faker) UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		o.UserID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m userRoleMods) RoleID(val uuid.UUID) UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		o.RoleID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m userRoleMods) RoleIDFunc(f func() uuid.UUID) UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		o.RoleID = f
	})
}

// Clear any values for the column
func (m userRoleMods) UnsetRoleID() UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		o.RoleID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userRoleMods) RandomRoleID(f *faker.Faker) UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		o.RoleID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

func (m userRoleMods) WithRole(rel *RoleTemplate) UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		o.r.Role = &userRoleRRoleR{
			o: rel,
		}
	})
}

func (m userRoleMods) WithNewRole(mods ...RoleMod) UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		related := o.f.NewRole(mods...)

		m.WithRole(related).Apply(o)
	})
}

func (m userRoleMods) WithoutRole() UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		o.r.Role = nil
	})
}

func (m userRoleMods) WithUser(rel *UserTemplate) UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		o.r.User = &userRoleRUserR{
			o: rel,
		}
	})
}

func (m userRoleMods) WithNewUser(mods ...UserMod) UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m userRoleMods) WithoutUser() UserRoleMod {
	return UserRoleModFunc(func(o *UserRoleTemplate) {
		o.r.User = nil
	})
}
