// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type UserMod interface {
	Apply(*UserTemplate)
}

type UserModFunc func(*UserTemplate)

func (f UserModFunc) Apply(n *UserTemplate) {
	f(n)
}

type UserModSlice []UserMod

func (mods UserModSlice) Apply(n *UserTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// UserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserTemplate struct {
	ID              func() uuid.UUID
	Email           func() string
	EmailVerifiedAt func() null.Val[time.Time]
	Name            func() null.Val[string]
	Image           func() null.Val[string]
	CreatedAt       func() time.Time
	UpdatedAt       func() time.Time

	r userR
	f *Factory
}

type userR struct {
	AiUsages            []*userRAiUsagesR
	Media               []*userRMediaR
	Notifications       []*userRNotificationsR
	IDStripeCustomer    *userRIDStripeCustomerR
	StripeSubscriptions []*userRStripeSubscriptionsR
	TaskProjects        []*userRTaskProjectsR
	Tasks               []*userRTasksR
	Tokens              []*userRTokensR
	UserAccounts        []*userRUserAccountsR
	Permissions         []*userRPermissionsR
	Roles               []*userRRolesR
	UserSessions        []*userRUserSessionsR
}

type userRAiUsagesR struct {
	number int
	o      *AiUsageTemplate
}
type userRMediaR struct {
	number int
	o      *MediumTemplate
}
type userRNotificationsR struct {
	number int
	o      *NotificationTemplate
}
type userRIDStripeCustomerR struct {
	o *StripeCustomerTemplate
}
type userRStripeSubscriptionsR struct {
	number int
	o      *StripeSubscriptionTemplate
}
type userRTaskProjectsR struct {
	number int
	o      *TaskProjectTemplate
}
type userRTasksR struct {
	number int
	o      *TaskTemplate
}
type userRTokensR struct {
	number int
	o      *TokenTemplate
}
type userRUserAccountsR struct {
	number int
	o      *UserAccountTemplate
}
type userRPermissionsR struct {
	number int
	o      *PermissionTemplate
}
type userRRolesR struct {
	number int
	o      *RoleTemplate
}
type userRUserSessionsR struct {
	number int
	o      *UserSessionTemplate
}

// Apply mods to the UserTemplate
func (o *UserTemplate) Apply(mods ...UserMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.User
// this does nothing with the relationship templates
func (o UserTemplate) toModel() *models.User {
	m := &models.User{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Email != nil {
		m.Email = o.Email()
	}
	if o.EmailVerifiedAt != nil {
		m.EmailVerifiedAt = o.EmailVerifiedAt()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Image != nil {
		m.Image = o.Image()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.UserSlice
// this does nothing with the relationship templates
func (o UserTemplate) toModels(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.User
// according to the relationships in the template. Nothing is inserted into the db
func (t UserTemplate) setModelRels(o *models.User) {
	if t.r.AiUsages != nil {
		rel := models.AiUsageSlice{}
		for _, r := range t.r.AiUsages {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.UserID = o.ID
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.AiUsages = rel
	}

	if t.r.Media != nil {
		rel := models.MediumSlice{}
		for _, r := range t.r.Media {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.UserID = null.From(o.ID)
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.Media = rel
	}

	if t.r.Notifications != nil {
		rel := models.NotificationSlice{}
		for _, r := range t.r.Notifications {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.UserID = null.From(o.ID)
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.Notifications = rel
	}

	if t.r.IDStripeCustomer != nil {
		rel := t.r.IDStripeCustomer.o.toModel()
		rel.R.IDUser = o
		rel.ID = o.ID
		o.R.IDStripeCustomer = rel
	}

	if t.r.StripeSubscriptions != nil {
		rel := models.StripeSubscriptionSlice{}
		for _, r := range t.r.StripeSubscriptions {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.UserID = o.ID
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.StripeSubscriptions = rel
	}

	if t.r.TaskProjects != nil {
		rel := models.TaskProjectSlice{}
		for _, r := range t.r.TaskProjects {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.UserID = o.ID
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.TaskProjects = rel
	}

	if t.r.Tasks != nil {
		rel := models.TaskSlice{}
		for _, r := range t.r.Tasks {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.UserID = o.ID
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.Tasks = rel
	}

	if t.r.Tokens != nil {
		rel := models.TokenSlice{}
		for _, r := range t.r.Tokens {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.UserID = null.From(o.ID)
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.Tokens = rel
	}

	if t.r.UserAccounts != nil {
		rel := models.UserAccountSlice{}
		for _, r := range t.r.UserAccounts {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.UserID = o.ID
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.UserAccounts = rel
	}

	if t.r.Permissions != nil {
		rel := models.PermissionSlice{}
		for _, r := range t.r.Permissions {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.R.Users = append(rel.R.Users, o)
			}
			rel = append(rel, related...)
		}
		o.R.Permissions = rel
	}

	if t.r.Roles != nil {
		rel := models.RoleSlice{}
		for _, r := range t.r.Roles {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.R.Users = append(rel.R.Users, o)
			}
			rel = append(rel, related...)
		}
		o.R.Roles = rel
	}

	if t.r.UserSessions != nil {
		rel := models.UserSessionSlice{}
		for _, r := range t.r.UserSessions {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.UserID = o.ID
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.UserSessions = rel
	}
}

// BuildSetter returns an *models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildSetter() *models.UserSetter {
	m := &models.UserSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Email != nil {
		m.Email = omit.From(o.Email())
	}
	if o.EmailVerifiedAt != nil {
		m.EmailVerifiedAt = omitnull.FromNull(o.EmailVerifiedAt())
	}
	if o.Name != nil {
		m.Name = omitnull.FromNull(o.Name())
	}
	if o.Image != nil {
		m.Image = omitnull.FromNull(o.Image())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildManySetter(number int) []*models.UserSetter {
	m := make([]*models.UserSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.User
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.Create
func (o UserTemplate) Build() *models.User {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.CreateMany
func (o UserTemplate) BuildMany(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUser(m *models.UserSetter) {
	if m.Email.IsUnset() {
		m.Email = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.User
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.User) (context.Context, error) {
	var err error

	if o.r.AiUsages != nil {
		for _, r := range o.r.AiUsages {
			var rel0 models.AiUsageSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachAiUsages(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.Media != nil {
		for _, r := range o.r.Media {
			var rel1 models.MediumSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachMedia(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.Notifications != nil {
		for _, r := range o.r.Notifications {
			var rel2 models.NotificationSlice
			ctx, rel2, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachNotifications(ctx, exec, rel2...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.IDStripeCustomer != nil {
		var rel3 *models.StripeCustomer
		ctx, rel3, err = o.r.IDStripeCustomer.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachIDStripeCustomer(ctx, exec, rel3)
		if err != nil {
			return ctx, err
		}
	}

	if o.r.StripeSubscriptions != nil {
		for _, r := range o.r.StripeSubscriptions {
			var rel4 models.StripeSubscriptionSlice
			ctx, rel4, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachStripeSubscriptions(ctx, exec, rel4...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.TaskProjects != nil {
		for _, r := range o.r.TaskProjects {
			var rel5 models.TaskProjectSlice
			ctx, rel5, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachTaskProjects(ctx, exec, rel5...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.Tasks != nil {
		for _, r := range o.r.Tasks {
			var rel6 models.TaskSlice
			ctx, rel6, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachTasks(ctx, exec, rel6...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.Tokens != nil {
		for _, r := range o.r.Tokens {
			var rel7 models.TokenSlice
			ctx, rel7, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachTokens(ctx, exec, rel7...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.UserAccounts != nil {
		for _, r := range o.r.UserAccounts {
			var rel8 models.UserAccountSlice
			ctx, rel8, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachUserAccounts(ctx, exec, rel8...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.Permissions != nil {
		for _, r := range o.r.Permissions {
			var rel9 models.PermissionSlice
			ctx, rel9, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachPermissions(ctx, exec, rel9...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.Roles != nil {
		for _, r := range o.r.Roles {
			var rel10 models.RoleSlice
			ctx, rel10, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachRoles(ctx, exec, rel10...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.UserSessions != nil {
		for _, r := range o.r.UserSessions {
			var rel11 models.UserSessionSlice
			ctx, rel11, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachUserSessions(ctx, exec, rel11...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserTemplate) Create(ctx context.Context, exec bob.Executor) (*models.User, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.User {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.User {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.User, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUser(opt)

	m, err := models.Users.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserSlice, error) {
	var err error
	m := make(models.UserSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// User has methods that act as mods for the UserTemplate
var UserMods userMods

type userMods struct{}

func (m userMods) RandomizeAllColumns(f *faker.Faker) UserMod {
	return UserModSlice{
		UserMods.RandomID(f),
		UserMods.RandomEmail(f),
		UserMods.RandomEmailVerifiedAt(f),
		UserMods.RandomName(f),
		UserMods.RandomImage(f),
		UserMods.RandomCreatedAt(f),
		UserMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m userMods) ID(val uuid.UUID) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m userMods) IDFunc(f func() uuid.UUID) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetID() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomID(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Email(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Email = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) EmailFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Email = f
	})
}

// Clear any values for the column
func (m userMods) UnsetEmail() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Email = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomEmail(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Email = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) EmailVerifiedAt(val null.Val[time.Time]) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.EmailVerifiedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m userMods) EmailVerifiedAtFunc(f func() null.Val[time.Time]) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.EmailVerifiedAt = f
	})
}

// Clear any values for the column
func (m userMods) UnsetEmailVerifiedAt() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.EmailVerifiedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomEmailVerifiedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.EmailVerifiedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

// Set the model columns to this value
func (m userMods) Name(val null.Val[string]) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Name = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userMods) NameFunc(f func() null.Val[string]) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m userMods) UnsetName() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomName(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Name = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m userMods) Image(val null.Val[string]) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Image = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userMods) ImageFunc(f func() null.Val[string]) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Image = f
	})
}

// Clear any values for the column
func (m userMods) UnsetImage() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Image = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomImage(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Image = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m userMods) CreatedAt(val time.Time) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userMods) CreatedAtFunc(f func() time.Time) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m userMods) UnsetCreatedAt() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomCreatedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) UpdatedAt(val time.Time) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userMods) UpdatedAtFunc(f func() time.Time) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUpdatedAt() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomUpdatedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m userMods) WithIDStripeCustomer(rel *StripeCustomerTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.IDStripeCustomer = &userRIDStripeCustomerR{
			o: rel,
		}
	})
}

func (m userMods) WithNewIDStripeCustomer(mods ...StripeCustomerMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewStripeCustomer(mods...)

		m.WithIDStripeCustomer(related).Apply(o)
	})
}

func (m userMods) WithoutIDStripeCustomer() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.IDStripeCustomer = nil
	})
}

func (m userMods) WithAiUsages(number int, related *AiUsageTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.AiUsages = []*userRAiUsagesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewAiUsages(number int, mods ...AiUsageMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewAiUsage(mods...)
		m.WithAiUsages(number, related).Apply(o)
	})
}

func (m userMods) AddAiUsages(number int, related *AiUsageTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.AiUsages = append(o.r.AiUsages, &userRAiUsagesR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewAiUsages(number int, mods ...AiUsageMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewAiUsage(mods...)
		m.AddAiUsages(number, related).Apply(o)
	})
}

func (m userMods) WithoutAiUsages() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.AiUsages = nil
	})
}

func (m userMods) WithMedia(number int, related *MediumTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Media = []*userRMediaR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewMedia(number int, mods ...MediumMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewMedium(mods...)
		m.WithMedia(number, related).Apply(o)
	})
}

func (m userMods) AddMedia(number int, related *MediumTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Media = append(o.r.Media, &userRMediaR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewMedia(number int, mods ...MediumMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewMedium(mods...)
		m.AddMedia(number, related).Apply(o)
	})
}

func (m userMods) WithoutMedia() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Media = nil
	})
}

func (m userMods) WithNotifications(number int, related *NotificationTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Notifications = []*userRNotificationsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewNotifications(number int, mods ...NotificationMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewNotification(mods...)
		m.WithNotifications(number, related).Apply(o)
	})
}

func (m userMods) AddNotifications(number int, related *NotificationTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Notifications = append(o.r.Notifications, &userRNotificationsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewNotifications(number int, mods ...NotificationMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewNotification(mods...)
		m.AddNotifications(number, related).Apply(o)
	})
}

func (m userMods) WithoutNotifications() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Notifications = nil
	})
}

func (m userMods) WithStripeSubscriptions(number int, related *StripeSubscriptionTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.StripeSubscriptions = []*userRStripeSubscriptionsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewStripeSubscriptions(number int, mods ...StripeSubscriptionMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewStripeSubscription(mods...)
		m.WithStripeSubscriptions(number, related).Apply(o)
	})
}

func (m userMods) AddStripeSubscriptions(number int, related *StripeSubscriptionTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.StripeSubscriptions = append(o.r.StripeSubscriptions, &userRStripeSubscriptionsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewStripeSubscriptions(number int, mods ...StripeSubscriptionMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewStripeSubscription(mods...)
		m.AddStripeSubscriptions(number, related).Apply(o)
	})
}

func (m userMods) WithoutStripeSubscriptions() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.StripeSubscriptions = nil
	})
}

func (m userMods) WithTaskProjects(number int, related *TaskProjectTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.TaskProjects = []*userRTaskProjectsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewTaskProjects(number int, mods ...TaskProjectMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewTaskProject(mods...)
		m.WithTaskProjects(number, related).Apply(o)
	})
}

func (m userMods) AddTaskProjects(number int, related *TaskProjectTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.TaskProjects = append(o.r.TaskProjects, &userRTaskProjectsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewTaskProjects(number int, mods ...TaskProjectMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewTaskProject(mods...)
		m.AddTaskProjects(number, related).Apply(o)
	})
}

func (m userMods) WithoutTaskProjects() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.TaskProjects = nil
	})
}

func (m userMods) WithTasks(number int, related *TaskTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Tasks = []*userRTasksR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewTasks(number int, mods ...TaskMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewTask(mods...)
		m.WithTasks(number, related).Apply(o)
	})
}

func (m userMods) AddTasks(number int, related *TaskTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Tasks = append(o.r.Tasks, &userRTasksR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewTasks(number int, mods ...TaskMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewTask(mods...)
		m.AddTasks(number, related).Apply(o)
	})
}

func (m userMods) WithoutTasks() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Tasks = nil
	})
}

func (m userMods) WithTokens(number int, related *TokenTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Tokens = []*userRTokensR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewTokens(number int, mods ...TokenMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewToken(mods...)
		m.WithTokens(number, related).Apply(o)
	})
}

func (m userMods) AddTokens(number int, related *TokenTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Tokens = append(o.r.Tokens, &userRTokensR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewTokens(number int, mods ...TokenMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewToken(mods...)
		m.AddTokens(number, related).Apply(o)
	})
}

func (m userMods) WithoutTokens() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Tokens = nil
	})
}

func (m userMods) WithUserAccounts(number int, related *UserAccountTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.UserAccounts = []*userRUserAccountsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewUserAccounts(number int, mods ...UserAccountMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewUserAccount(mods...)
		m.WithUserAccounts(number, related).Apply(o)
	})
}

func (m userMods) AddUserAccounts(number int, related *UserAccountTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.UserAccounts = append(o.r.UserAccounts, &userRUserAccountsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewUserAccounts(number int, mods ...UserAccountMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewUserAccount(mods...)
		m.AddUserAccounts(number, related).Apply(o)
	})
}

func (m userMods) WithoutUserAccounts() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.UserAccounts = nil
	})
}

func (m userMods) WithPermissions(number int, related *PermissionTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Permissions = []*userRPermissionsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewPermissions(number int, mods ...PermissionMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewPermission(mods...)
		m.WithPermissions(number, related).Apply(o)
	})
}

func (m userMods) AddPermissions(number int, related *PermissionTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Permissions = append(o.r.Permissions, &userRPermissionsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewPermissions(number int, mods ...PermissionMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewPermission(mods...)
		m.AddPermissions(number, related).Apply(o)
	})
}

func (m userMods) WithoutPermissions() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Permissions = nil
	})
}

func (m userMods) WithRoles(number int, related *RoleTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Roles = []*userRRolesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewRoles(number int, mods ...RoleMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewRole(mods...)
		m.WithRoles(number, related).Apply(o)
	})
}

func (m userMods) AddRoles(number int, related *RoleTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Roles = append(o.r.Roles, &userRRolesR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewRoles(number int, mods ...RoleMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewRole(mods...)
		m.AddRoles(number, related).Apply(o)
	})
}

func (m userMods) WithoutRoles() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Roles = nil
	})
}

func (m userMods) WithUserSessions(number int, related *UserSessionTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.UserSessions = []*userRUserSessionsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewUserSessions(number int, mods ...UserSessionMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewUserSession(mods...)
		m.WithUserSessions(number, related).Apply(o)
	})
}

func (m userMods) AddUserSessions(number int, related *UserSessionTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.UserSessions = append(o.r.UserSessions, &userRUserSessionsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewUserSessions(number int, mods ...UserSessionMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewUserSession(mods...)
		m.AddUserSessions(number, related).Apply(o)
	})
}

func (m userMods) WithoutUserSessions() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.UserSessions = nil
	})
}
