// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type AiUsageMod interface {
	Apply(*AiUsageTemplate)
}

type AiUsageModFunc func(*AiUsageTemplate)

func (f AiUsageModFunc) Apply(n *AiUsageTemplate) {
	f(n)
}

type AiUsageModSlice []AiUsageMod

func (mods AiUsageModSlice) Apply(n *AiUsageTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// AiUsageTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type AiUsageTemplate struct {
	ID               func() uuid.UUID
	UserID           func() uuid.UUID
	PromptTokens     func() int64
	CompletionTokens func() int64
	TotalTokens      func() int64
	CreatedAt        func() time.Time
	UpdatedAt        func() time.Time

	r aiUsageR
	f *Factory
}

type aiUsageR struct {
	User *aiUsageRUserR
}

type aiUsageRUserR struct {
	o *UserTemplate
}

// Apply mods to the AiUsageTemplate
func (o *AiUsageTemplate) Apply(mods ...AiUsageMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.AiUsage
// this does nothing with the relationship templates
func (o AiUsageTemplate) toModel() *models.AiUsage {
	m := &models.AiUsage{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.PromptTokens != nil {
		m.PromptTokens = o.PromptTokens()
	}
	if o.CompletionTokens != nil {
		m.CompletionTokens = o.CompletionTokens()
	}
	if o.TotalTokens != nil {
		m.TotalTokens = o.TotalTokens()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.AiUsageSlice
// this does nothing with the relationship templates
func (o AiUsageTemplate) toModels(number int) models.AiUsageSlice {
	m := make(models.AiUsageSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.AiUsage
// according to the relationships in the template. Nothing is inserted into the db
func (t AiUsageTemplate) setModelRels(o *models.AiUsage) {
	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		rel.R.AiUsages = append(rel.R.AiUsages, o)
		o.UserID = rel.ID
		o.R.User = rel
	}
}

// BuildSetter returns an *models.AiUsageSetter
// this does nothing with the relationship templates
func (o AiUsageTemplate) BuildSetter() *models.AiUsageSetter {
	m := &models.AiUsageSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.PromptTokens != nil {
		m.PromptTokens = omit.From(o.PromptTokens())
	}
	if o.CompletionTokens != nil {
		m.CompletionTokens = omit.From(o.CompletionTokens())
	}
	if o.TotalTokens != nil {
		m.TotalTokens = omit.From(o.TotalTokens())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.AiUsageSetter
// this does nothing with the relationship templates
func (o AiUsageTemplate) BuildManySetter(number int) []*models.AiUsageSetter {
	m := make([]*models.AiUsageSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.AiUsage
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AiUsageTemplate.Create
func (o AiUsageTemplate) Build() *models.AiUsage {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.AiUsageSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AiUsageTemplate.CreateMany
func (o AiUsageTemplate) BuildMany(number int) models.AiUsageSlice {
	m := make(models.AiUsageSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableAiUsage(m *models.AiUsageSetter) {
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random_uuid_UUID(nil))
	}
	if m.PromptTokens.IsUnset() {
		m.PromptTokens = omit.From(random_int64(nil))
	}
	if m.CompletionTokens.IsUnset() {
		m.CompletionTokens = omit.From(random_int64(nil))
	}
	if m.TotalTokens.IsUnset() {
		m.TotalTokens = omit.From(random_int64(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.AiUsage
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *AiUsageTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.AiUsage) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a aiUsage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *AiUsageTemplate) Create(ctx context.Context, exec bob.Executor) (*models.AiUsage, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a aiUsage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *AiUsageTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.AiUsage {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a aiUsage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *AiUsageTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.AiUsage {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a aiUsage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *AiUsageTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.AiUsage, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableAiUsage(opt)

	var rel0 *models.User
	if o.r.User == nil {
		var ok bool
		rel0, ok = userCtx.Value(ctx)
		if !ok {
			AiUsageMods.WithNewUser().Apply(o)
		}
	}
	if o.r.User != nil {
		ctx, rel0, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.UserID = omit.From(rel0.ID)

	m, err := models.AiUsages.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = aiUsageCtx.WithValue(ctx, m)

	m.R.User = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple aiUsages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o AiUsageTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.AiUsageSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple aiUsages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o AiUsageTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.AiUsageSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple aiUsages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o AiUsageTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.AiUsageSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple aiUsages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o AiUsageTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.AiUsageSlice, error) {
	var err error
	m := make(models.AiUsageSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// AiUsage has methods that act as mods for the AiUsageTemplate
var AiUsageMods aiUsageMods

type aiUsageMods struct{}

func (m aiUsageMods) RandomizeAllColumns(f *faker.Faker) AiUsageMod {
	return AiUsageModSlice{
		AiUsageMods.RandomID(f),
		AiUsageMods.RandomUserID(f),
		AiUsageMods.RandomPromptTokens(f),
		AiUsageMods.RandomCompletionTokens(f),
		AiUsageMods.RandomTotalTokens(f),
		AiUsageMods.RandomCreatedAt(f),
		AiUsageMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m aiUsageMods) ID(val uuid.UUID) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m aiUsageMods) IDFunc(f func() uuid.UUID) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m aiUsageMods) UnsetID() AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m aiUsageMods) RandomID(f *faker.Faker) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m aiUsageMods) UserID(val uuid.UUID) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.UserID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m aiUsageMods) UserIDFunc(f func() uuid.UUID) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m aiUsageMods) UnsetUserID() AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m aiUsageMods) RandomUserID(f *faker.Faker) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.UserID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m aiUsageMods) PromptTokens(val int64) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.PromptTokens = func() int64 { return val }
	})
}

// Set the Column from the function
func (m aiUsageMods) PromptTokensFunc(f func() int64) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.PromptTokens = f
	})
}

// Clear any values for the column
func (m aiUsageMods) UnsetPromptTokens() AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.PromptTokens = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m aiUsageMods) RandomPromptTokens(f *faker.Faker) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.PromptTokens = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m aiUsageMods) CompletionTokens(val int64) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.CompletionTokens = func() int64 { return val }
	})
}

// Set the Column from the function
func (m aiUsageMods) CompletionTokensFunc(f func() int64) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.CompletionTokens = f
	})
}

// Clear any values for the column
func (m aiUsageMods) UnsetCompletionTokens() AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.CompletionTokens = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m aiUsageMods) RandomCompletionTokens(f *faker.Faker) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.CompletionTokens = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m aiUsageMods) TotalTokens(val int64) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.TotalTokens = func() int64 { return val }
	})
}

// Set the Column from the function
func (m aiUsageMods) TotalTokensFunc(f func() int64) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.TotalTokens = f
	})
}

// Clear any values for the column
func (m aiUsageMods) UnsetTotalTokens() AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.TotalTokens = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m aiUsageMods) RandomTotalTokens(f *faker.Faker) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.TotalTokens = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m aiUsageMods) CreatedAt(val time.Time) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m aiUsageMods) CreatedAtFunc(f func() time.Time) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m aiUsageMods) UnsetCreatedAt() AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m aiUsageMods) RandomCreatedAt(f *faker.Faker) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m aiUsageMods) UpdatedAt(val time.Time) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m aiUsageMods) UpdatedAtFunc(f func() time.Time) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m aiUsageMods) UnsetUpdatedAt() AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m aiUsageMods) RandomUpdatedAt(f *faker.Faker) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m aiUsageMods) WithUser(rel *UserTemplate) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.r.User = &aiUsageRUserR{
			o: rel,
		}
	})
}

func (m aiUsageMods) WithNewUser(mods ...UserMod) AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m aiUsageMods) WithoutUser() AiUsageMod {
	return AiUsageModFunc(func(o *AiUsageTemplate) {
		o.r.User = nil
	})
}
