// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
	models "github.com/tkahng/authgo/internal/db/models"
)

type StripeSubscriptionMod interface {
	Apply(*StripeSubscriptionTemplate)
}

type StripeSubscriptionModFunc func(*StripeSubscriptionTemplate)

func (f StripeSubscriptionModFunc) Apply(n *StripeSubscriptionTemplate) {
	f(n)
}

type StripeSubscriptionModSlice []StripeSubscriptionMod

func (mods StripeSubscriptionModSlice) Apply(n *StripeSubscriptionTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// StripeSubscriptionTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type StripeSubscriptionTemplate struct {
	ID                 func() string
	UserID             func() uuid.UUID
	Status             func() StripeSubscriptionStatus
	Metadata           func() types.JSON[map[string]string]
	PriceID            func() string
	Quantity           func() int64
	CancelAtPeriodEnd  func() bool
	Created            func() time.Time
	CurrentPeriodStart func() time.Time
	CurrentPeriodEnd   func() time.Time
	EndedAt            func() null.Val[time.Time]
	CancelAt           func() null.Val[time.Time]
	CanceledAt         func() null.Val[time.Time]
	TrialStart         func() null.Val[time.Time]
	TrialEnd           func() null.Val[time.Time]
	CreatedAt          func() time.Time
	UpdatedAt          func() time.Time

	r stripeSubscriptionR
	f *Factory
}

type stripeSubscriptionR struct {
	PriceStripePrice *stripeSubscriptionRPriceStripePriceR
	User             *stripeSubscriptionRUserR
}

type stripeSubscriptionRPriceStripePriceR struct {
	o *StripePriceTemplate
}
type stripeSubscriptionRUserR struct {
	o *UserTemplate
}

// Apply mods to the StripeSubscriptionTemplate
func (o *StripeSubscriptionTemplate) Apply(mods ...StripeSubscriptionMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.StripeSubscription
// this does nothing with the relationship templates
func (o StripeSubscriptionTemplate) toModel() *models.StripeSubscription {
	m := &models.StripeSubscription{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.Status != nil {
		m.Status = o.Status()
	}
	if o.Metadata != nil {
		m.Metadata = o.Metadata()
	}
	if o.PriceID != nil {
		m.PriceID = o.PriceID()
	}
	if o.Quantity != nil {
		m.Quantity = o.Quantity()
	}
	if o.CancelAtPeriodEnd != nil {
		m.CancelAtPeriodEnd = o.CancelAtPeriodEnd()
	}
	if o.Created != nil {
		m.Created = o.Created()
	}
	if o.CurrentPeriodStart != nil {
		m.CurrentPeriodStart = o.CurrentPeriodStart()
	}
	if o.CurrentPeriodEnd != nil {
		m.CurrentPeriodEnd = o.CurrentPeriodEnd()
	}
	if o.EndedAt != nil {
		m.EndedAt = o.EndedAt()
	}
	if o.CancelAt != nil {
		m.CancelAt = o.CancelAt()
	}
	if o.CanceledAt != nil {
		m.CanceledAt = o.CanceledAt()
	}
	if o.TrialStart != nil {
		m.TrialStart = o.TrialStart()
	}
	if o.TrialEnd != nil {
		m.TrialEnd = o.TrialEnd()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.StripeSubscriptionSlice
// this does nothing with the relationship templates
func (o StripeSubscriptionTemplate) toModels(number int) models.StripeSubscriptionSlice {
	m := make(models.StripeSubscriptionSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.StripeSubscription
// according to the relationships in the template. Nothing is inserted into the db
func (t StripeSubscriptionTemplate) setModelRels(o *models.StripeSubscription) {
	if t.r.PriceStripePrice != nil {
		rel := t.r.PriceStripePrice.o.toModel()
		rel.R.PriceStripeSubscriptions = append(rel.R.PriceStripeSubscriptions, o)
		o.PriceID = rel.ID
		o.R.PriceStripePrice = rel
	}

	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		rel.R.StripeSubscriptions = append(rel.R.StripeSubscriptions, o)
		o.UserID = rel.ID
		o.R.User = rel
	}
}

// BuildSetter returns an *models.StripeSubscriptionSetter
// this does nothing with the relationship templates
func (o StripeSubscriptionTemplate) BuildSetter() *models.StripeSubscriptionSetter {
	m := &models.StripeSubscriptionSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.Status != nil {
		m.Status = omit.From(o.Status())
	}
	if o.Metadata != nil {
		m.Metadata = omit.From(o.Metadata())
	}
	if o.PriceID != nil {
		m.PriceID = omit.From(o.PriceID())
	}
	if o.Quantity != nil {
		m.Quantity = omit.From(o.Quantity())
	}
	if o.CancelAtPeriodEnd != nil {
		m.CancelAtPeriodEnd = omit.From(o.CancelAtPeriodEnd())
	}
	if o.Created != nil {
		m.Created = omit.From(o.Created())
	}
	if o.CurrentPeriodStart != nil {
		m.CurrentPeriodStart = omit.From(o.CurrentPeriodStart())
	}
	if o.CurrentPeriodEnd != nil {
		m.CurrentPeriodEnd = omit.From(o.CurrentPeriodEnd())
	}
	if o.EndedAt != nil {
		m.EndedAt = omitnull.FromNull(o.EndedAt())
	}
	if o.CancelAt != nil {
		m.CancelAt = omitnull.FromNull(o.CancelAt())
	}
	if o.CanceledAt != nil {
		m.CanceledAt = omitnull.FromNull(o.CanceledAt())
	}
	if o.TrialStart != nil {
		m.TrialStart = omitnull.FromNull(o.TrialStart())
	}
	if o.TrialEnd != nil {
		m.TrialEnd = omitnull.FromNull(o.TrialEnd())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.StripeSubscriptionSetter
// this does nothing with the relationship templates
func (o StripeSubscriptionTemplate) BuildManySetter(number int) []*models.StripeSubscriptionSetter {
	m := make([]*models.StripeSubscriptionSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.StripeSubscription
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use StripeSubscriptionTemplate.Create
func (o StripeSubscriptionTemplate) Build() *models.StripeSubscription {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.StripeSubscriptionSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use StripeSubscriptionTemplate.CreateMany
func (o StripeSubscriptionTemplate) BuildMany(number int) models.StripeSubscriptionSlice {
	m := make(models.StripeSubscriptionSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableStripeSubscription(m *models.StripeSubscriptionSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random_string(nil))
	}
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random_uuid_UUID(nil))
	}
	if m.Status.IsUnset() {
		m.Status = omit.From(random_StripeSubscriptionStatus(nil))
	}
	if m.Metadata.IsUnset() {
		m.Metadata = omit.From(random_types_JSON_map_string_string_(nil))
	}
	if m.PriceID.IsUnset() {
		m.PriceID = omit.From(random_string(nil))
	}
	if m.Quantity.IsUnset() {
		m.Quantity = omit.From(random_int64(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.StripeSubscription
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *StripeSubscriptionTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.StripeSubscription) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a stripeSubscription and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *StripeSubscriptionTemplate) Create(ctx context.Context, exec bob.Executor) (*models.StripeSubscription, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a stripeSubscription and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *StripeSubscriptionTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.StripeSubscription {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a stripeSubscription and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *StripeSubscriptionTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.StripeSubscription {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a stripeSubscription and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *StripeSubscriptionTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.StripeSubscription, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableStripeSubscription(opt)

	var rel0 *models.StripePrice
	if o.r.PriceStripePrice == nil {
		var ok bool
		rel0, ok = stripePriceCtx.Value(ctx)
		if !ok {
			StripeSubscriptionMods.WithNewPriceStripePrice().Apply(o)
		}
	}
	if o.r.PriceStripePrice != nil {
		ctx, rel0, err = o.r.PriceStripePrice.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.PriceID = omit.From(rel0.ID)

	var rel1 *models.User
	if o.r.User == nil {
		var ok bool
		rel1, ok = userCtx.Value(ctx)
		if !ok {
			StripeSubscriptionMods.WithNewUser().Apply(o)
		}
	}
	if o.r.User != nil {
		ctx, rel1, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.UserID = omit.From(rel1.ID)

	m, err := models.StripeSubscriptions.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = stripeSubscriptionCtx.WithValue(ctx, m)

	m.R.PriceStripePrice = rel0
	m.R.User = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple stripeSubscriptions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o StripeSubscriptionTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.StripeSubscriptionSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple stripeSubscriptions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o StripeSubscriptionTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.StripeSubscriptionSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple stripeSubscriptions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o StripeSubscriptionTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.StripeSubscriptionSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple stripeSubscriptions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o StripeSubscriptionTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.StripeSubscriptionSlice, error) {
	var err error
	m := make(models.StripeSubscriptionSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// StripeSubscription has methods that act as mods for the StripeSubscriptionTemplate
var StripeSubscriptionMods stripeSubscriptionMods

type stripeSubscriptionMods struct{}

func (m stripeSubscriptionMods) RandomizeAllColumns(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModSlice{
		StripeSubscriptionMods.RandomID(f),
		StripeSubscriptionMods.RandomUserID(f),
		StripeSubscriptionMods.RandomStatus(f),
		StripeSubscriptionMods.RandomMetadata(f),
		StripeSubscriptionMods.RandomPriceID(f),
		StripeSubscriptionMods.RandomQuantity(f),
		StripeSubscriptionMods.RandomCancelAtPeriodEnd(f),
		StripeSubscriptionMods.RandomCreated(f),
		StripeSubscriptionMods.RandomCurrentPeriodStart(f),
		StripeSubscriptionMods.RandomCurrentPeriodEnd(f),
		StripeSubscriptionMods.RandomEndedAt(f),
		StripeSubscriptionMods.RandomCancelAt(f),
		StripeSubscriptionMods.RandomCanceledAt(f),
		StripeSubscriptionMods.RandomTrialStart(f),
		StripeSubscriptionMods.RandomTrialEnd(f),
		StripeSubscriptionMods.RandomCreatedAt(f),
		StripeSubscriptionMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m stripeSubscriptionMods) ID(val string) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) IDFunc(f func() string) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetID() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomID(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.ID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) UserID(val uuid.UUID) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.UserID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) UserIDFunc(f func() uuid.UUID) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetUserID() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomUserID(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.UserID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) Status(val StripeSubscriptionStatus) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Status = func() StripeSubscriptionStatus { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) StatusFunc(f func() StripeSubscriptionStatus) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Status = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetStatus() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Status = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomStatus(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Status = func() StripeSubscriptionStatus {
			return random_StripeSubscriptionStatus(f)
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) Metadata(val types.JSON[map[string]string]) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Metadata = func() types.JSON[map[string]string] { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) MetadataFunc(f func() types.JSON[map[string]string]) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Metadata = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetMetadata() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Metadata = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomMetadata(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Metadata = func() types.JSON[map[string]string] {
			return random_types_JSON_map_string_string_(f)
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) PriceID(val string) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.PriceID = func() string { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) PriceIDFunc(f func() string) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.PriceID = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetPriceID() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.PriceID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomPriceID(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.PriceID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) Quantity(val int64) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Quantity = func() int64 { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) QuantityFunc(f func() int64) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Quantity = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetQuantity() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Quantity = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomQuantity(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Quantity = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) CancelAtPeriodEnd(val bool) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CancelAtPeriodEnd = func() bool { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) CancelAtPeriodEndFunc(f func() bool) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CancelAtPeriodEnd = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetCancelAtPeriodEnd() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CancelAtPeriodEnd = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomCancelAtPeriodEnd(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CancelAtPeriodEnd = func() bool {
			return random_bool(f)
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) Created(val time.Time) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Created = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) CreatedFunc(f func() time.Time) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Created = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetCreated() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Created = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomCreated(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.Created = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) CurrentPeriodStart(val time.Time) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CurrentPeriodStart = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) CurrentPeriodStartFunc(f func() time.Time) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CurrentPeriodStart = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetCurrentPeriodStart() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CurrentPeriodStart = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomCurrentPeriodStart(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CurrentPeriodStart = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) CurrentPeriodEnd(val time.Time) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CurrentPeriodEnd = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) CurrentPeriodEndFunc(f func() time.Time) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CurrentPeriodEnd = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetCurrentPeriodEnd() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CurrentPeriodEnd = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomCurrentPeriodEnd(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CurrentPeriodEnd = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) EndedAt(val null.Val[time.Time]) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.EndedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) EndedAtFunc(f func() null.Val[time.Time]) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.EndedAt = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetEndedAt() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.EndedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomEndedAt(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.EndedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) CancelAt(val null.Val[time.Time]) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CancelAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) CancelAtFunc(f func() null.Val[time.Time]) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CancelAt = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetCancelAt() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CancelAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomCancelAt(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CancelAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) CanceledAt(val null.Val[time.Time]) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CanceledAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) CanceledAtFunc(f func() null.Val[time.Time]) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CanceledAt = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetCanceledAt() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CanceledAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomCanceledAt(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CanceledAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) TrialStart(val null.Val[time.Time]) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.TrialStart = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) TrialStartFunc(f func() null.Val[time.Time]) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.TrialStart = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetTrialStart() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.TrialStart = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomTrialStart(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.TrialStart = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) TrialEnd(val null.Val[time.Time]) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.TrialEnd = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) TrialEndFunc(f func() null.Val[time.Time]) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.TrialEnd = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetTrialEnd() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.TrialEnd = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomTrialEnd(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.TrialEnd = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[time.Time](nil)
			}

			return null.From(random_time_Time(f))
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) CreatedAt(val time.Time) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) CreatedAtFunc(f func() time.Time) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetCreatedAt() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomCreatedAt(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m stripeSubscriptionMods) UpdatedAt(val time.Time) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m stripeSubscriptionMods) UpdatedAtFunc(f func() time.Time) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m stripeSubscriptionMods) UnsetUpdatedAt() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m stripeSubscriptionMods) RandomUpdatedAt(f *faker.Faker) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m stripeSubscriptionMods) WithPriceStripePrice(rel *StripePriceTemplate) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.r.PriceStripePrice = &stripeSubscriptionRPriceStripePriceR{
			o: rel,
		}
	})
}

func (m stripeSubscriptionMods) WithNewPriceStripePrice(mods ...StripePriceMod) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		related := o.f.NewStripePrice(mods...)

		m.WithPriceStripePrice(related).Apply(o)
	})
}

func (m stripeSubscriptionMods) WithoutPriceStripePrice() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.r.PriceStripePrice = nil
	})
}

func (m stripeSubscriptionMods) WithUser(rel *UserTemplate) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.r.User = &stripeSubscriptionRUserR{
			o: rel,
		}
	})
}

func (m stripeSubscriptionMods) WithNewUser(mods ...UserMod) StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m stripeSubscriptionMods) WithoutUser() StripeSubscriptionMod {
	return StripeSubscriptionModFunc(func(o *StripeSubscriptionTemplate) {
		o.r.User = nil
	})
}
