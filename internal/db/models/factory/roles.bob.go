// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/tkahng/authgo/internal/db/models"
)

type RoleMod interface {
	Apply(*RoleTemplate)
}

type RoleModFunc func(*RoleTemplate)

func (f RoleModFunc) Apply(n *RoleTemplate) {
	f(n)
}

type RoleModSlice []RoleMod

func (mods RoleModSlice) Apply(n *RoleTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// RoleTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type RoleTemplate struct {
	ID          func() uuid.UUID
	Name        func() string
	Description func() null.Val[string]
	CreatedAt   func() time.Time
	UpdatedAt   func() time.Time

	r roleR
	f *Factory
}

type roleR struct {
	StripeProducts []*roleRStripeProductsR
	Permissions    []*roleRPermissionsR
	Users          []*roleRUsersR
}

type roleRStripeProductsR struct {
	number int
	o      *StripeProductTemplate
}
type roleRPermissionsR struct {
	number int
	o      *PermissionTemplate
}
type roleRUsersR struct {
	number int
	o      *UserTemplate
}

// Apply mods to the RoleTemplate
func (o *RoleTemplate) Apply(mods ...RoleMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Role
// this does nothing with the relationship templates
func (o RoleTemplate) toModel() *models.Role {
	m := &models.Role{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.RoleSlice
// this does nothing with the relationship templates
func (o RoleTemplate) toModels(number int) models.RoleSlice {
	m := make(models.RoleSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Role
// according to the relationships in the template. Nothing is inserted into the db
func (t RoleTemplate) setModelRels(o *models.Role) {
	if t.r.StripeProducts != nil {
		rel := models.StripeProductSlice{}
		for _, r := range t.r.StripeProducts {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.R.Roles = append(rel.R.Roles, o)
			}
			rel = append(rel, related...)
		}
		o.R.StripeProducts = rel
	}

	if t.r.Permissions != nil {
		rel := models.PermissionSlice{}
		for _, r := range t.r.Permissions {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.R.Roles = append(rel.R.Roles, o)
			}
			rel = append(rel, related...)
		}
		o.R.Permissions = rel
	}

	if t.r.Users != nil {
		rel := models.UserSlice{}
		for _, r := range t.r.Users {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.R.Roles = append(rel.R.Roles, o)
			}
			rel = append(rel, related...)
		}
		o.R.Users = rel
	}
}

// BuildSetter returns an *models.RoleSetter
// this does nothing with the relationship templates
func (o RoleTemplate) BuildSetter() *models.RoleSetter {
	m := &models.RoleSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.Description != nil {
		m.Description = omitnull.FromNull(o.Description())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.RoleSetter
// this does nothing with the relationship templates
func (o RoleTemplate) BuildManySetter(number int) []*models.RoleSetter {
	m := make([]*models.RoleSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Role
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use RoleTemplate.Create
func (o RoleTemplate) Build() *models.Role {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.RoleSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use RoleTemplate.CreateMany
func (o RoleTemplate) BuildMany(number int) models.RoleSlice {
	m := make(models.RoleSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableRole(m *models.RoleSetter) {
	if m.Name.IsUnset() {
		m.Name = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Role
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *RoleTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Role) (context.Context, error) {
	var err error

	if o.r.StripeProducts != nil {
		for _, r := range o.r.StripeProducts {
			var rel0 models.StripeProductSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachStripeProducts(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.Permissions != nil {
		for _, r := range o.r.Permissions {
			var rel1 models.PermissionSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachPermissions(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.Users != nil {
		for _, r := range o.r.Users {
			var rel2 models.UserSlice
			ctx, rel2, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachUsers(ctx, exec, rel2...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a role and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *RoleTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Role, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a role and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *RoleTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Role {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a role and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *RoleTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Role {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a role and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *RoleTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Role, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableRole(opt)

	m, err := models.Roles.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = roleCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple roles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o RoleTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.RoleSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple roles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o RoleTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.RoleSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple roles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o RoleTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.RoleSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple roles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o RoleTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.RoleSlice, error) {
	var err error
	m := make(models.RoleSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Role has methods that act as mods for the RoleTemplate
var RoleMods roleMods

type roleMods struct{}

func (m roleMods) RandomizeAllColumns(f *faker.Faker) RoleMod {
	return RoleModSlice{
		RoleMods.RandomID(f),
		RoleMods.RandomName(f),
		RoleMods.RandomDescription(f),
		RoleMods.RandomCreatedAt(f),
		RoleMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m roleMods) ID(val uuid.UUID) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m roleMods) IDFunc(f func() uuid.UUID) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m roleMods) UnsetID() RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m roleMods) RandomID(f *faker.Faker) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m roleMods) Name(val string) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m roleMods) NameFunc(f func() string) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m roleMods) UnsetName() RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m roleMods) RandomName(f *faker.Faker) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m roleMods) Description(val null.Val[string]) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.Description = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m roleMods) DescriptionFunc(f func() null.Val[string]) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m roleMods) UnsetDescription() RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m roleMods) RandomDescription(f *faker.Faker) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m roleMods) CreatedAt(val time.Time) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m roleMods) CreatedAtFunc(f func() time.Time) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m roleMods) UnsetCreatedAt() RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m roleMods) RandomCreatedAt(f *faker.Faker) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m roleMods) UpdatedAt(val time.Time) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m roleMods) UpdatedAtFunc(f func() time.Time) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m roleMods) UnsetUpdatedAt() RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m roleMods) RandomUpdatedAt(f *faker.Faker) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m roleMods) WithStripeProducts(number int, related *StripeProductTemplate) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.r.StripeProducts = []*roleRStripeProductsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m roleMods) WithNewStripeProducts(number int, mods ...StripeProductMod) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		related := o.f.NewStripeProduct(mods...)
		m.WithStripeProducts(number, related).Apply(o)
	})
}

func (m roleMods) AddStripeProducts(number int, related *StripeProductTemplate) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.r.StripeProducts = append(o.r.StripeProducts, &roleRStripeProductsR{
			number: number,
			o:      related,
		})
	})
}

func (m roleMods) AddNewStripeProducts(number int, mods ...StripeProductMod) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		related := o.f.NewStripeProduct(mods...)
		m.AddStripeProducts(number, related).Apply(o)
	})
}

func (m roleMods) WithoutStripeProducts() RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.r.StripeProducts = nil
	})
}

func (m roleMods) WithPermissions(number int, related *PermissionTemplate) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.r.Permissions = []*roleRPermissionsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m roleMods) WithNewPermissions(number int, mods ...PermissionMod) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		related := o.f.NewPermission(mods...)
		m.WithPermissions(number, related).Apply(o)
	})
}

func (m roleMods) AddPermissions(number int, related *PermissionTemplate) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.r.Permissions = append(o.r.Permissions, &roleRPermissionsR{
			number: number,
			o:      related,
		})
	})
}

func (m roleMods) AddNewPermissions(number int, mods ...PermissionMod) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		related := o.f.NewPermission(mods...)
		m.AddPermissions(number, related).Apply(o)
	})
}

func (m roleMods) WithoutPermissions() RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.r.Permissions = nil
	})
}

func (m roleMods) WithUsers(number int, related *UserTemplate) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.r.Users = []*roleRUsersR{{
			number: number,
			o:      related,
		}}
	})
}

func (m roleMods) WithNewUsers(number int, mods ...UserMod) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		related := o.f.NewUser(mods...)
		m.WithUsers(number, related).Apply(o)
	})
}

func (m roleMods) AddUsers(number int, related *UserTemplate) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.r.Users = append(o.r.Users, &roleRUsersR{
			number: number,
			o:      related,
		})
	})
}

func (m roleMods) AddNewUsers(number int, mods ...UserMod) RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		related := o.f.NewUser(mods...)
		m.AddUsers(number, related).Apply(o)
	})
}

func (m roleMods) WithoutUsers() RoleMod {
	return RoleModFunc(func(o *RoleTemplate) {
		o.r.Users = nil
	})
}
