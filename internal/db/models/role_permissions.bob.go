// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// RolePermission is an object representing the database table.
type RolePermission struct {
	RoleID       uuid.UUID `db:"role_id,pk" json:"role_id"`
	PermissionID uuid.UUID `db:"permission_id,pk" json:"permission_id"`

	R rolePermissionR `db:"-" json:"-"`
}

// RolePermissionSlice is an alias for a slice of pointers to RolePermission.
// This should almost always be used instead of []*RolePermission.
type RolePermissionSlice []*RolePermission

// RolePermissions contains methods to work with the role_permissions table
var RolePermissions = psql.NewTablex[*RolePermission, RolePermissionSlice, *RolePermissionSetter]("", "role_permissions")

// RolePermissionsQuery is a query on the role_permissions table
type RolePermissionsQuery = *psql.ViewQuery[*RolePermission, RolePermissionSlice]

// rolePermissionR is where relationships are stored.
type rolePermissionR struct {
	Permission *Permission `json:"Permission"` // role_permissions.role_permissions_permission_id_fkey
	Role       *Role       `json:"Role"`       // role_permissions.role_permissions_role_id_fkey
}

type rolePermissionColumnNames struct {
	RoleID       string
	PermissionID string
}

var RolePermissionColumns = buildRolePermissionColumns("role_permissions")

type rolePermissionColumns struct {
	tableAlias   string
	RoleID       psql.Expression
	PermissionID psql.Expression
}

func (c rolePermissionColumns) Alias() string {
	return c.tableAlias
}

func (rolePermissionColumns) AliasedAs(alias string) rolePermissionColumns {
	return buildRolePermissionColumns(alias)
}

func buildRolePermissionColumns(alias string) rolePermissionColumns {
	return rolePermissionColumns{
		tableAlias:   alias,
		RoleID:       psql.Quote(alias, "role_id"),
		PermissionID: psql.Quote(alias, "permission_id"),
	}
}

type rolePermissionWhere[Q psql.Filterable] struct {
	RoleID       psql.WhereMod[Q, uuid.UUID]
	PermissionID psql.WhereMod[Q, uuid.UUID]
}

func (rolePermissionWhere[Q]) AliasedAs(alias string) rolePermissionWhere[Q] {
	return buildRolePermissionWhere[Q](buildRolePermissionColumns(alias))
}

func buildRolePermissionWhere[Q psql.Filterable](cols rolePermissionColumns) rolePermissionWhere[Q] {
	return rolePermissionWhere[Q]{
		RoleID:       psql.Where[Q, uuid.UUID](cols.RoleID),
		PermissionID: psql.Where[Q, uuid.UUID](cols.PermissionID),
	}
}

var RolePermissionErrors = &rolePermissionErrors{
	ErrUniqueRolePermissionsPkey: &UniqueConstraintError{s: "role_permissions_pkey"},
}

type rolePermissionErrors struct {
	ErrUniqueRolePermissionsPkey *UniqueConstraintError
}

// RolePermissionSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type RolePermissionSetter struct {
	RoleID       omit.Val[uuid.UUID] `db:"role_id,pk" json:"role_id"`
	PermissionID omit.Val[uuid.UUID] `db:"permission_id,pk" json:"permission_id"`
}

func (s RolePermissionSetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if !s.RoleID.IsUnset() {
		vals = append(vals, "role_id")
	}

	if !s.PermissionID.IsUnset() {
		vals = append(vals, "permission_id")
	}

	return vals
}

func (s RolePermissionSetter) Overwrite(t *RolePermission) {
	if !s.RoleID.IsUnset() {
		t.RoleID, _ = s.RoleID.Get()
	}
	if !s.PermissionID.IsUnset() {
		t.PermissionID, _ = s.PermissionID.Get()
	}
}

func (s *RolePermissionSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return RolePermissions.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 2)
		if s.RoleID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.RoleID)
		}

		if s.PermissionID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.PermissionID)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s RolePermissionSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s RolePermissionSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if !s.RoleID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "role_id")...),
			psql.Arg(s.RoleID),
		}})
	}

	if !s.PermissionID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "permission_id")...),
			psql.Arg(s.PermissionID),
		}})
	}

	return exprs
}

// FindRolePermission retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindRolePermission(ctx context.Context, exec bob.Executor, RoleIDPK uuid.UUID, PermissionIDPK uuid.UUID, cols ...string) (*RolePermission, error) {
	if len(cols) == 0 {
		return RolePermissions.Query(
			SelectWhere.RolePermissions.RoleID.EQ(RoleIDPK),
			SelectWhere.RolePermissions.PermissionID.EQ(PermissionIDPK),
		).One(ctx, exec)
	}

	return RolePermissions.Query(
		SelectWhere.RolePermissions.RoleID.EQ(RoleIDPK),
		SelectWhere.RolePermissions.PermissionID.EQ(PermissionIDPK),
		sm.Columns(RolePermissions.Columns().Only(cols...)),
	).One(ctx, exec)
}

// RolePermissionExists checks the presence of a single record by primary key
func RolePermissionExists(ctx context.Context, exec bob.Executor, RoleIDPK uuid.UUID, PermissionIDPK uuid.UUID) (bool, error) {
	return RolePermissions.Query(
		SelectWhere.RolePermissions.RoleID.EQ(RoleIDPK),
		SelectWhere.RolePermissions.PermissionID.EQ(PermissionIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after RolePermission is retrieved from the database
func (o *RolePermission) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = RolePermissions.AfterSelectHooks.RunHooks(ctx, exec, RolePermissionSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = RolePermissions.AfterInsertHooks.RunHooks(ctx, exec, RolePermissionSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = RolePermissions.AfterUpdateHooks.RunHooks(ctx, exec, RolePermissionSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = RolePermissions.AfterDeleteHooks.RunHooks(ctx, exec, RolePermissionSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the RolePermission
func (o *RolePermission) PrimaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.RoleID,
		o.PermissionID,
	)
}

func (o *RolePermission) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("role_permissions", "role_id"), psql.Quote("role_permissions", "permission_id")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the RolePermission
func (o *RolePermission) Update(ctx context.Context, exec bob.Executor, s *RolePermissionSetter) error {
	v, err := RolePermissions.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single RolePermission record with an executor
func (o *RolePermission) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := RolePermissions.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the RolePermission using the executor
func (o *RolePermission) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := RolePermissions.Query(
		SelectWhere.RolePermissions.RoleID.EQ(o.RoleID),
		SelectWhere.RolePermissions.PermissionID.EQ(o.PermissionID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after RolePermissionSlice is retrieved from the database
func (o RolePermissionSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = RolePermissions.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = RolePermissions.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = RolePermissions.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = RolePermissions.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o RolePermissionSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("role_permissions", "role_id"), psql.Quote("role_permissions", "permission_id")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o RolePermissionSlice) copyMatchingRows(from ...*RolePermission) {
	for i, old := range o {
		for _, new := range from {
			if new.RoleID != old.RoleID {
				continue
			}
			if new.PermissionID != old.PermissionID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o RolePermissionSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return RolePermissions.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *RolePermission:
				o.copyMatchingRows(retrieved)
			case []*RolePermission:
				o.copyMatchingRows(retrieved...)
			case RolePermissionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a RolePermission or a slice of RolePermission
				// then run the AfterUpdateHooks on the slice
				_, err = RolePermissions.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o RolePermissionSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return RolePermissions.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *RolePermission:
				o.copyMatchingRows(retrieved)
			case []*RolePermission:
				o.copyMatchingRows(retrieved...)
			case RolePermissionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a RolePermission or a slice of RolePermission
				// then run the AfterDeleteHooks on the slice
				_, err = RolePermissions.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o RolePermissionSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals RolePermissionSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := RolePermissions.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o RolePermissionSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := RolePermissions.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o RolePermissionSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := RolePermissions.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type rolePermissionJoins[Q dialect.Joinable] struct {
	typ        string
	Permission func(context.Context) modAs[Q, permissionColumns]
	Role       func(context.Context) modAs[Q, roleColumns]
}

func (j rolePermissionJoins[Q]) aliasedAs(alias string) rolePermissionJoins[Q] {
	return buildRolePermissionJoins[Q](buildRolePermissionColumns(alias), j.typ)
}

func buildRolePermissionJoins[Q dialect.Joinable](cols rolePermissionColumns, typ string) rolePermissionJoins[Q] {
	return rolePermissionJoins[Q]{
		typ:        typ,
		Permission: rolePermissionsJoinPermission[Q](cols, typ),
		Role:       rolePermissionsJoinRole[Q](cols, typ),
	}
}

func rolePermissionsJoinPermission[Q dialect.Joinable](from rolePermissionColumns, typ string) func(context.Context) modAs[Q, permissionColumns] {
	return func(ctx context.Context) modAs[Q, permissionColumns] {
		return modAs[Q, permissionColumns]{
			c: PermissionColumns,
			f: func(to permissionColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Permissions.Name().As(to.Alias())).On(
						to.ID.EQ(from.PermissionID),
					))
				}

				return mods
			},
		}
	}
}

func rolePermissionsJoinRole[Q dialect.Joinable](from rolePermissionColumns, typ string) func(context.Context) modAs[Q, roleColumns] {
	return func(ctx context.Context) modAs[Q, roleColumns] {
		return modAs[Q, roleColumns]{
			c: RoleColumns,
			f: func(to roleColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Roles.Name().As(to.Alias())).On(
						to.ID.EQ(from.RoleID),
					))
				}

				return mods
			},
		}
	}
}

// Permission starts a query for related objects on permissions
func (o *RolePermission) Permission(mods ...bob.Mod[*dialect.SelectQuery]) PermissionsQuery {
	return Permissions.Query(append(mods,
		sm.Where(PermissionColumns.ID.EQ(psql.Arg(o.PermissionID))),
	)...)
}

func (os RolePermissionSlice) Permission(mods ...bob.Mod[*dialect.SelectQuery]) PermissionsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.PermissionID)
	}

	return Permissions.Query(append(mods,
		sm.Where(psql.Group(PermissionColumns.ID).In(PKArgs...)),
	)...)
}

// Role starts a query for related objects on roles
func (o *RolePermission) Role(mods ...bob.Mod[*dialect.SelectQuery]) RolesQuery {
	return Roles.Query(append(mods,
		sm.Where(RoleColumns.ID.EQ(psql.Arg(o.RoleID))),
	)...)
}

func (os RolePermissionSlice) Role(mods ...bob.Mod[*dialect.SelectQuery]) RolesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.RoleID)
	}

	return Roles.Query(append(mods,
		sm.Where(psql.Group(RoleColumns.ID).In(PKArgs...)),
	)...)
}

func (o *RolePermission) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Permission":
		rel, ok := retrieved.(*Permission)
		if !ok {
			return fmt.Errorf("rolePermission cannot load %T as %q", retrieved, name)
		}

		o.R.Permission = rel

		return nil
	case "Role":
		rel, ok := retrieved.(*Role)
		if !ok {
			return fmt.Errorf("rolePermission cannot load %T as %q", retrieved, name)
		}

		o.R.Role = rel

		return nil
	default:
		return fmt.Errorf("rolePermission has no relationship %q", name)
	}
}

func PreloadRolePermissionPermission(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Permission, PermissionSlice](orm.Relationship{
		Name: "Permission",
		Sides: []orm.RelSide{
			{
				From: TableNames.RolePermissions,
				To:   TableNames.Permissions,
				FromColumns: []string{
					ColumnNames.RolePermissions.PermissionID,
				},
				ToColumns: []string{
					ColumnNames.Permissions.ID,
				},
			},
		},
	}, Permissions.Columns().Names(), opts...)
}

func ThenLoadRolePermissionPermission(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadRolePermissionPermission(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load RolePermissionPermission", retrieved)
		}

		err := loader.LoadRolePermissionPermission(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadRolePermissionPermission loads the rolePermission's Permission into the .R struct
func (o *RolePermission) LoadRolePermissionPermission(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Permission = nil

	related, err := o.Permission(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R.Permission = related
	return nil
}

// LoadRolePermissionPermission loads the rolePermission's Permission into the .R struct
func (os RolePermissionSlice) LoadRolePermissionPermission(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	permissions, err := os.Permission(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range permissions {
			if o.PermissionID != rel.ID {
				continue
			}

			o.R.Permission = rel
			break
		}
	}

	return nil
}

func PreloadRolePermissionRole(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Role, RoleSlice](orm.Relationship{
		Name: "Role",
		Sides: []orm.RelSide{
			{
				From: TableNames.RolePermissions,
				To:   TableNames.Roles,
				FromColumns: []string{
					ColumnNames.RolePermissions.RoleID,
				},
				ToColumns: []string{
					ColumnNames.Roles.ID,
				},
			},
		},
	}, Roles.Columns().Names(), opts...)
}

func ThenLoadRolePermissionRole(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadRolePermissionRole(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load RolePermissionRole", retrieved)
		}

		err := loader.LoadRolePermissionRole(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadRolePermissionRole loads the rolePermission's Role into the .R struct
func (o *RolePermission) LoadRolePermissionRole(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Role = nil

	related, err := o.Role(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R.Role = related
	return nil
}

// LoadRolePermissionRole loads the rolePermission's Role into the .R struct
func (os RolePermissionSlice) LoadRolePermissionRole(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	roles, err := os.Role(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range roles {
			if o.RoleID != rel.ID {
				continue
			}

			o.R.Role = rel
			break
		}
	}

	return nil
}

func attachRolePermissionPermission0(ctx context.Context, exec bob.Executor, count int, rolePermission0 *RolePermission, permission1 *Permission) (*RolePermission, error) {
	setter := &RolePermissionSetter{
		PermissionID: omit.From(permission1.ID),
	}

	err := rolePermission0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachRolePermissionPermission0: %w", err)
	}

	return rolePermission0, nil
}

func (rolePermission0 *RolePermission) InsertPermission(ctx context.Context, exec bob.Executor, related *PermissionSetter) error {
	permission1, err := Permissions.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachRolePermissionPermission0(ctx, exec, 1, rolePermission0, permission1)
	if err != nil {
		return err
	}

	rolePermission0.R.Permission = permission1

	return nil
}

func (rolePermission0 *RolePermission) AttachPermission(ctx context.Context, exec bob.Executor, permission1 *Permission) error {
	var err error

	_, err = attachRolePermissionPermission0(ctx, exec, 1, rolePermission0, permission1)
	if err != nil {
		return err
	}

	rolePermission0.R.Permission = permission1

	return nil
}

func attachRolePermissionRole0(ctx context.Context, exec bob.Executor, count int, rolePermission0 *RolePermission, role1 *Role) (*RolePermission, error) {
	setter := &RolePermissionSetter{
		RoleID: omit.From(role1.ID),
	}

	err := rolePermission0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachRolePermissionRole0: %w", err)
	}

	return rolePermission0, nil
}

func (rolePermission0 *RolePermission) InsertRole(ctx context.Context, exec bob.Executor, related *RoleSetter) error {
	role1, err := Roles.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachRolePermissionRole0(ctx, exec, 1, rolePermission0, role1)
	if err != nil {
		return err
	}

	rolePermission0.R.Role = role1

	return nil
}

func (rolePermission0 *RolePermission) AttachRole(ctx context.Context, exec bob.Executor, role1 *Role) error {
	var err error

	_, err = attachRolePermissionRole0(ctx, exec, 1, rolePermission0, role1)
	if err != nil {
		return err
	}

	rolePermission0.R.Role = role1

	return nil
}
