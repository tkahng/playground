// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"hash/maphash"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
)

var TableNames = struct {
	AppParams           string
	Permissions         string
	RolePermissions     string
	Roles               string
	SchemaMigrations    string
	StripeCustomers     string
	StripePrices        string
	StripeProducts      string
	StripeSubscriptions string
	StripeWebhookEvents string
	Tokens              string
	UserAccounts        string
	UserPermissions     string
	UserRoles           string
	UserSessions        string
	Users               string
}{
	AppParams:           "app_params",
	Permissions:         "permissions",
	RolePermissions:     "role_permissions",
	Roles:               "roles",
	SchemaMigrations:    "schema_migrations",
	StripeCustomers:     "stripe_customers",
	StripePrices:        "stripe_prices",
	StripeProducts:      "stripe_products",
	StripeSubscriptions: "stripe_subscriptions",
	StripeWebhookEvents: "stripe_webhook_events",
	Tokens:              "tokens",
	UserAccounts:        "user_accounts",
	UserPermissions:     "user_permissions",
	UserRoles:           "user_roles",
	UserSessions:        "user_sessions",
	Users:               "users",
}

var ColumnNames = struct {
	AppParams           appParamColumnNames
	Permissions         permissionColumnNames
	RolePermissions     rolePermissionColumnNames
	Roles               roleColumnNames
	SchemaMigrations    schemaMigrationColumnNames
	StripeCustomers     stripeCustomerColumnNames
	StripePrices        stripePriceColumnNames
	StripeProducts      stripeProductColumnNames
	StripeSubscriptions stripeSubscriptionColumnNames
	StripeWebhookEvents stripeWebhookEventColumnNames
	Tokens              tokenColumnNames
	UserAccounts        userAccountColumnNames
	UserPermissions     userPermissionColumnNames
	UserRoles           userRoleColumnNames
	UserSessions        userSessionColumnNames
	Users               userColumnNames
}{
	AppParams: appParamColumnNames{
		ID:        "id",
		Name:      "name",
		Value:     "value",
		CreatedAt: "created_at",
		UpdatedAt: "updated_at",
	},
	Permissions: permissionColumnNames{
		ID:          "id",
		Name:        "name",
		Description: "description",
		CreatedAt:   "created_at",
		UpdatedAt:   "updated_at",
	},
	RolePermissions: rolePermissionColumnNames{
		RoleID:       "role_id",
		PermissionID: "permission_id",
	},
	Roles: roleColumnNames{
		ID:          "id",
		Name:        "name",
		Description: "description",
		CreatedAt:   "created_at",
		UpdatedAt:   "updated_at",
	},
	SchemaMigrations: schemaMigrationColumnNames{
		Version: "version",
	},
	StripeCustomers: stripeCustomerColumnNames{
		ID:             "id",
		StripeID:       "stripe_id",
		BillingAddress: "billing_address",
		PaymentMethod:  "payment_method",
		CreatedAt:      "created_at",
		UpdatedAt:      "updated_at",
	},
	StripePrices: stripePriceColumnNames{
		ID:              "id",
		ProductID:       "product_id",
		LookupKey:       "lookup_key",
		Active:          "active",
		Description:     "description",
		UnitAmount:      "unit_amount",
		Currency:        "currency",
		Type:            "type",
		Interval:        "interval",
		IntervalCount:   "interval_count",
		TrialPeriodDays: "trial_period_days",
		Metadata:        "metadata",
		CreatedAt:       "created_at",
		UpdatedAt:       "updated_at",
	},
	StripeProducts: stripeProductColumnNames{
		ID:          "id",
		Active:      "active",
		Name:        "name",
		Description: "description",
		Image:       "image",
		Metadata:    "metadata",
		CreatedAt:   "created_at",
		UpdatedAt:   "updated_at",
	},
	StripeSubscriptions: stripeSubscriptionColumnNames{
		ID:                 "id",
		UserID:             "user_id",
		Status:             "status",
		Metadata:           "metadata",
		PriceID:            "price_id",
		Quantity:           "quantity",
		CancelAtPeriodEnd:  "cancel_at_period_end",
		Created:            "created",
		CurrentPeriodStart: "current_period_start",
		CurrentPeriodEnd:   "current_period_end",
		EndedAt:            "ended_at",
		CancelAt:           "cancel_at",
		CanceledAt:         "canceled_at",
		TrialStart:         "trial_start",
		TrialEnd:           "trial_end",
		CreatedAt:          "created_at",
		UpdatedAt:          "updated_at",
	},
	StripeWebhookEvents: stripeWebhookEventColumnNames{
		ID:                "id",
		Type:              "type",
		ObjectType:        "object_type",
		ObjectStripeID:    "object_stripe_id",
		EventCreationDate: "event_creation_date",
		RequestID:         "request_id",
		CreatedAt:         "created_at",
		UpdatedAt:         "updated_at",
	},
	Tokens: tokenColumnNames{
		ID:         "id",
		Type:       "type",
		UserID:     "user_id",
		Otp:        "otp",
		Identifier: "identifier",
		Expires:    "expires",
		Token:      "token",
		CreatedAt:  "created_at",
		UpdatedAt:  "updated_at",
	},
	UserAccounts: userAccountColumnNames{
		ID:                "id",
		UserID:            "user_id",
		Type:              "type",
		Provider:          "provider",
		ProviderAccountID: "provider_account_id",
		Password:          "password",
		RefreshToken:      "refresh_token",
		AccessToken:       "access_token",
		ExpiresAt:         "expires_at",
		IDToken:           "id_token",
		Scope:             "scope",
		SessionState:      "session_state",
		TokenType:         "token_type",
		CreatedAt:         "created_at",
		UpdatedAt:         "updated_at",
	},
	UserPermissions: userPermissionColumnNames{
		UserID:       "user_id",
		PermissionID: "permission_id",
	},
	UserRoles: userRoleColumnNames{
		UserID: "user_id",
		RoleID: "role_id",
	},
	UserSessions: userSessionColumnNames{
		ID:           "id",
		UserID:       "user_id",
		Expires:      "expires",
		SessionToken: "session_token",
		CreatedAt:    "created_at",
		UpdatedAt:    "updated_at",
	},
	Users: userColumnNames{
		ID:              "id",
		Email:           "email",
		EmailVerifiedAt: "email_verified_at",
		Name:            "name",
		Image:           "image",
		CreatedAt:       "created_at",
		UpdatedAt:       "updated_at",
	},
}

var (
	SelectWhere = Where[*dialect.SelectQuery]()
	InsertWhere = Where[*dialect.InsertQuery]()
	UpdateWhere = Where[*dialect.UpdateQuery]()
	DeleteWhere = Where[*dialect.DeleteQuery]()
)

func Where[Q psql.Filterable]() struct {
	AppParams           appParamWhere[Q]
	Permissions         permissionWhere[Q]
	RolePermissions     rolePermissionWhere[Q]
	Roles               roleWhere[Q]
	SchemaMigrations    schemaMigrationWhere[Q]
	StripeCustomers     stripeCustomerWhere[Q]
	StripePrices        stripePriceWhere[Q]
	StripeProducts      stripeProductWhere[Q]
	StripeSubscriptions stripeSubscriptionWhere[Q]
	StripeWebhookEvents stripeWebhookEventWhere[Q]
	Tokens              tokenWhere[Q]
	UserAccounts        userAccountWhere[Q]
	UserPermissions     userPermissionWhere[Q]
	UserRoles           userRoleWhere[Q]
	UserSessions        userSessionWhere[Q]
	Users               userWhere[Q]
} {
	return struct {
		AppParams           appParamWhere[Q]
		Permissions         permissionWhere[Q]
		RolePermissions     rolePermissionWhere[Q]
		Roles               roleWhere[Q]
		SchemaMigrations    schemaMigrationWhere[Q]
		StripeCustomers     stripeCustomerWhere[Q]
		StripePrices        stripePriceWhere[Q]
		StripeProducts      stripeProductWhere[Q]
		StripeSubscriptions stripeSubscriptionWhere[Q]
		StripeWebhookEvents stripeWebhookEventWhere[Q]
		Tokens              tokenWhere[Q]
		UserAccounts        userAccountWhere[Q]
		UserPermissions     userPermissionWhere[Q]
		UserRoles           userRoleWhere[Q]
		UserSessions        userSessionWhere[Q]
		Users               userWhere[Q]
	}{
		AppParams:           buildAppParamWhere[Q](AppParamColumns),
		Permissions:         buildPermissionWhere[Q](PermissionColumns),
		RolePermissions:     buildRolePermissionWhere[Q](RolePermissionColumns),
		Roles:               buildRoleWhere[Q](RoleColumns),
		SchemaMigrations:    buildSchemaMigrationWhere[Q](SchemaMigrationColumns),
		StripeCustomers:     buildStripeCustomerWhere[Q](StripeCustomerColumns),
		StripePrices:        buildStripePriceWhere[Q](StripePriceColumns),
		StripeProducts:      buildStripeProductWhere[Q](StripeProductColumns),
		StripeSubscriptions: buildStripeSubscriptionWhere[Q](StripeSubscriptionColumns),
		StripeWebhookEvents: buildStripeWebhookEventWhere[Q](StripeWebhookEventColumns),
		Tokens:              buildTokenWhere[Q](TokenColumns),
		UserAccounts:        buildUserAccountWhere[Q](UserAccountColumns),
		UserPermissions:     buildUserPermissionWhere[Q](UserPermissionColumns),
		UserRoles:           buildUserRoleWhere[Q](UserRoleColumns),
		UserSessions:        buildUserSessionWhere[Q](UserSessionColumns),
		Users:               buildUserWhere[Q](UserColumns),
	}
}

var (
	SelectJoins = getJoins[*dialect.SelectQuery]()
	UpdateJoins = getJoins[*dialect.UpdateQuery]()
	DeleteJoins = getJoins[*dialect.DeleteQuery]()
)

type joinSet[Q interface{ aliasedAs(string) Q }] struct {
	InnerJoin Q
	LeftJoin  Q
	RightJoin Q
}

func (j joinSet[Q]) AliasedAs(alias string) joinSet[Q] {
	return joinSet[Q]{
		InnerJoin: j.InnerJoin.aliasedAs(alias),
		LeftJoin:  j.LeftJoin.aliasedAs(alias),
		RightJoin: j.RightJoin.aliasedAs(alias),
	}
}

type joins[Q dialect.Joinable] struct {
	Permissions         joinSet[permissionJoins[Q]]
	RolePermissions     joinSet[rolePermissionJoins[Q]]
	Roles               joinSet[roleJoins[Q]]
	StripeCustomers     joinSet[stripeCustomerJoins[Q]]
	StripePrices        joinSet[stripePriceJoins[Q]]
	StripeProducts      joinSet[stripeProductJoins[Q]]
	StripeSubscriptions joinSet[stripeSubscriptionJoins[Q]]
	Tokens              joinSet[tokenJoins[Q]]
	UserAccounts        joinSet[userAccountJoins[Q]]
	UserPermissions     joinSet[userPermissionJoins[Q]]
	UserRoles           joinSet[userRoleJoins[Q]]
	UserSessions        joinSet[userSessionJoins[Q]]
	Users               joinSet[userJoins[Q]]
}

func buildJoinSet[Q interface{ aliasedAs(string) Q }, C any, F func(C, string) Q](c C, f F) joinSet[Q] {
	return joinSet[Q]{
		InnerJoin: f(c, clause.InnerJoin),
		LeftJoin:  f(c, clause.LeftJoin),
		RightJoin: f(c, clause.RightJoin),
	}
}

func getJoins[Q dialect.Joinable]() joins[Q] {
	return joins[Q]{
		Permissions:         buildJoinSet[permissionJoins[Q]](PermissionColumns, buildPermissionJoins),
		RolePermissions:     buildJoinSet[rolePermissionJoins[Q]](RolePermissionColumns, buildRolePermissionJoins),
		Roles:               buildJoinSet[roleJoins[Q]](RoleColumns, buildRoleJoins),
		StripeCustomers:     buildJoinSet[stripeCustomerJoins[Q]](StripeCustomerColumns, buildStripeCustomerJoins),
		StripePrices:        buildJoinSet[stripePriceJoins[Q]](StripePriceColumns, buildStripePriceJoins),
		StripeProducts:      buildJoinSet[stripeProductJoins[Q]](StripeProductColumns, buildStripeProductJoins),
		StripeSubscriptions: buildJoinSet[stripeSubscriptionJoins[Q]](StripeSubscriptionColumns, buildStripeSubscriptionJoins),
		Tokens:              buildJoinSet[tokenJoins[Q]](TokenColumns, buildTokenJoins),
		UserAccounts:        buildJoinSet[userAccountJoins[Q]](UserAccountColumns, buildUserAccountJoins),
		UserPermissions:     buildJoinSet[userPermissionJoins[Q]](UserPermissionColumns, buildUserPermissionJoins),
		UserRoles:           buildJoinSet[userRoleJoins[Q]](UserRoleColumns, buildUserRoleJoins),
		UserSessions:        buildJoinSet[userSessionJoins[Q]](UserSessionColumns, buildUserSessionJoins),
		Users:               buildJoinSet[userJoins[Q]](UserColumns, buildUserJoins),
	}
}

type modAs[Q any, C interface{ AliasedAs(string) C }] struct {
	c C
	f func(C) bob.Mod[Q]
}

func (m modAs[Q, C]) Apply(q Q) {
	m.f(m.c).Apply(q)
}

func (m modAs[Q, C]) AliasedAs(alias string) bob.Mod[Q] {
	m.c = m.c.AliasedAs(alias)
	return m
}

func randInt() int64 {
	out := int64(new(maphash.Hash).Sum64())

	if out < 0 {
		return -out % 10000
	}

	return out % 10000
}

// ErrUniqueConstraint captures all unique constraint errors by explicitly leaving `s` empty.
var ErrUniqueConstraint = &UniqueConstraintError{s: ""}

type UniqueConstraintError struct {
	// s is a string uniquely identifying the constraint in the raw error message returned from the database.
	s string
}

func (e *UniqueConstraintError) Error() string {
	return e.s
}

func (e *UniqueConstraintError) Is(target error) bool {
	err, ok := target.(*pgconn.PgError)
	if !ok {
		return false
	}
	return err.Code == "23505" && (e.s == "" || err.ConstraintName == e.s)
}
