// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// UserPermission is an object representing the database table.
type UserPermission struct {
	UserID       uuid.UUID `db:"user_id,pk" json:"user_id"`
	PermissionID uuid.UUID `db:"permission_id,pk" json:"permission_id"`

	R userPermissionR `db:"-" json:"-"`
}

// UserPermissionSlice is an alias for a slice of pointers to UserPermission.
// This should almost always be used instead of []*UserPermission.
type UserPermissionSlice []*UserPermission

// UserPermissions contains methods to work with the user_permissions table
var UserPermissions = psql.NewTablex[*UserPermission, UserPermissionSlice, *UserPermissionSetter]("", "user_permissions")

// UserPermissionsQuery is a query on the user_permissions table
type UserPermissionsQuery = *psql.ViewQuery[*UserPermission, UserPermissionSlice]

// userPermissionR is where relationships are stored.
type userPermissionR struct {
	Permission *Permission `json:"Permission"` // user_permissions.user_permissions_permission_id_fkey
	User       *User       `json:"User"`       // user_permissions.user_permissions_user_id_fkey
}

type userPermissionColumnNames struct {
	UserID       string
	PermissionID string
}

var UserPermissionColumns = buildUserPermissionColumns("user_permissions")

type userPermissionColumns struct {
	tableAlias   string
	UserID       psql.Expression
	PermissionID psql.Expression
}

func (c userPermissionColumns) Alias() string {
	return c.tableAlias
}

func (userPermissionColumns) AliasedAs(alias string) userPermissionColumns {
	return buildUserPermissionColumns(alias)
}

func buildUserPermissionColumns(alias string) userPermissionColumns {
	return userPermissionColumns{
		tableAlias:   alias,
		UserID:       psql.Quote(alias, "user_id"),
		PermissionID: psql.Quote(alias, "permission_id"),
	}
}

type userPermissionWhere[Q psql.Filterable] struct {
	UserID       psql.WhereMod[Q, uuid.UUID]
	PermissionID psql.WhereMod[Q, uuid.UUID]
}

func (userPermissionWhere[Q]) AliasedAs(alias string) userPermissionWhere[Q] {
	return buildUserPermissionWhere[Q](buildUserPermissionColumns(alias))
}

func buildUserPermissionWhere[Q psql.Filterable](cols userPermissionColumns) userPermissionWhere[Q] {
	return userPermissionWhere[Q]{
		UserID:       psql.Where[Q, uuid.UUID](cols.UserID),
		PermissionID: psql.Where[Q, uuid.UUID](cols.PermissionID),
	}
}

var UserPermissionErrors = &userPermissionErrors{
	ErrUniqueUserPermissionsPkey: &UniqueConstraintError{s: "user_permissions_pkey"},
}

type userPermissionErrors struct {
	ErrUniqueUserPermissionsPkey *UniqueConstraintError
}

// UserPermissionSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserPermissionSetter struct {
	UserID       omit.Val[uuid.UUID] `db:"user_id,pk" json:"user_id"`
	PermissionID omit.Val[uuid.UUID] `db:"permission_id,pk" json:"permission_id"`
}

func (s UserPermissionSetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.PermissionID.IsUnset() {
		vals = append(vals, "permission_id")
	}

	return vals
}

func (s UserPermissionSetter) Overwrite(t *UserPermission) {
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.PermissionID.IsUnset() {
		t.PermissionID, _ = s.PermissionID.Get()
	}
}

func (s *UserPermissionSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return UserPermissions.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 2)
		if s.UserID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.UserID)
		}

		if s.PermissionID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.PermissionID)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserPermissionSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserPermissionSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.PermissionID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "permission_id")...),
			psql.Arg(s.PermissionID),
		}})
	}

	return exprs
}

// FindUserPermission retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUserPermission(ctx context.Context, exec bob.Executor, UserIDPK uuid.UUID, PermissionIDPK uuid.UUID, cols ...string) (*UserPermission, error) {
	if len(cols) == 0 {
		return UserPermissions.Query(
			SelectWhere.UserPermissions.UserID.EQ(UserIDPK),
			SelectWhere.UserPermissions.PermissionID.EQ(PermissionIDPK),
		).One(ctx, exec)
	}

	return UserPermissions.Query(
		SelectWhere.UserPermissions.UserID.EQ(UserIDPK),
		SelectWhere.UserPermissions.PermissionID.EQ(PermissionIDPK),
		sm.Columns(UserPermissions.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserPermissionExists checks the presence of a single record by primary key
func UserPermissionExists(ctx context.Context, exec bob.Executor, UserIDPK uuid.UUID, PermissionIDPK uuid.UUID) (bool, error) {
	return UserPermissions.Query(
		SelectWhere.UserPermissions.UserID.EQ(UserIDPK),
		SelectWhere.UserPermissions.PermissionID.EQ(PermissionIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after UserPermission is retrieved from the database
func (o *UserPermission) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserPermissions.AfterSelectHooks.RunHooks(ctx, exec, UserPermissionSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = UserPermissions.AfterInsertHooks.RunHooks(ctx, exec, UserPermissionSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = UserPermissions.AfterUpdateHooks.RunHooks(ctx, exec, UserPermissionSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = UserPermissions.AfterDeleteHooks.RunHooks(ctx, exec, UserPermissionSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the UserPermission
func (o *UserPermission) PrimaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.UserID,
		o.PermissionID,
	)
}

func (o *UserPermission) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("user_permissions", "user_id"), psql.Quote("user_permissions", "permission_id")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the UserPermission
func (o *UserPermission) Update(ctx context.Context, exec bob.Executor, s *UserPermissionSetter) error {
	v, err := UserPermissions.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single UserPermission record with an executor
func (o *UserPermission) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := UserPermissions.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the UserPermission using the executor
func (o *UserPermission) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := UserPermissions.Query(
		SelectWhere.UserPermissions.UserID.EQ(o.UserID),
		SelectWhere.UserPermissions.PermissionID.EQ(o.PermissionID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserPermissionSlice is retrieved from the database
func (o UserPermissionSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserPermissions.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = UserPermissions.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = UserPermissions.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = UserPermissions.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserPermissionSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("user_permissions", "user_id"), psql.Quote("user_permissions", "permission_id")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserPermissionSlice) copyMatchingRows(from ...*UserPermission) {
	for i, old := range o {
		for _, new := range from {
			if new.UserID != old.UserID {
				continue
			}
			if new.PermissionID != old.PermissionID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserPermissionSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserPermissions.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserPermission:
				o.copyMatchingRows(retrieved)
			case []*UserPermission:
				o.copyMatchingRows(retrieved...)
			case UserPermissionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserPermission or a slice of UserPermission
				// then run the AfterUpdateHooks on the slice
				_, err = UserPermissions.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserPermissionSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserPermissions.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserPermission:
				o.copyMatchingRows(retrieved)
			case []*UserPermission:
				o.copyMatchingRows(retrieved...)
			case UserPermissionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserPermission or a slice of UserPermission
				// then run the AfterDeleteHooks on the slice
				_, err = UserPermissions.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserPermissionSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserPermissionSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserPermissions.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserPermissionSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserPermissions.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserPermissionSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := UserPermissions.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type userPermissionJoins[Q dialect.Joinable] struct {
	typ        string
	Permission func(context.Context) modAs[Q, permissionColumns]
	User       func(context.Context) modAs[Q, userColumns]
}

func (j userPermissionJoins[Q]) aliasedAs(alias string) userPermissionJoins[Q] {
	return buildUserPermissionJoins[Q](buildUserPermissionColumns(alias), j.typ)
}

func buildUserPermissionJoins[Q dialect.Joinable](cols userPermissionColumns, typ string) userPermissionJoins[Q] {
	return userPermissionJoins[Q]{
		typ:        typ,
		Permission: userPermissionsJoinPermission[Q](cols, typ),
		User:       userPermissionsJoinUser[Q](cols, typ),
	}
}

func userPermissionsJoinPermission[Q dialect.Joinable](from userPermissionColumns, typ string) func(context.Context) modAs[Q, permissionColumns] {
	return func(ctx context.Context) modAs[Q, permissionColumns] {
		return modAs[Q, permissionColumns]{
			c: PermissionColumns,
			f: func(to permissionColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Permissions.Name().As(to.Alias())).On(
						to.ID.EQ(from.PermissionID),
					))
				}

				return mods
			},
		}
	}
}

func userPermissionsJoinUser[Q dialect.Joinable](from userPermissionColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// Permission starts a query for related objects on permissions
func (o *UserPermission) Permission(mods ...bob.Mod[*dialect.SelectQuery]) PermissionsQuery {
	return Permissions.Query(append(mods,
		sm.Where(PermissionColumns.ID.EQ(psql.Arg(o.PermissionID))),
	)...)
}

func (os UserPermissionSlice) Permission(mods ...bob.Mod[*dialect.SelectQuery]) PermissionsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.PermissionID)
	}

	return Permissions.Query(append(mods,
		sm.Where(psql.Group(PermissionColumns.ID).In(PKArgs...)),
	)...)
}

// User starts a query for related objects on users
func (o *UserPermission) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os UserPermissionSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *UserPermission) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Permission":
		rel, ok := retrieved.(*Permission)
		if !ok {
			return fmt.Errorf("userPermission cannot load %T as %q", retrieved, name)
		}

		o.R.Permission = rel

		return nil
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("userPermission cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		return nil
	default:
		return fmt.Errorf("userPermission has no relationship %q", name)
	}
}

func PreloadUserPermissionPermission(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Permission, PermissionSlice](orm.Relationship{
		Name: "Permission",
		Sides: []orm.RelSide{
			{
				From: TableNames.UserPermissions,
				To:   TableNames.Permissions,
				FromColumns: []string{
					ColumnNames.UserPermissions.PermissionID,
				},
				ToColumns: []string{
					ColumnNames.Permissions.ID,
				},
			},
		},
	}, Permissions.Columns().Names(), opts...)
}

func ThenLoadUserPermissionPermission(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserPermissionPermission(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserPermissionPermission", retrieved)
		}

		err := loader.LoadUserPermissionPermission(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserPermissionPermission loads the userPermission's Permission into the .R struct
func (o *UserPermission) LoadUserPermissionPermission(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Permission = nil

	related, err := o.Permission(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R.Permission = related
	return nil
}

// LoadUserPermissionPermission loads the userPermission's Permission into the .R struct
func (os UserPermissionSlice) LoadUserPermissionPermission(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	permissions, err := os.Permission(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range permissions {
			if o.PermissionID != rel.ID {
				continue
			}

			o.R.Permission = rel
			break
		}
	}

	return nil
}

func PreloadUserPermissionUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.UserPermissions,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.UserPermissions.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadUserPermissionUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserPermissionUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserPermissionUser", retrieved)
		}

		err := loader.LoadUserPermissionUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserPermissionUser loads the userPermission's User into the .R struct
func (o *UserPermission) LoadUserPermissionUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R.User = related
	return nil
}

// LoadUserPermissionUser loads the userPermission's User into the .R struct
func (os UserPermissionSlice) LoadUserPermissionUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachUserPermissionPermission0(ctx context.Context, exec bob.Executor, count int, userPermission0 *UserPermission, permission1 *Permission) (*UserPermission, error) {
	setter := &UserPermissionSetter{
		PermissionID: omit.From(permission1.ID),
	}

	err := userPermission0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserPermissionPermission0: %w", err)
	}

	return userPermission0, nil
}

func (userPermission0 *UserPermission) InsertPermission(ctx context.Context, exec bob.Executor, related *PermissionSetter) error {
	permission1, err := Permissions.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserPermissionPermission0(ctx, exec, 1, userPermission0, permission1)
	if err != nil {
		return err
	}

	userPermission0.R.Permission = permission1

	return nil
}

func (userPermission0 *UserPermission) AttachPermission(ctx context.Context, exec bob.Executor, permission1 *Permission) error {
	var err error

	_, err = attachUserPermissionPermission0(ctx, exec, 1, userPermission0, permission1)
	if err != nil {
		return err
	}

	userPermission0.R.Permission = permission1

	return nil
}

func attachUserPermissionUser0(ctx context.Context, exec bob.Executor, count int, userPermission0 *UserPermission, user1 *User) (*UserPermission, error) {
	setter := &UserPermissionSetter{
		UserID: omit.From(user1.ID),
	}

	err := userPermission0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserPermissionUser0: %w", err)
	}

	return userPermission0, nil
}

func (userPermission0 *UserPermission) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserPermissionUser0(ctx, exec, 1, userPermission0, user1)
	if err != nil {
		return err
	}

	userPermission0.R.User = user1

	return nil
}

func (userPermission0 *UserPermission) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachUserPermissionUser0(ctx, exec, 1, userPermission0, user1)
	if err != nil {
		return err
	}

	userPermission0.R.User = user1

	return nil
}
