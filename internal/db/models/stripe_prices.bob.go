// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types"
)

// StripePrice is an object representing the database table.
type StripePrice struct {
	ID              string                              `db:"id,pk" json:"id"`
	ProductID       string                              `db:"product_id" json:"product_id"`
	LookupKey       null.Val[string]                    `db:"lookup_key" json:"lookup_key"`
	Active          bool                                `db:"active" json:"active"`
	Description     null.Val[string]                    `db:"description" json:"description"`
	UnitAmount      int64                               `db:"unit_amount" json:"unit_amount"`
	Currency        string                              `db:"currency" json:"currency"`
	Type            StripePricingType                   `db:"type" json:"type"`
	Interval        null.Val[StripePricingPlanInterval] `db:"interval" json:"interval"`
	IntervalCount   null.Val[int64]                     `db:"interval_count" json:"interval_count"`
	TrialPeriodDays null.Val[int64]                     `db:"trial_period_days" json:"trial_period_days"`
	Metadata        types.JSON[map[string]string]       `db:"metadata" json:"metadata"`
	CreatedAt       time.Time                           `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time                           `db:"updated_at" json:"updated_at"`

	R stripePriceR `db:"-" json:"-"`
}

// StripePriceSlice is an alias for a slice of pointers to StripePrice.
// This should almost always be used instead of []*StripePrice.
type StripePriceSlice []*StripePrice

// StripePrices contains methods to work with the stripe_prices table
var StripePrices = psql.NewTablex[*StripePrice, StripePriceSlice, *StripePriceSetter]("", "stripe_prices")

// StripePricesQuery is a query on the stripe_prices table
type StripePricesQuery = *psql.ViewQuery[*StripePrice, StripePriceSlice]

// stripePriceR is where relationships are stored.
type stripePriceR struct {
	ProductStripeProduct     *StripeProduct          `json:"ProductStripeProduct"`     // stripe_prices.stripe_prices_product_id_fkey
	PriceStripeSubscriptions StripeSubscriptionSlice `json:"PriceStripeSubscriptions"` // stripe_subscriptions.stripe_subscriptions_price_id_fkey
}

type stripePriceColumnNames struct {
	ID              string
	ProductID       string
	LookupKey       string
	Active          string
	Description     string
	UnitAmount      string
	Currency        string
	Type            string
	Interval        string
	IntervalCount   string
	TrialPeriodDays string
	Metadata        string
	CreatedAt       string
	UpdatedAt       string
}

var StripePriceColumns = buildStripePriceColumns("stripe_prices")

type stripePriceColumns struct {
	tableAlias      string
	ID              psql.Expression
	ProductID       psql.Expression
	LookupKey       psql.Expression
	Active          psql.Expression
	Description     psql.Expression
	UnitAmount      psql.Expression
	Currency        psql.Expression
	Type            psql.Expression
	Interval        psql.Expression
	IntervalCount   psql.Expression
	TrialPeriodDays psql.Expression
	Metadata        psql.Expression
	CreatedAt       psql.Expression
	UpdatedAt       psql.Expression
}

func (c stripePriceColumns) Alias() string {
	return c.tableAlias
}

func (stripePriceColumns) AliasedAs(alias string) stripePriceColumns {
	return buildStripePriceColumns(alias)
}

func buildStripePriceColumns(alias string) stripePriceColumns {
	return stripePriceColumns{
		tableAlias:      alias,
		ID:              psql.Quote(alias, "id"),
		ProductID:       psql.Quote(alias, "product_id"),
		LookupKey:       psql.Quote(alias, "lookup_key"),
		Active:          psql.Quote(alias, "active"),
		Description:     psql.Quote(alias, "description"),
		UnitAmount:      psql.Quote(alias, "unit_amount"),
		Currency:        psql.Quote(alias, "currency"),
		Type:            psql.Quote(alias, "type"),
		Interval:        psql.Quote(alias, "interval"),
		IntervalCount:   psql.Quote(alias, "interval_count"),
		TrialPeriodDays: psql.Quote(alias, "trial_period_days"),
		Metadata:        psql.Quote(alias, "metadata"),
		CreatedAt:       psql.Quote(alias, "created_at"),
		UpdatedAt:       psql.Quote(alias, "updated_at"),
	}
}

type stripePriceWhere[Q psql.Filterable] struct {
	ID              psql.WhereMod[Q, string]
	ProductID       psql.WhereMod[Q, string]
	LookupKey       psql.WhereNullMod[Q, string]
	Active          psql.WhereMod[Q, bool]
	Description     psql.WhereNullMod[Q, string]
	UnitAmount      psql.WhereMod[Q, int64]
	Currency        psql.WhereMod[Q, string]
	Type            psql.WhereMod[Q, StripePricingType]
	Interval        psql.WhereNullMod[Q, StripePricingPlanInterval]
	IntervalCount   psql.WhereNullMod[Q, int64]
	TrialPeriodDays psql.WhereNullMod[Q, int64]
	Metadata        psql.WhereMod[Q, types.JSON[map[string]string]]
	CreatedAt       psql.WhereMod[Q, time.Time]
	UpdatedAt       psql.WhereMod[Q, time.Time]
}

func (stripePriceWhere[Q]) AliasedAs(alias string) stripePriceWhere[Q] {
	return buildStripePriceWhere[Q](buildStripePriceColumns(alias))
}

func buildStripePriceWhere[Q psql.Filterable](cols stripePriceColumns) stripePriceWhere[Q] {
	return stripePriceWhere[Q]{
		ID:              psql.Where[Q, string](cols.ID),
		ProductID:       psql.Where[Q, string](cols.ProductID),
		LookupKey:       psql.WhereNull[Q, string](cols.LookupKey),
		Active:          psql.Where[Q, bool](cols.Active),
		Description:     psql.WhereNull[Q, string](cols.Description),
		UnitAmount:      psql.Where[Q, int64](cols.UnitAmount),
		Currency:        psql.Where[Q, string](cols.Currency),
		Type:            psql.Where[Q, StripePricingType](cols.Type),
		Interval:        psql.WhereNull[Q, StripePricingPlanInterval](cols.Interval),
		IntervalCount:   psql.WhereNull[Q, int64](cols.IntervalCount),
		TrialPeriodDays: psql.WhereNull[Q, int64](cols.TrialPeriodDays),
		Metadata:        psql.Where[Q, types.JSON[map[string]string]](cols.Metadata),
		CreatedAt:       psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:       psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var StripePriceErrors = &stripePriceErrors{
	ErrUniqueStripePricesPkey: &UniqueConstraintError{s: "stripe_prices_pkey"},
}

type stripePriceErrors struct {
	ErrUniqueStripePricesPkey *UniqueConstraintError
}

// StripePriceSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type StripePriceSetter struct {
	ID              omit.Val[string]                        `db:"id,pk" json:"id"`
	ProductID       omit.Val[string]                        `db:"product_id" json:"product_id"`
	LookupKey       omitnull.Val[string]                    `db:"lookup_key" json:"lookup_key"`
	Active          omit.Val[bool]                          `db:"active" json:"active"`
	Description     omitnull.Val[string]                    `db:"description" json:"description"`
	UnitAmount      omit.Val[int64]                         `db:"unit_amount" json:"unit_amount"`
	Currency        omit.Val[string]                        `db:"currency" json:"currency"`
	Type            omit.Val[StripePricingType]             `db:"type" json:"type"`
	Interval        omitnull.Val[StripePricingPlanInterval] `db:"interval" json:"interval"`
	IntervalCount   omitnull.Val[int64]                     `db:"interval_count" json:"interval_count"`
	TrialPeriodDays omitnull.Val[int64]                     `db:"trial_period_days" json:"trial_period_days"`
	Metadata        omit.Val[types.JSON[map[string]string]] `db:"metadata" json:"metadata"`
	CreatedAt       omit.Val[time.Time]                     `db:"created_at" json:"created_at"`
	UpdatedAt       omit.Val[time.Time]                     `db:"updated_at" json:"updated_at"`
}

func (s StripePriceSetter) SetColumns() []string {
	vals := make([]string, 0, 14)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.ProductID.IsUnset() {
		vals = append(vals, "product_id")
	}

	if !s.LookupKey.IsUnset() {
		vals = append(vals, "lookup_key")
	}

	if !s.Active.IsUnset() {
		vals = append(vals, "active")
	}

	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}

	if !s.UnitAmount.IsUnset() {
		vals = append(vals, "unit_amount")
	}

	if !s.Currency.IsUnset() {
		vals = append(vals, "currency")
	}

	if !s.Type.IsUnset() {
		vals = append(vals, "type")
	}

	if !s.Interval.IsUnset() {
		vals = append(vals, "interval")
	}

	if !s.IntervalCount.IsUnset() {
		vals = append(vals, "interval_count")
	}

	if !s.TrialPeriodDays.IsUnset() {
		vals = append(vals, "trial_period_days")
	}

	if !s.Metadata.IsUnset() {
		vals = append(vals, "metadata")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s StripePriceSetter) Overwrite(t *StripePrice) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.ProductID.IsUnset() {
		t.ProductID, _ = s.ProductID.Get()
	}
	if !s.LookupKey.IsUnset() {
		t.LookupKey, _ = s.LookupKey.GetNull()
	}
	if !s.Active.IsUnset() {
		t.Active, _ = s.Active.Get()
	}
	if !s.Description.IsUnset() {
		t.Description, _ = s.Description.GetNull()
	}
	if !s.UnitAmount.IsUnset() {
		t.UnitAmount, _ = s.UnitAmount.Get()
	}
	if !s.Currency.IsUnset() {
		t.Currency, _ = s.Currency.Get()
	}
	if !s.Type.IsUnset() {
		t.Type, _ = s.Type.Get()
	}
	if !s.Interval.IsUnset() {
		t.Interval, _ = s.Interval.GetNull()
	}
	if !s.IntervalCount.IsUnset() {
		t.IntervalCount, _ = s.IntervalCount.GetNull()
	}
	if !s.TrialPeriodDays.IsUnset() {
		t.TrialPeriodDays, _ = s.TrialPeriodDays.GetNull()
	}
	if !s.Metadata.IsUnset() {
		t.Metadata, _ = s.Metadata.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *StripePriceSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return StripePrices.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 14)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.ProductID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.ProductID)
		}

		if s.LookupKey.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.LookupKey)
		}

		if s.Active.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Active)
		}

		if s.Description.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.Description)
		}

		if s.UnitAmount.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.UnitAmount)
		}

		if s.Currency.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.Currency)
		}

		if s.Type.IsUnset() {
			vals[7] = psql.Raw("DEFAULT")
		} else {
			vals[7] = psql.Arg(s.Type)
		}

		if s.Interval.IsUnset() {
			vals[8] = psql.Raw("DEFAULT")
		} else {
			vals[8] = psql.Arg(s.Interval)
		}

		if s.IntervalCount.IsUnset() {
			vals[9] = psql.Raw("DEFAULT")
		} else {
			vals[9] = psql.Arg(s.IntervalCount)
		}

		if s.TrialPeriodDays.IsUnset() {
			vals[10] = psql.Raw("DEFAULT")
		} else {
			vals[10] = psql.Arg(s.TrialPeriodDays)
		}

		if s.Metadata.IsUnset() {
			vals[11] = psql.Raw("DEFAULT")
		} else {
			vals[11] = psql.Arg(s.Metadata)
		}

		if s.CreatedAt.IsUnset() {
			vals[12] = psql.Raw("DEFAULT")
		} else {
			vals[12] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[13] = psql.Raw("DEFAULT")
		} else {
			vals[13] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s StripePriceSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s StripePriceSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 14)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.ProductID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "product_id")...),
			psql.Arg(s.ProductID),
		}})
	}

	if !s.LookupKey.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lookup_key")...),
			psql.Arg(s.LookupKey),
		}})
	}

	if !s.Active.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "active")...),
			psql.Arg(s.Active),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "description")...),
			psql.Arg(s.Description),
		}})
	}

	if !s.UnitAmount.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "unit_amount")...),
			psql.Arg(s.UnitAmount),
		}})
	}

	if !s.Currency.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "currency")...),
			psql.Arg(s.Currency),
		}})
	}

	if !s.Type.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "type")...),
			psql.Arg(s.Type),
		}})
	}

	if !s.Interval.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "interval")...),
			psql.Arg(s.Interval),
		}})
	}

	if !s.IntervalCount.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "interval_count")...),
			psql.Arg(s.IntervalCount),
		}})
	}

	if !s.TrialPeriodDays.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "trial_period_days")...),
			psql.Arg(s.TrialPeriodDays),
		}})
	}

	if !s.Metadata.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "metadata")...),
			psql.Arg(s.Metadata),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindStripePrice retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindStripePrice(ctx context.Context, exec bob.Executor, IDPK string, cols ...string) (*StripePrice, error) {
	if len(cols) == 0 {
		return StripePrices.Query(
			SelectWhere.StripePrices.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return StripePrices.Query(
		SelectWhere.StripePrices.ID.EQ(IDPK),
		sm.Columns(StripePrices.Columns().Only(cols...)),
	).One(ctx, exec)
}

// StripePriceExists checks the presence of a single record by primary key
func StripePriceExists(ctx context.Context, exec bob.Executor, IDPK string) (bool, error) {
	return StripePrices.Query(
		SelectWhere.StripePrices.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after StripePrice is retrieved from the database
func (o *StripePrice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = StripePrices.AfterSelectHooks.RunHooks(ctx, exec, StripePriceSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = StripePrices.AfterInsertHooks.RunHooks(ctx, exec, StripePriceSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = StripePrices.AfterUpdateHooks.RunHooks(ctx, exec, StripePriceSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = StripePrices.AfterDeleteHooks.RunHooks(ctx, exec, StripePriceSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the StripePrice
func (o *StripePrice) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *StripePrice) pkEQ() dialect.Expression {
	return psql.Quote("stripe_prices", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the StripePrice
func (o *StripePrice) Update(ctx context.Context, exec bob.Executor, s *StripePriceSetter) error {
	v, err := StripePrices.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single StripePrice record with an executor
func (o *StripePrice) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := StripePrices.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the StripePrice using the executor
func (o *StripePrice) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := StripePrices.Query(
		SelectWhere.StripePrices.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after StripePriceSlice is retrieved from the database
func (o StripePriceSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = StripePrices.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = StripePrices.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = StripePrices.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = StripePrices.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o StripePriceSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("stripe_prices", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o StripePriceSlice) copyMatchingRows(from ...*StripePrice) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o StripePriceSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return StripePrices.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *StripePrice:
				o.copyMatchingRows(retrieved)
			case []*StripePrice:
				o.copyMatchingRows(retrieved...)
			case StripePriceSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a StripePrice or a slice of StripePrice
				// then run the AfterUpdateHooks on the slice
				_, err = StripePrices.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o StripePriceSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return StripePrices.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *StripePrice:
				o.copyMatchingRows(retrieved)
			case []*StripePrice:
				o.copyMatchingRows(retrieved...)
			case StripePriceSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a StripePrice or a slice of StripePrice
				// then run the AfterDeleteHooks on the slice
				_, err = StripePrices.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o StripePriceSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals StripePriceSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := StripePrices.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o StripePriceSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := StripePrices.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o StripePriceSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := StripePrices.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type stripePriceJoins[Q dialect.Joinable] struct {
	typ                      string
	ProductStripeProduct     func(context.Context) modAs[Q, stripeProductColumns]
	PriceStripeSubscriptions func(context.Context) modAs[Q, stripeSubscriptionColumns]
}

func (j stripePriceJoins[Q]) aliasedAs(alias string) stripePriceJoins[Q] {
	return buildStripePriceJoins[Q](buildStripePriceColumns(alias), j.typ)
}

func buildStripePriceJoins[Q dialect.Joinable](cols stripePriceColumns, typ string) stripePriceJoins[Q] {
	return stripePriceJoins[Q]{
		typ:                      typ,
		ProductStripeProduct:     stripePricesJoinProductStripeProduct[Q](cols, typ),
		PriceStripeSubscriptions: stripePricesJoinPriceStripeSubscriptions[Q](cols, typ),
	}
}

func stripePricesJoinProductStripeProduct[Q dialect.Joinable](from stripePriceColumns, typ string) func(context.Context) modAs[Q, stripeProductColumns] {
	return func(ctx context.Context) modAs[Q, stripeProductColumns] {
		return modAs[Q, stripeProductColumns]{
			c: StripeProductColumns,
			f: func(to stripeProductColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, StripeProducts.Name().As(to.Alias())).On(
						to.ID.EQ(from.ProductID),
					))
				}

				return mods
			},
		}
	}
}

func stripePricesJoinPriceStripeSubscriptions[Q dialect.Joinable](from stripePriceColumns, typ string) func(context.Context) modAs[Q, stripeSubscriptionColumns] {
	return func(ctx context.Context) modAs[Q, stripeSubscriptionColumns] {
		return modAs[Q, stripeSubscriptionColumns]{
			c: StripeSubscriptionColumns,
			f: func(to stripeSubscriptionColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, StripeSubscriptions.Name().As(to.Alias())).On(
						to.PriceID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

// ProductStripeProduct starts a query for related objects on stripe_products
func (o *StripePrice) ProductStripeProduct(mods ...bob.Mod[*dialect.SelectQuery]) StripeProductsQuery {
	return StripeProducts.Query(append(mods,
		sm.Where(StripeProductColumns.ID.EQ(psql.Arg(o.ProductID))),
	)...)
}

func (os StripePriceSlice) ProductStripeProduct(mods ...bob.Mod[*dialect.SelectQuery]) StripeProductsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ProductID)
	}

	return StripeProducts.Query(append(mods,
		sm.Where(psql.Group(StripeProductColumns.ID).In(PKArgs...)),
	)...)
}

// PriceStripeSubscriptions starts a query for related objects on stripe_subscriptions
func (o *StripePrice) PriceStripeSubscriptions(mods ...bob.Mod[*dialect.SelectQuery]) StripeSubscriptionsQuery {
	return StripeSubscriptions.Query(append(mods,
		sm.Where(StripeSubscriptionColumns.PriceID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os StripePriceSlice) PriceStripeSubscriptions(mods ...bob.Mod[*dialect.SelectQuery]) StripeSubscriptionsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return StripeSubscriptions.Query(append(mods,
		sm.Where(psql.Group(StripeSubscriptionColumns.PriceID).In(PKArgs...)),
	)...)
}

func (o *StripePrice) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "ProductStripeProduct":
		rel, ok := retrieved.(*StripeProduct)
		if !ok {
			return fmt.Errorf("stripePrice cannot load %T as %q", retrieved, name)
		}

		o.R.ProductStripeProduct = rel

		if rel != nil {
			rel.R.ProductStripePrices = StripePriceSlice{o}
		}
		return nil
	case "PriceStripeSubscriptions":
		rels, ok := retrieved.(StripeSubscriptionSlice)
		if !ok {
			return fmt.Errorf("stripePrice cannot load %T as %q", retrieved, name)
		}

		o.R.PriceStripeSubscriptions = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.PriceStripePrice = o
			}
		}
		return nil
	default:
		return fmt.Errorf("stripePrice has no relationship %q", name)
	}
}

func PreloadStripePriceProductStripeProduct(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*StripeProduct, StripeProductSlice](orm.Relationship{
		Name: "ProductStripeProduct",
		Sides: []orm.RelSide{
			{
				From: TableNames.StripePrices,
				To:   TableNames.StripeProducts,
				FromColumns: []string{
					ColumnNames.StripePrices.ProductID,
				},
				ToColumns: []string{
					ColumnNames.StripeProducts.ID,
				},
			},
		},
	}, StripeProducts.Columns().Names(), opts...)
}

func ThenLoadStripePriceProductStripeProduct(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadStripePriceProductStripeProduct(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load StripePriceProductStripeProduct", retrieved)
		}

		err := loader.LoadStripePriceProductStripeProduct(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadStripePriceProductStripeProduct loads the stripePrice's ProductStripeProduct into the .R struct
func (o *StripePrice) LoadStripePriceProductStripeProduct(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ProductStripeProduct = nil

	related, err := o.ProductStripeProduct(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.ProductStripePrices = StripePriceSlice{o}

	o.R.ProductStripeProduct = related
	return nil
}

// LoadStripePriceProductStripeProduct loads the stripePrice's ProductStripeProduct into the .R struct
func (os StripePriceSlice) LoadStripePriceProductStripeProduct(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	stripeProducts, err := os.ProductStripeProduct(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range stripeProducts {
			if o.ProductID != rel.ID {
				continue
			}

			rel.R.ProductStripePrices = append(rel.R.ProductStripePrices, o)

			o.R.ProductStripeProduct = rel
			break
		}
	}

	return nil
}

func ThenLoadStripePricePriceStripeSubscriptions(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadStripePricePriceStripeSubscriptions(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load StripePricePriceStripeSubscriptions", retrieved)
		}

		err := loader.LoadStripePricePriceStripeSubscriptions(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadStripePricePriceStripeSubscriptions loads the stripePrice's PriceStripeSubscriptions into the .R struct
func (o *StripePrice) LoadStripePricePriceStripeSubscriptions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.PriceStripeSubscriptions = nil

	related, err := o.PriceStripeSubscriptions(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.PriceStripePrice = o
	}

	o.R.PriceStripeSubscriptions = related
	return nil
}

// LoadStripePricePriceStripeSubscriptions loads the stripePrice's PriceStripeSubscriptions into the .R struct
func (os StripePriceSlice) LoadStripePricePriceStripeSubscriptions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	stripeSubscriptions, err := os.PriceStripeSubscriptions(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.PriceStripeSubscriptions = nil
	}

	for _, o := range os {
		for _, rel := range stripeSubscriptions {
			if o.ID != rel.PriceID {
				continue
			}

			rel.R.PriceStripePrice = o

			o.R.PriceStripeSubscriptions = append(o.R.PriceStripeSubscriptions, rel)
		}
	}

	return nil
}

func attachStripePriceProductStripeProduct0(ctx context.Context, exec bob.Executor, count int, stripePrice0 *StripePrice, stripeProduct1 *StripeProduct) (*StripePrice, error) {
	setter := &StripePriceSetter{
		ProductID: omit.From(stripeProduct1.ID),
	}

	err := stripePrice0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachStripePriceProductStripeProduct0: %w", err)
	}

	return stripePrice0, nil
}

func (stripePrice0 *StripePrice) InsertProductStripeProduct(ctx context.Context, exec bob.Executor, related *StripeProductSetter) error {
	stripeProduct1, err := StripeProducts.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachStripePriceProductStripeProduct0(ctx, exec, 1, stripePrice0, stripeProduct1)
	if err != nil {
		return err
	}

	stripePrice0.R.ProductStripeProduct = stripeProduct1

	stripeProduct1.R.ProductStripePrices = append(stripeProduct1.R.ProductStripePrices, stripePrice0)

	return nil
}

func (stripePrice0 *StripePrice) AttachProductStripeProduct(ctx context.Context, exec bob.Executor, stripeProduct1 *StripeProduct) error {
	var err error

	_, err = attachStripePriceProductStripeProduct0(ctx, exec, 1, stripePrice0, stripeProduct1)
	if err != nil {
		return err
	}

	stripePrice0.R.ProductStripeProduct = stripeProduct1

	stripeProduct1.R.ProductStripePrices = append(stripeProduct1.R.ProductStripePrices, stripePrice0)

	return nil
}

func insertStripePricePriceStripeSubscriptions0(ctx context.Context, exec bob.Executor, stripeSubscriptions1 []*StripeSubscriptionSetter, stripePrice0 *StripePrice) (StripeSubscriptionSlice, error) {
	for i := range stripeSubscriptions1 {
		stripeSubscriptions1[i].PriceID = omit.From(stripePrice0.ID)
	}

	ret, err := StripeSubscriptions.Insert(bob.ToMods(stripeSubscriptions1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertStripePricePriceStripeSubscriptions0: %w", err)
	}

	return ret, nil
}

func attachStripePricePriceStripeSubscriptions0(ctx context.Context, exec bob.Executor, count int, stripeSubscriptions1 StripeSubscriptionSlice, stripePrice0 *StripePrice) (StripeSubscriptionSlice, error) {
	setter := &StripeSubscriptionSetter{
		PriceID: omit.From(stripePrice0.ID),
	}

	err := stripeSubscriptions1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachStripePricePriceStripeSubscriptions0: %w", err)
	}

	return stripeSubscriptions1, nil
}

func (stripePrice0 *StripePrice) InsertPriceStripeSubscriptions(ctx context.Context, exec bob.Executor, related ...*StripeSubscriptionSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	stripeSubscriptions1, err := insertStripePricePriceStripeSubscriptions0(ctx, exec, related, stripePrice0)
	if err != nil {
		return err
	}

	stripePrice0.R.PriceStripeSubscriptions = append(stripePrice0.R.PriceStripeSubscriptions, stripeSubscriptions1...)

	for _, rel := range stripeSubscriptions1 {
		rel.R.PriceStripePrice = stripePrice0
	}
	return nil
}

func (stripePrice0 *StripePrice) AttachPriceStripeSubscriptions(ctx context.Context, exec bob.Executor, related ...*StripeSubscription) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	stripeSubscriptions1 := StripeSubscriptionSlice(related)

	_, err = attachStripePricePriceStripeSubscriptions0(ctx, exec, len(related), stripeSubscriptions1, stripePrice0)
	if err != nil {
		return err
	}

	stripePrice0.R.PriceStripeSubscriptions = append(stripePrice0.R.PriceStripeSubscriptions, stripeSubscriptions1...)

	for _, rel := range related {
		rel.R.PriceStripePrice = stripePrice0
	}

	return nil
}
