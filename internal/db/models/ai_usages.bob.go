// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// AiUsage is an object representing the database table.
type AiUsage struct {
	ID               uuid.UUID `db:"id,pk" json:"id"`
	UserID           uuid.UUID `db:"user_id" json:"user_id"`
	PromptTokens     int64     `db:"prompt_tokens" json:"prompt_tokens"`
	CompletionTokens int64     `db:"completion_tokens" json:"completion_tokens"`
	TotalTokens      int64     `db:"total_tokens" json:"total_tokens"`
	CreatedAt        time.Time `db:"created_at" json:"created_at"`
	UpdatedAt        time.Time `db:"updated_at" json:"updated_at"`

	R aiUsageR `db:"-" json:"-"`
}

// AiUsageSlice is an alias for a slice of pointers to AiUsage.
// This should almost always be used instead of []*AiUsage.
type AiUsageSlice []*AiUsage

// AiUsages contains methods to work with the ai_usages table
var AiUsages = psql.NewTablex[*AiUsage, AiUsageSlice, *AiUsageSetter]("", "ai_usages")

// AiUsagesQuery is a query on the ai_usages table
type AiUsagesQuery = *psql.ViewQuery[*AiUsage, AiUsageSlice]

// aiUsageR is where relationships are stored.
type aiUsageR struct {
	User *User `json:"User"` // ai_usages.ai_usages_user_id_fkey
}

type aiUsageColumnNames struct {
	ID               string
	UserID           string
	PromptTokens     string
	CompletionTokens string
	TotalTokens      string
	CreatedAt        string
	UpdatedAt        string
}

var AiUsageColumns = buildAiUsageColumns("ai_usages")

type aiUsageColumns struct {
	tableAlias       string
	ID               psql.Expression
	UserID           psql.Expression
	PromptTokens     psql.Expression
	CompletionTokens psql.Expression
	TotalTokens      psql.Expression
	CreatedAt        psql.Expression
	UpdatedAt        psql.Expression
}

func (c aiUsageColumns) Alias() string {
	return c.tableAlias
}

func (aiUsageColumns) AliasedAs(alias string) aiUsageColumns {
	return buildAiUsageColumns(alias)
}

func buildAiUsageColumns(alias string) aiUsageColumns {
	return aiUsageColumns{
		tableAlias:       alias,
		ID:               psql.Quote(alias, "id"),
		UserID:           psql.Quote(alias, "user_id"),
		PromptTokens:     psql.Quote(alias, "prompt_tokens"),
		CompletionTokens: psql.Quote(alias, "completion_tokens"),
		TotalTokens:      psql.Quote(alias, "total_tokens"),
		CreatedAt:        psql.Quote(alias, "created_at"),
		UpdatedAt:        psql.Quote(alias, "updated_at"),
	}
}

type aiUsageWhere[Q psql.Filterable] struct {
	ID               psql.WhereMod[Q, uuid.UUID]
	UserID           psql.WhereMod[Q, uuid.UUID]
	PromptTokens     psql.WhereMod[Q, int64]
	CompletionTokens psql.WhereMod[Q, int64]
	TotalTokens      psql.WhereMod[Q, int64]
	CreatedAt        psql.WhereMod[Q, time.Time]
	UpdatedAt        psql.WhereMod[Q, time.Time]
}

func (aiUsageWhere[Q]) AliasedAs(alias string) aiUsageWhere[Q] {
	return buildAiUsageWhere[Q](buildAiUsageColumns(alias))
}

func buildAiUsageWhere[Q psql.Filterable](cols aiUsageColumns) aiUsageWhere[Q] {
	return aiUsageWhere[Q]{
		ID:               psql.Where[Q, uuid.UUID](cols.ID),
		UserID:           psql.Where[Q, uuid.UUID](cols.UserID),
		PromptTokens:     psql.Where[Q, int64](cols.PromptTokens),
		CompletionTokens: psql.Where[Q, int64](cols.CompletionTokens),
		TotalTokens:      psql.Where[Q, int64](cols.TotalTokens),
		CreatedAt:        psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:        psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var AiUsageErrors = &aiUsageErrors{
	ErrUniqueAiUsagesPkey: &UniqueConstraintError{s: "ai_usages_pkey"},
}

type aiUsageErrors struct {
	ErrUniqueAiUsagesPkey *UniqueConstraintError
}

// AiUsageSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type AiUsageSetter struct {
	ID               omit.Val[uuid.UUID] `db:"id,pk" json:"id"`
	UserID           omit.Val[uuid.UUID] `db:"user_id" json:"user_id"`
	PromptTokens     omit.Val[int64]     `db:"prompt_tokens" json:"prompt_tokens"`
	CompletionTokens omit.Val[int64]     `db:"completion_tokens" json:"completion_tokens"`
	TotalTokens      omit.Val[int64]     `db:"total_tokens" json:"total_tokens"`
	CreatedAt        omit.Val[time.Time] `db:"created_at" json:"created_at"`
	UpdatedAt        omit.Val[time.Time] `db:"updated_at" json:"updated_at"`
}

func (s AiUsageSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.PromptTokens.IsUnset() {
		vals = append(vals, "prompt_tokens")
	}

	if !s.CompletionTokens.IsUnset() {
		vals = append(vals, "completion_tokens")
	}

	if !s.TotalTokens.IsUnset() {
		vals = append(vals, "total_tokens")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s AiUsageSetter) Overwrite(t *AiUsage) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.PromptTokens.IsUnset() {
		t.PromptTokens, _ = s.PromptTokens.Get()
	}
	if !s.CompletionTokens.IsUnset() {
		t.CompletionTokens, _ = s.CompletionTokens.Get()
	}
	if !s.TotalTokens.IsUnset() {
		t.TotalTokens, _ = s.TotalTokens.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *AiUsageSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return AiUsages.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 7)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.UserID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.UserID)
		}

		if s.PromptTokens.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.PromptTokens)
		}

		if s.CompletionTokens.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.CompletionTokens)
		}

		if s.TotalTokens.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.TotalTokens)
		}

		if s.CreatedAt.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s AiUsageSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s AiUsageSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.PromptTokens.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "prompt_tokens")...),
			psql.Arg(s.PromptTokens),
		}})
	}

	if !s.CompletionTokens.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "completion_tokens")...),
			psql.Arg(s.CompletionTokens),
		}})
	}

	if !s.TotalTokens.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "total_tokens")...),
			psql.Arg(s.TotalTokens),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindAiUsage retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindAiUsage(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*AiUsage, error) {
	if len(cols) == 0 {
		return AiUsages.Query(
			SelectWhere.AiUsages.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return AiUsages.Query(
		SelectWhere.AiUsages.ID.EQ(IDPK),
		sm.Columns(AiUsages.Columns().Only(cols...)),
	).One(ctx, exec)
}

// AiUsageExists checks the presence of a single record by primary key
func AiUsageExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return AiUsages.Query(
		SelectWhere.AiUsages.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after AiUsage is retrieved from the database
func (o *AiUsage) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = AiUsages.AfterSelectHooks.RunHooks(ctx, exec, AiUsageSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = AiUsages.AfterInsertHooks.RunHooks(ctx, exec, AiUsageSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = AiUsages.AfterUpdateHooks.RunHooks(ctx, exec, AiUsageSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = AiUsages.AfterDeleteHooks.RunHooks(ctx, exec, AiUsageSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the AiUsage
func (o *AiUsage) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *AiUsage) pkEQ() dialect.Expression {
	return psql.Quote("ai_usages", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the AiUsage
func (o *AiUsage) Update(ctx context.Context, exec bob.Executor, s *AiUsageSetter) error {
	v, err := AiUsages.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single AiUsage record with an executor
func (o *AiUsage) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := AiUsages.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the AiUsage using the executor
func (o *AiUsage) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := AiUsages.Query(
		SelectWhere.AiUsages.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after AiUsageSlice is retrieved from the database
func (o AiUsageSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = AiUsages.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = AiUsages.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = AiUsages.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = AiUsages.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o AiUsageSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("ai_usages", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o AiUsageSlice) copyMatchingRows(from ...*AiUsage) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o AiUsageSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return AiUsages.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *AiUsage:
				o.copyMatchingRows(retrieved)
			case []*AiUsage:
				o.copyMatchingRows(retrieved...)
			case AiUsageSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a AiUsage or a slice of AiUsage
				// then run the AfterUpdateHooks on the slice
				_, err = AiUsages.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o AiUsageSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return AiUsages.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *AiUsage:
				o.copyMatchingRows(retrieved)
			case []*AiUsage:
				o.copyMatchingRows(retrieved...)
			case AiUsageSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a AiUsage or a slice of AiUsage
				// then run the AfterDeleteHooks on the slice
				_, err = AiUsages.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o AiUsageSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals AiUsageSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := AiUsages.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o AiUsageSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := AiUsages.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o AiUsageSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := AiUsages.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type aiUsageJoins[Q dialect.Joinable] struct {
	typ  string
	User func(context.Context) modAs[Q, userColumns]
}

func (j aiUsageJoins[Q]) aliasedAs(alias string) aiUsageJoins[Q] {
	return buildAiUsageJoins[Q](buildAiUsageColumns(alias), j.typ)
}

func buildAiUsageJoins[Q dialect.Joinable](cols aiUsageColumns, typ string) aiUsageJoins[Q] {
	return aiUsageJoins[Q]{
		typ:  typ,
		User: aiUsagesJoinUser[Q](cols, typ),
	}
}

func aiUsagesJoinUser[Q dialect.Joinable](from aiUsageColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// User starts a query for related objects on users
func (o *AiUsage) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os AiUsageSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *AiUsage) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("aiUsage cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.AiUsages = AiUsageSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("aiUsage has no relationship %q", name)
	}
}

func PreloadAiUsageUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.AiUsages,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.AiUsages.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadAiUsageUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAiUsageUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AiUsageUser", retrieved)
		}

		err := loader.LoadAiUsageUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAiUsageUser loads the aiUsage's User into the .R struct
func (o *AiUsage) LoadAiUsageUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.AiUsages = AiUsageSlice{o}

	o.R.User = related
	return nil
}

// LoadAiUsageUser loads the aiUsage's User into the .R struct
func (os AiUsageSlice) LoadAiUsageUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.AiUsages = append(rel.R.AiUsages, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachAiUsageUser0(ctx context.Context, exec bob.Executor, count int, aiUsage0 *AiUsage, user1 *User) (*AiUsage, error) {
	setter := &AiUsageSetter{
		UserID: omit.From(user1.ID),
	}

	err := aiUsage0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachAiUsageUser0: %w", err)
	}

	return aiUsage0, nil
}

func (aiUsage0 *AiUsage) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachAiUsageUser0(ctx, exec, 1, aiUsage0, user1)
	if err != nil {
		return err
	}

	aiUsage0.R.User = user1

	user1.R.AiUsages = append(user1.R.AiUsages, aiUsage0)

	return nil
}

func (aiUsage0 *AiUsage) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachAiUsageUser0(ctx, exec, 1, aiUsage0, user1)
	if err != nil {
		return err
	}

	aiUsage0.R.User = user1

	user1.R.AiUsages = append(user1.R.AiUsages, aiUsage0)

	return nil
}
