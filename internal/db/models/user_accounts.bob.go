// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// UserAccount is an object representing the database table.
type UserAccount struct {
	ID                uuid.UUID        `db:"id,pk" json:"id"`
	UserID            uuid.UUID        `db:"user_id" json:"user_id"`
	Type              ProviderTypes    `db:"type" json:"type"`
	Provider          Providers        `db:"provider" json:"provider"`
	ProviderAccountID string           `db:"provider_account_id" json:"provider_account_id"`
	Password          null.Val[string] `db:"password" json:"password"`
	RefreshToken      null.Val[string] `db:"refresh_token" json:"refresh_token"`
	AccessToken       null.Val[string] `db:"access_token" json:"access_token"`
	ExpiresAt         null.Val[int64]  `db:"expires_at" json:"expires_at"`
	IDToken           null.Val[string] `db:"id_token" json:"id_token"`
	Scope             null.Val[string] `db:"scope" json:"scope"`
	SessionState      null.Val[string] `db:"session_state" json:"session_state"`
	TokenType         null.Val[string] `db:"token_type" json:"token_type"`
	CreatedAt         time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt         time.Time        `db:"updated_at" json:"updated_at"`

	R userAccountR `db:"-" json:"-"`
}

// UserAccountSlice is an alias for a slice of pointers to UserAccount.
// This should almost always be used instead of []*UserAccount.
type UserAccountSlice []*UserAccount

// UserAccounts contains methods to work with the user_accounts table
var UserAccounts = psql.NewTablex[*UserAccount, UserAccountSlice, *UserAccountSetter]("", "user_accounts")

// UserAccountsQuery is a query on the user_accounts table
type UserAccountsQuery = *psql.ViewQuery[*UserAccount, UserAccountSlice]

// userAccountR is where relationships are stored.
type userAccountR struct {
	User *User `json:"User"` // user_accounts.user_accounts_user_id_fkey
}

type userAccountColumnNames struct {
	ID                string
	UserID            string
	Type              string
	Provider          string
	ProviderAccountID string
	Password          string
	RefreshToken      string
	AccessToken       string
	ExpiresAt         string
	IDToken           string
	Scope             string
	SessionState      string
	TokenType         string
	CreatedAt         string
	UpdatedAt         string
}

var UserAccountColumns = buildUserAccountColumns("user_accounts")

type userAccountColumns struct {
	tableAlias        string
	ID                psql.Expression
	UserID            psql.Expression
	Type              psql.Expression
	Provider          psql.Expression
	ProviderAccountID psql.Expression
	Password          psql.Expression
	RefreshToken      psql.Expression
	AccessToken       psql.Expression
	ExpiresAt         psql.Expression
	IDToken           psql.Expression
	Scope             psql.Expression
	SessionState      psql.Expression
	TokenType         psql.Expression
	CreatedAt         psql.Expression
	UpdatedAt         psql.Expression
}

func (c userAccountColumns) Alias() string {
	return c.tableAlias
}

func (userAccountColumns) AliasedAs(alias string) userAccountColumns {
	return buildUserAccountColumns(alias)
}

func buildUserAccountColumns(alias string) userAccountColumns {
	return userAccountColumns{
		tableAlias:        alias,
		ID:                psql.Quote(alias, "id"),
		UserID:            psql.Quote(alias, "user_id"),
		Type:              psql.Quote(alias, "type"),
		Provider:          psql.Quote(alias, "provider"),
		ProviderAccountID: psql.Quote(alias, "provider_account_id"),
		Password:          psql.Quote(alias, "password"),
		RefreshToken:      psql.Quote(alias, "refresh_token"),
		AccessToken:       psql.Quote(alias, "access_token"),
		ExpiresAt:         psql.Quote(alias, "expires_at"),
		IDToken:           psql.Quote(alias, "id_token"),
		Scope:             psql.Quote(alias, "scope"),
		SessionState:      psql.Quote(alias, "session_state"),
		TokenType:         psql.Quote(alias, "token_type"),
		CreatedAt:         psql.Quote(alias, "created_at"),
		UpdatedAt:         psql.Quote(alias, "updated_at"),
	}
}

type userAccountWhere[Q psql.Filterable] struct {
	ID                psql.WhereMod[Q, uuid.UUID]
	UserID            psql.WhereMod[Q, uuid.UUID]
	Type              psql.WhereMod[Q, ProviderTypes]
	Provider          psql.WhereMod[Q, Providers]
	ProviderAccountID psql.WhereMod[Q, string]
	Password          psql.WhereNullMod[Q, string]
	RefreshToken      psql.WhereNullMod[Q, string]
	AccessToken       psql.WhereNullMod[Q, string]
	ExpiresAt         psql.WhereNullMod[Q, int64]
	IDToken           psql.WhereNullMod[Q, string]
	Scope             psql.WhereNullMod[Q, string]
	SessionState      psql.WhereNullMod[Q, string]
	TokenType         psql.WhereNullMod[Q, string]
	CreatedAt         psql.WhereMod[Q, time.Time]
	UpdatedAt         psql.WhereMod[Q, time.Time]
}

func (userAccountWhere[Q]) AliasedAs(alias string) userAccountWhere[Q] {
	return buildUserAccountWhere[Q](buildUserAccountColumns(alias))
}

func buildUserAccountWhere[Q psql.Filterable](cols userAccountColumns) userAccountWhere[Q] {
	return userAccountWhere[Q]{
		ID:                psql.Where[Q, uuid.UUID](cols.ID),
		UserID:            psql.Where[Q, uuid.UUID](cols.UserID),
		Type:              psql.Where[Q, ProviderTypes](cols.Type),
		Provider:          psql.Where[Q, Providers](cols.Provider),
		ProviderAccountID: psql.Where[Q, string](cols.ProviderAccountID),
		Password:          psql.WhereNull[Q, string](cols.Password),
		RefreshToken:      psql.WhereNull[Q, string](cols.RefreshToken),
		AccessToken:       psql.WhereNull[Q, string](cols.AccessToken),
		ExpiresAt:         psql.WhereNull[Q, int64](cols.ExpiresAt),
		IDToken:           psql.WhereNull[Q, string](cols.IDToken),
		Scope:             psql.WhereNull[Q, string](cols.Scope),
		SessionState:      psql.WhereNull[Q, string](cols.SessionState),
		TokenType:         psql.WhereNull[Q, string](cols.TokenType),
		CreatedAt:         psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:         psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var UserAccountErrors = &userAccountErrors{
	ErrUniqueUserAccountsPkey: &UniqueConstraintError{s: "user_accounts_pkey"},

	ErrUniqueUserAccountsProviderProviderAccountIdUnique: &UniqueConstraintError{s: "user_accounts_provider_provider_account_id_unique"},

	ErrUniqueUserAccountsUserIdProviderUnique: &UniqueConstraintError{s: "user_accounts_user_id_provider_unique"},
}

type userAccountErrors struct {
	ErrUniqueUserAccountsPkey *UniqueConstraintError

	ErrUniqueUserAccountsProviderProviderAccountIdUnique *UniqueConstraintError

	ErrUniqueUserAccountsUserIdProviderUnique *UniqueConstraintError
}

// UserAccountSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserAccountSetter struct {
	ID                omit.Val[uuid.UUID]     `db:"id,pk" json:"id"`
	UserID            omit.Val[uuid.UUID]     `db:"user_id" json:"user_id"`
	Type              omit.Val[ProviderTypes] `db:"type" json:"type"`
	Provider          omit.Val[Providers]     `db:"provider" json:"provider"`
	ProviderAccountID omit.Val[string]        `db:"provider_account_id" json:"provider_account_id"`
	Password          omitnull.Val[string]    `db:"password" json:"password"`
	RefreshToken      omitnull.Val[string]    `db:"refresh_token" json:"refresh_token"`
	AccessToken       omitnull.Val[string]    `db:"access_token" json:"access_token"`
	ExpiresAt         omitnull.Val[int64]     `db:"expires_at" json:"expires_at"`
	IDToken           omitnull.Val[string]    `db:"id_token" json:"id_token"`
	Scope             omitnull.Val[string]    `db:"scope" json:"scope"`
	SessionState      omitnull.Val[string]    `db:"session_state" json:"session_state"`
	TokenType         omitnull.Val[string]    `db:"token_type" json:"token_type"`
	CreatedAt         omit.Val[time.Time]     `db:"created_at" json:"created_at"`
	UpdatedAt         omit.Val[time.Time]     `db:"updated_at" json:"updated_at"`
}

func (s UserAccountSetter) SetColumns() []string {
	vals := make([]string, 0, 15)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.Type.IsUnset() {
		vals = append(vals, "type")
	}

	if !s.Provider.IsUnset() {
		vals = append(vals, "provider")
	}

	if !s.ProviderAccountID.IsUnset() {
		vals = append(vals, "provider_account_id")
	}

	if !s.Password.IsUnset() {
		vals = append(vals, "password")
	}

	if !s.RefreshToken.IsUnset() {
		vals = append(vals, "refresh_token")
	}

	if !s.AccessToken.IsUnset() {
		vals = append(vals, "access_token")
	}

	if !s.ExpiresAt.IsUnset() {
		vals = append(vals, "expires_at")
	}

	if !s.IDToken.IsUnset() {
		vals = append(vals, "id_token")
	}

	if !s.Scope.IsUnset() {
		vals = append(vals, "scope")
	}

	if !s.SessionState.IsUnset() {
		vals = append(vals, "session_state")
	}

	if !s.TokenType.IsUnset() {
		vals = append(vals, "token_type")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s UserAccountSetter) Overwrite(t *UserAccount) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.Type.IsUnset() {
		t.Type, _ = s.Type.Get()
	}
	if !s.Provider.IsUnset() {
		t.Provider, _ = s.Provider.Get()
	}
	if !s.ProviderAccountID.IsUnset() {
		t.ProviderAccountID, _ = s.ProviderAccountID.Get()
	}
	if !s.Password.IsUnset() {
		t.Password, _ = s.Password.GetNull()
	}
	if !s.RefreshToken.IsUnset() {
		t.RefreshToken, _ = s.RefreshToken.GetNull()
	}
	if !s.AccessToken.IsUnset() {
		t.AccessToken, _ = s.AccessToken.GetNull()
	}
	if !s.ExpiresAt.IsUnset() {
		t.ExpiresAt, _ = s.ExpiresAt.GetNull()
	}
	if !s.IDToken.IsUnset() {
		t.IDToken, _ = s.IDToken.GetNull()
	}
	if !s.Scope.IsUnset() {
		t.Scope, _ = s.Scope.GetNull()
	}
	if !s.SessionState.IsUnset() {
		t.SessionState, _ = s.SessionState.GetNull()
	}
	if !s.TokenType.IsUnset() {
		t.TokenType, _ = s.TokenType.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *UserAccountSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return UserAccounts.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 15)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.UserID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.UserID)
		}

		if s.Type.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Type)
		}

		if s.Provider.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Provider)
		}

		if s.ProviderAccountID.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.ProviderAccountID)
		}

		if s.Password.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.Password)
		}

		if s.RefreshToken.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.RefreshToken)
		}

		if s.AccessToken.IsUnset() {
			vals[7] = psql.Raw("DEFAULT")
		} else {
			vals[7] = psql.Arg(s.AccessToken)
		}

		if s.ExpiresAt.IsUnset() {
			vals[8] = psql.Raw("DEFAULT")
		} else {
			vals[8] = psql.Arg(s.ExpiresAt)
		}

		if s.IDToken.IsUnset() {
			vals[9] = psql.Raw("DEFAULT")
		} else {
			vals[9] = psql.Arg(s.IDToken)
		}

		if s.Scope.IsUnset() {
			vals[10] = psql.Raw("DEFAULT")
		} else {
			vals[10] = psql.Arg(s.Scope)
		}

		if s.SessionState.IsUnset() {
			vals[11] = psql.Raw("DEFAULT")
		} else {
			vals[11] = psql.Arg(s.SessionState)
		}

		if s.TokenType.IsUnset() {
			vals[12] = psql.Raw("DEFAULT")
		} else {
			vals[12] = psql.Arg(s.TokenType)
		}

		if s.CreatedAt.IsUnset() {
			vals[13] = psql.Raw("DEFAULT")
		} else {
			vals[13] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[14] = psql.Raw("DEFAULT")
		} else {
			vals[14] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserAccountSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserAccountSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 15)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.Type.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "type")...),
			psql.Arg(s.Type),
		}})
	}

	if !s.Provider.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "provider")...),
			psql.Arg(s.Provider),
		}})
	}

	if !s.ProviderAccountID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "provider_account_id")...),
			psql.Arg(s.ProviderAccountID),
		}})
	}

	if !s.Password.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "password")...),
			psql.Arg(s.Password),
		}})
	}

	if !s.RefreshToken.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "refresh_token")...),
			psql.Arg(s.RefreshToken),
		}})
	}

	if !s.AccessToken.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "access_token")...),
			psql.Arg(s.AccessToken),
		}})
	}

	if !s.ExpiresAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "expires_at")...),
			psql.Arg(s.ExpiresAt),
		}})
	}

	if !s.IDToken.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id_token")...),
			psql.Arg(s.IDToken),
		}})
	}

	if !s.Scope.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "scope")...),
			psql.Arg(s.Scope),
		}})
	}

	if !s.SessionState.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "session_state")...),
			psql.Arg(s.SessionState),
		}})
	}

	if !s.TokenType.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "token_type")...),
			psql.Arg(s.TokenType),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindUserAccount retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUserAccount(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*UserAccount, error) {
	if len(cols) == 0 {
		return UserAccounts.Query(
			SelectWhere.UserAccounts.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return UserAccounts.Query(
		SelectWhere.UserAccounts.ID.EQ(IDPK),
		sm.Columns(UserAccounts.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserAccountExists checks the presence of a single record by primary key
func UserAccountExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return UserAccounts.Query(
		SelectWhere.UserAccounts.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after UserAccount is retrieved from the database
func (o *UserAccount) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserAccounts.AfterSelectHooks.RunHooks(ctx, exec, UserAccountSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = UserAccounts.AfterInsertHooks.RunHooks(ctx, exec, UserAccountSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = UserAccounts.AfterUpdateHooks.RunHooks(ctx, exec, UserAccountSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = UserAccounts.AfterDeleteHooks.RunHooks(ctx, exec, UserAccountSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the UserAccount
func (o *UserAccount) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *UserAccount) pkEQ() dialect.Expression {
	return psql.Quote("user_accounts", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the UserAccount
func (o *UserAccount) Update(ctx context.Context, exec bob.Executor, s *UserAccountSetter) error {
	v, err := UserAccounts.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single UserAccount record with an executor
func (o *UserAccount) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := UserAccounts.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the UserAccount using the executor
func (o *UserAccount) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := UserAccounts.Query(
		SelectWhere.UserAccounts.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserAccountSlice is retrieved from the database
func (o UserAccountSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserAccounts.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = UserAccounts.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = UserAccounts.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = UserAccounts.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserAccountSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("user_accounts", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserAccountSlice) copyMatchingRows(from ...*UserAccount) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserAccountSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserAccounts.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserAccount:
				o.copyMatchingRows(retrieved)
			case []*UserAccount:
				o.copyMatchingRows(retrieved...)
			case UserAccountSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserAccount or a slice of UserAccount
				// then run the AfterUpdateHooks on the slice
				_, err = UserAccounts.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserAccountSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserAccounts.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserAccount:
				o.copyMatchingRows(retrieved)
			case []*UserAccount:
				o.copyMatchingRows(retrieved...)
			case UserAccountSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserAccount or a slice of UserAccount
				// then run the AfterDeleteHooks on the slice
				_, err = UserAccounts.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserAccountSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserAccountSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserAccounts.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserAccountSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserAccounts.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserAccountSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := UserAccounts.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type userAccountJoins[Q dialect.Joinable] struct {
	typ  string
	User func(context.Context) modAs[Q, userColumns]
}

func (j userAccountJoins[Q]) aliasedAs(alias string) userAccountJoins[Q] {
	return buildUserAccountJoins[Q](buildUserAccountColumns(alias), j.typ)
}

func buildUserAccountJoins[Q dialect.Joinable](cols userAccountColumns, typ string) userAccountJoins[Q] {
	return userAccountJoins[Q]{
		typ:  typ,
		User: userAccountsJoinUser[Q](cols, typ),
	}
}

func userAccountsJoinUser[Q dialect.Joinable](from userAccountColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// User starts a query for related objects on users
func (o *UserAccount) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os UserAccountSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *UserAccount) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("userAccount cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.UserAccounts = UserAccountSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("userAccount has no relationship %q", name)
	}
}

func PreloadUserAccountUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.UserAccounts,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.UserAccounts.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadUserAccountUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserAccountUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserAccountUser", retrieved)
		}

		err := loader.LoadUserAccountUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserAccountUser loads the userAccount's User into the .R struct
func (o *UserAccount) LoadUserAccountUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.UserAccounts = UserAccountSlice{o}

	o.R.User = related
	return nil
}

// LoadUserAccountUser loads the userAccount's User into the .R struct
func (os UserAccountSlice) LoadUserAccountUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.UserAccounts = append(rel.R.UserAccounts, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachUserAccountUser0(ctx context.Context, exec bob.Executor, count int, userAccount0 *UserAccount, user1 *User) (*UserAccount, error) {
	setter := &UserAccountSetter{
		UserID: omit.From(user1.ID),
	}

	err := userAccount0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserAccountUser0: %w", err)
	}

	return userAccount0, nil
}

func (userAccount0 *UserAccount) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserAccountUser0(ctx, exec, 1, userAccount0, user1)
	if err != nil {
		return err
	}

	userAccount0.R.User = user1

	user1.R.UserAccounts = append(user1.R.UserAccounts, userAccount0)

	return nil
}

func (userAccount0 *UserAccount) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachUserAccountUser0(ctx, exec, 1, userAccount0, user1)
	if err != nil {
		return err
	}

	userAccount0.R.User = user1

	user1.R.UserAccounts = append(user1.R.UserAccounts, userAccount0)

	return nil
}
