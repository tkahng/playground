// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// ProductRole is an object representing the database table.
type ProductRole struct {
	ProductID string    `db:"product_id,pk" json:"product_id"`
	RoleID    uuid.UUID `db:"role_id,pk" json:"role_id"`

	R productRoleR `db:"-" json:"-"`
}

// ProductRoleSlice is an alias for a slice of pointers to ProductRole.
// This should almost always be used instead of []*ProductRole.
type ProductRoleSlice []*ProductRole

// ProductRoles contains methods to work with the product_roles table
var ProductRoles = psql.NewTablex[*ProductRole, ProductRoleSlice, *ProductRoleSetter]("", "product_roles")

// ProductRolesQuery is a query on the product_roles table
type ProductRolesQuery = *psql.ViewQuery[*ProductRole, ProductRoleSlice]

// productRoleR is where relationships are stored.
type productRoleR struct {
	ProductStripeProduct *StripeProduct `json:"ProductStripeProduct"` // product_roles.product_roles_product_id_fkey
	Role                 *Role          `json:"Role"`                 // product_roles.product_roles_role_id_fkey
}

type productRoleColumnNames struct {
	ProductID string
	RoleID    string
}

var ProductRoleColumns = buildProductRoleColumns("product_roles")

type productRoleColumns struct {
	tableAlias string
	ProductID  psql.Expression
	RoleID     psql.Expression
}

func (c productRoleColumns) Alias() string {
	return c.tableAlias
}

func (productRoleColumns) AliasedAs(alias string) productRoleColumns {
	return buildProductRoleColumns(alias)
}

func buildProductRoleColumns(alias string) productRoleColumns {
	return productRoleColumns{
		tableAlias: alias,
		ProductID:  psql.Quote(alias, "product_id"),
		RoleID:     psql.Quote(alias, "role_id"),
	}
}

type productRoleWhere[Q psql.Filterable] struct {
	ProductID psql.WhereMod[Q, string]
	RoleID    psql.WhereMod[Q, uuid.UUID]
}

func (productRoleWhere[Q]) AliasedAs(alias string) productRoleWhere[Q] {
	return buildProductRoleWhere[Q](buildProductRoleColumns(alias))
}

func buildProductRoleWhere[Q psql.Filterable](cols productRoleColumns) productRoleWhere[Q] {
	return productRoleWhere[Q]{
		ProductID: psql.Where[Q, string](cols.ProductID),
		RoleID:    psql.Where[Q, uuid.UUID](cols.RoleID),
	}
}

var ProductRoleErrors = &productRoleErrors{
	ErrUniqueProductRolesPkey: &UniqueConstraintError{s: "product_roles_pkey"},
}

type productRoleErrors struct {
	ErrUniqueProductRolesPkey *UniqueConstraintError
}

// ProductRoleSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ProductRoleSetter struct {
	ProductID omit.Val[string]    `db:"product_id,pk" json:"product_id"`
	RoleID    omit.Val[uuid.UUID] `db:"role_id,pk" json:"role_id"`
}

func (s ProductRoleSetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if !s.ProductID.IsUnset() {
		vals = append(vals, "product_id")
	}

	if !s.RoleID.IsUnset() {
		vals = append(vals, "role_id")
	}

	return vals
}

func (s ProductRoleSetter) Overwrite(t *ProductRole) {
	if !s.ProductID.IsUnset() {
		t.ProductID, _ = s.ProductID.Get()
	}
	if !s.RoleID.IsUnset() {
		t.RoleID, _ = s.RoleID.Get()
	}
}

func (s *ProductRoleSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return ProductRoles.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 2)
		if s.ProductID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ProductID)
		}

		if s.RoleID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.RoleID)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s ProductRoleSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s ProductRoleSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if !s.ProductID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "product_id")...),
			psql.Arg(s.ProductID),
		}})
	}

	if !s.RoleID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "role_id")...),
			psql.Arg(s.RoleID),
		}})
	}

	return exprs
}

// FindProductRole retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindProductRole(ctx context.Context, exec bob.Executor, ProductIDPK string, RoleIDPK uuid.UUID, cols ...string) (*ProductRole, error) {
	if len(cols) == 0 {
		return ProductRoles.Query(
			SelectWhere.ProductRoles.ProductID.EQ(ProductIDPK),
			SelectWhere.ProductRoles.RoleID.EQ(RoleIDPK),
		).One(ctx, exec)
	}

	return ProductRoles.Query(
		SelectWhere.ProductRoles.ProductID.EQ(ProductIDPK),
		SelectWhere.ProductRoles.RoleID.EQ(RoleIDPK),
		sm.Columns(ProductRoles.Columns().Only(cols...)),
	).One(ctx, exec)
}

// ProductRoleExists checks the presence of a single record by primary key
func ProductRoleExists(ctx context.Context, exec bob.Executor, ProductIDPK string, RoleIDPK uuid.UUID) (bool, error) {
	return ProductRoles.Query(
		SelectWhere.ProductRoles.ProductID.EQ(ProductIDPK),
		SelectWhere.ProductRoles.RoleID.EQ(RoleIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after ProductRole is retrieved from the database
func (o *ProductRole) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = ProductRoles.AfterSelectHooks.RunHooks(ctx, exec, ProductRoleSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = ProductRoles.AfterInsertHooks.RunHooks(ctx, exec, ProductRoleSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = ProductRoles.AfterUpdateHooks.RunHooks(ctx, exec, ProductRoleSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = ProductRoles.AfterDeleteHooks.RunHooks(ctx, exec, ProductRoleSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the ProductRole
func (o *ProductRole) PrimaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.ProductID,
		o.RoleID,
	)
}

func (o *ProductRole) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("product_roles", "product_id"), psql.Quote("product_roles", "role_id")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the ProductRole
func (o *ProductRole) Update(ctx context.Context, exec bob.Executor, s *ProductRoleSetter) error {
	v, err := ProductRoles.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single ProductRole record with an executor
func (o *ProductRole) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := ProductRoles.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the ProductRole using the executor
func (o *ProductRole) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := ProductRoles.Query(
		SelectWhere.ProductRoles.ProductID.EQ(o.ProductID),
		SelectWhere.ProductRoles.RoleID.EQ(o.RoleID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after ProductRoleSlice is retrieved from the database
func (o ProductRoleSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = ProductRoles.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = ProductRoles.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = ProductRoles.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = ProductRoles.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o ProductRoleSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("product_roles", "product_id"), psql.Quote("product_roles", "role_id")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o ProductRoleSlice) copyMatchingRows(from ...*ProductRole) {
	for i, old := range o {
		for _, new := range from {
			if new.ProductID != old.ProductID {
				continue
			}
			if new.RoleID != old.RoleID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o ProductRoleSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return ProductRoles.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *ProductRole:
				o.copyMatchingRows(retrieved)
			case []*ProductRole:
				o.copyMatchingRows(retrieved...)
			case ProductRoleSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a ProductRole or a slice of ProductRole
				// then run the AfterUpdateHooks on the slice
				_, err = ProductRoles.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o ProductRoleSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return ProductRoles.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *ProductRole:
				o.copyMatchingRows(retrieved)
			case []*ProductRole:
				o.copyMatchingRows(retrieved...)
			case ProductRoleSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a ProductRole or a slice of ProductRole
				// then run the AfterDeleteHooks on the slice
				_, err = ProductRoles.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o ProductRoleSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ProductRoleSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := ProductRoles.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o ProductRoleSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := ProductRoles.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o ProductRoleSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := ProductRoles.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type productRoleJoins[Q dialect.Joinable] struct {
	typ                  string
	ProductStripeProduct func(context.Context) modAs[Q, stripeProductColumns]
	Role                 func(context.Context) modAs[Q, roleColumns]
}

func (j productRoleJoins[Q]) aliasedAs(alias string) productRoleJoins[Q] {
	return buildProductRoleJoins[Q](buildProductRoleColumns(alias), j.typ)
}

func buildProductRoleJoins[Q dialect.Joinable](cols productRoleColumns, typ string) productRoleJoins[Q] {
	return productRoleJoins[Q]{
		typ:                  typ,
		ProductStripeProduct: productRolesJoinProductStripeProduct[Q](cols, typ),
		Role:                 productRolesJoinRole[Q](cols, typ),
	}
}

func productRolesJoinProductStripeProduct[Q dialect.Joinable](from productRoleColumns, typ string) func(context.Context) modAs[Q, stripeProductColumns] {
	return func(ctx context.Context) modAs[Q, stripeProductColumns] {
		return modAs[Q, stripeProductColumns]{
			c: StripeProductColumns,
			f: func(to stripeProductColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, StripeProducts.Name().As(to.Alias())).On(
						to.ID.EQ(from.ProductID),
					))
				}

				return mods
			},
		}
	}
}

func productRolesJoinRole[Q dialect.Joinable](from productRoleColumns, typ string) func(context.Context) modAs[Q, roleColumns] {
	return func(ctx context.Context) modAs[Q, roleColumns] {
		return modAs[Q, roleColumns]{
			c: RoleColumns,
			f: func(to roleColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Roles.Name().As(to.Alias())).On(
						to.ID.EQ(from.RoleID),
					))
				}

				return mods
			},
		}
	}
}

// ProductStripeProduct starts a query for related objects on stripe_products
func (o *ProductRole) ProductStripeProduct(mods ...bob.Mod[*dialect.SelectQuery]) StripeProductsQuery {
	return StripeProducts.Query(append(mods,
		sm.Where(StripeProductColumns.ID.EQ(psql.Arg(o.ProductID))),
	)...)
}

func (os ProductRoleSlice) ProductStripeProduct(mods ...bob.Mod[*dialect.SelectQuery]) StripeProductsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ProductID)
	}

	return StripeProducts.Query(append(mods,
		sm.Where(psql.Group(StripeProductColumns.ID).In(PKArgs...)),
	)...)
}

// Role starts a query for related objects on roles
func (o *ProductRole) Role(mods ...bob.Mod[*dialect.SelectQuery]) RolesQuery {
	return Roles.Query(append(mods,
		sm.Where(RoleColumns.ID.EQ(psql.Arg(o.RoleID))),
	)...)
}

func (os ProductRoleSlice) Role(mods ...bob.Mod[*dialect.SelectQuery]) RolesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.RoleID)
	}

	return Roles.Query(append(mods,
		sm.Where(psql.Group(RoleColumns.ID).In(PKArgs...)),
	)...)
}

func (o *ProductRole) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "ProductStripeProduct":
		rel, ok := retrieved.(*StripeProduct)
		if !ok {
			return fmt.Errorf("productRole cannot load %T as %q", retrieved, name)
		}

		o.R.ProductStripeProduct = rel

		return nil
	case "Role":
		rel, ok := retrieved.(*Role)
		if !ok {
			return fmt.Errorf("productRole cannot load %T as %q", retrieved, name)
		}

		o.R.Role = rel

		return nil
	default:
		return fmt.Errorf("productRole has no relationship %q", name)
	}
}

func PreloadProductRoleProductStripeProduct(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*StripeProduct, StripeProductSlice](orm.Relationship{
		Name: "ProductStripeProduct",
		Sides: []orm.RelSide{
			{
				From: TableNames.ProductRoles,
				To:   TableNames.StripeProducts,
				FromColumns: []string{
					ColumnNames.ProductRoles.ProductID,
				},
				ToColumns: []string{
					ColumnNames.StripeProducts.ID,
				},
			},
		},
	}, StripeProducts.Columns().Names(), opts...)
}

func ThenLoadProductRoleProductStripeProduct(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadProductRoleProductStripeProduct(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load ProductRoleProductStripeProduct", retrieved)
		}

		err := loader.LoadProductRoleProductStripeProduct(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadProductRoleProductStripeProduct loads the productRole's ProductStripeProduct into the .R struct
func (o *ProductRole) LoadProductRoleProductStripeProduct(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ProductStripeProduct = nil

	related, err := o.ProductStripeProduct(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R.ProductStripeProduct = related
	return nil
}

// LoadProductRoleProductStripeProduct loads the productRole's ProductStripeProduct into the .R struct
func (os ProductRoleSlice) LoadProductRoleProductStripeProduct(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	stripeProducts, err := os.ProductStripeProduct(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range stripeProducts {
			if o.ProductID != rel.ID {
				continue
			}

			o.R.ProductStripeProduct = rel
			break
		}
	}

	return nil
}

func PreloadProductRoleRole(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Role, RoleSlice](orm.Relationship{
		Name: "Role",
		Sides: []orm.RelSide{
			{
				From: TableNames.ProductRoles,
				To:   TableNames.Roles,
				FromColumns: []string{
					ColumnNames.ProductRoles.RoleID,
				},
				ToColumns: []string{
					ColumnNames.Roles.ID,
				},
			},
		},
	}, Roles.Columns().Names(), opts...)
}

func ThenLoadProductRoleRole(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadProductRoleRole(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load ProductRoleRole", retrieved)
		}

		err := loader.LoadProductRoleRole(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadProductRoleRole loads the productRole's Role into the .R struct
func (o *ProductRole) LoadProductRoleRole(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Role = nil

	related, err := o.Role(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R.Role = related
	return nil
}

// LoadProductRoleRole loads the productRole's Role into the .R struct
func (os ProductRoleSlice) LoadProductRoleRole(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	roles, err := os.Role(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range roles {
			if o.RoleID != rel.ID {
				continue
			}

			o.R.Role = rel
			break
		}
	}

	return nil
}

func attachProductRoleProductStripeProduct0(ctx context.Context, exec bob.Executor, count int, productRole0 *ProductRole, stripeProduct1 *StripeProduct) (*ProductRole, error) {
	setter := &ProductRoleSetter{
		ProductID: omit.From(stripeProduct1.ID),
	}

	err := productRole0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachProductRoleProductStripeProduct0: %w", err)
	}

	return productRole0, nil
}

func (productRole0 *ProductRole) InsertProductStripeProduct(ctx context.Context, exec bob.Executor, related *StripeProductSetter) error {
	stripeProduct1, err := StripeProducts.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachProductRoleProductStripeProduct0(ctx, exec, 1, productRole0, stripeProduct1)
	if err != nil {
		return err
	}

	productRole0.R.ProductStripeProduct = stripeProduct1

	return nil
}

func (productRole0 *ProductRole) AttachProductStripeProduct(ctx context.Context, exec bob.Executor, stripeProduct1 *StripeProduct) error {
	var err error

	_, err = attachProductRoleProductStripeProduct0(ctx, exec, 1, productRole0, stripeProduct1)
	if err != nil {
		return err
	}

	productRole0.R.ProductStripeProduct = stripeProduct1

	return nil
}

func attachProductRoleRole0(ctx context.Context, exec bob.Executor, count int, productRole0 *ProductRole, role1 *Role) (*ProductRole, error) {
	setter := &ProductRoleSetter{
		RoleID: omit.From(role1.ID),
	}

	err := productRole0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachProductRoleRole0: %w", err)
	}

	return productRole0, nil
}

func (productRole0 *ProductRole) InsertRole(ctx context.Context, exec bob.Executor, related *RoleSetter) error {
	role1, err := Roles.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachProductRoleRole0(ctx, exec, 1, productRole0, role1)
	if err != nil {
		return err
	}

	productRole0.R.Role = role1

	return nil
}

func (productRole0 *ProductRole) AttachRole(ctx context.Context, exec bob.Executor, role1 *Role) error {
	var err error

	_, err = attachProductRoleRole0(ctx, exec, 1, productRole0, role1)
	if err != nil {
		return err
	}

	productRole0.R.Role = role1

	return nil
}
