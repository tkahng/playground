// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Medium is an object representing the database table.
type Medium struct {
	ID               uuid.UUID           `db:"id,pk" json:"id"`
	UserID           null.Val[uuid.UUID] `db:"user_id" json:"user_id"`
	Disk             string              `db:"disk" json:"disk"`
	Directory        string              `db:"directory" json:"directory"`
	Filename         string              `db:"filename" json:"filename"`
	OriginalFilename string              `db:"original_filename" json:"original_filename"`
	Extension        string              `db:"extension" json:"extension"`
	MimeType         string              `db:"mime_type" json:"mime_type"`
	Size             int64               `db:"size" json:"size"`
	CreatedAt        time.Time           `db:"created_at" json:"created_at"`
	UpdatedAt        time.Time           `db:"updated_at" json:"updated_at"`

	R mediumR `db:"-" json:"-"`
}

// MediumSlice is an alias for a slice of pointers to Medium.
// This should almost always be used instead of []*Medium.
type MediumSlice []*Medium

// Media contains methods to work with the media table
var Media = psql.NewTablex[*Medium, MediumSlice, *MediumSetter]("", "media")

// MediaQuery is a query on the media table
type MediaQuery = *psql.ViewQuery[*Medium, MediumSlice]

// mediumR is where relationships are stored.
type mediumR struct {
	User *User `json:"User"` // media.media_user_id_fkey
}

type mediumColumnNames struct {
	ID               string
	UserID           string
	Disk             string
	Directory        string
	Filename         string
	OriginalFilename string
	Extension        string
	MimeType         string
	Size             string
	CreatedAt        string
	UpdatedAt        string
}

var MediumColumns = buildMediumColumns("media")

type mediumColumns struct {
	tableAlias       string
	ID               psql.Expression
	UserID           psql.Expression
	Disk             psql.Expression
	Directory        psql.Expression
	Filename         psql.Expression
	OriginalFilename psql.Expression
	Extension        psql.Expression
	MimeType         psql.Expression
	Size             psql.Expression
	CreatedAt        psql.Expression
	UpdatedAt        psql.Expression
}

func (c mediumColumns) Alias() string {
	return c.tableAlias
}

func (mediumColumns) AliasedAs(alias string) mediumColumns {
	return buildMediumColumns(alias)
}

func buildMediumColumns(alias string) mediumColumns {
	return mediumColumns{
		tableAlias:       alias,
		ID:               psql.Quote(alias, "id"),
		UserID:           psql.Quote(alias, "user_id"),
		Disk:             psql.Quote(alias, "disk"),
		Directory:        psql.Quote(alias, "directory"),
		Filename:         psql.Quote(alias, "filename"),
		OriginalFilename: psql.Quote(alias, "original_filename"),
		Extension:        psql.Quote(alias, "extension"),
		MimeType:         psql.Quote(alias, "mime_type"),
		Size:             psql.Quote(alias, "size"),
		CreatedAt:        psql.Quote(alias, "created_at"),
		UpdatedAt:        psql.Quote(alias, "updated_at"),
	}
}

type mediumWhere[Q psql.Filterable] struct {
	ID               psql.WhereMod[Q, uuid.UUID]
	UserID           psql.WhereNullMod[Q, uuid.UUID]
	Disk             psql.WhereMod[Q, string]
	Directory        psql.WhereMod[Q, string]
	Filename         psql.WhereMod[Q, string]
	OriginalFilename psql.WhereMod[Q, string]
	Extension        psql.WhereMod[Q, string]
	MimeType         psql.WhereMod[Q, string]
	Size             psql.WhereMod[Q, int64]
	CreatedAt        psql.WhereMod[Q, time.Time]
	UpdatedAt        psql.WhereMod[Q, time.Time]
}

func (mediumWhere[Q]) AliasedAs(alias string) mediumWhere[Q] {
	return buildMediumWhere[Q](buildMediumColumns(alias))
}

func buildMediumWhere[Q psql.Filterable](cols mediumColumns) mediumWhere[Q] {
	return mediumWhere[Q]{
		ID:               psql.Where[Q, uuid.UUID](cols.ID),
		UserID:           psql.WhereNull[Q, uuid.UUID](cols.UserID),
		Disk:             psql.Where[Q, string](cols.Disk),
		Directory:        psql.Where[Q, string](cols.Directory),
		Filename:         psql.Where[Q, string](cols.Filename),
		OriginalFilename: psql.Where[Q, string](cols.OriginalFilename),
		Extension:        psql.Where[Q, string](cols.Extension),
		MimeType:         psql.Where[Q, string](cols.MimeType),
		Size:             psql.Where[Q, int64](cols.Size),
		CreatedAt:        psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:        psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var MediumErrors = &mediumErrors{
	ErrUniqueMediaPkey: &UniqueConstraintError{s: "media_pkey"},

	ErrUniqueMediaDiskDirectoryFilenameExtension: &UniqueConstraintError{s: "media_disk_directory_filename_extension"},
}

type mediumErrors struct {
	ErrUniqueMediaPkey *UniqueConstraintError

	ErrUniqueMediaDiskDirectoryFilenameExtension *UniqueConstraintError
}

// MediumSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type MediumSetter struct {
	ID               omit.Val[uuid.UUID]     `db:"id,pk" json:"id"`
	UserID           omitnull.Val[uuid.UUID] `db:"user_id" json:"user_id"`
	Disk             omit.Val[string]        `db:"disk" json:"disk"`
	Directory        omit.Val[string]        `db:"directory" json:"directory"`
	Filename         omit.Val[string]        `db:"filename" json:"filename"`
	OriginalFilename omit.Val[string]        `db:"original_filename" json:"original_filename"`
	Extension        omit.Val[string]        `db:"extension" json:"extension"`
	MimeType         omit.Val[string]        `db:"mime_type" json:"mime_type"`
	Size             omit.Val[int64]         `db:"size" json:"size"`
	CreatedAt        omit.Val[time.Time]     `db:"created_at" json:"created_at"`
	UpdatedAt        omit.Val[time.Time]     `db:"updated_at" json:"updated_at"`
}

func (s MediumSetter) SetColumns() []string {
	vals := make([]string, 0, 11)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.Disk.IsUnset() {
		vals = append(vals, "disk")
	}

	if !s.Directory.IsUnset() {
		vals = append(vals, "directory")
	}

	if !s.Filename.IsUnset() {
		vals = append(vals, "filename")
	}

	if !s.OriginalFilename.IsUnset() {
		vals = append(vals, "original_filename")
	}

	if !s.Extension.IsUnset() {
		vals = append(vals, "extension")
	}

	if !s.MimeType.IsUnset() {
		vals = append(vals, "mime_type")
	}

	if !s.Size.IsUnset() {
		vals = append(vals, "size")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s MediumSetter) Overwrite(t *Medium) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.GetNull()
	}
	if !s.Disk.IsUnset() {
		t.Disk, _ = s.Disk.Get()
	}
	if !s.Directory.IsUnset() {
		t.Directory, _ = s.Directory.Get()
	}
	if !s.Filename.IsUnset() {
		t.Filename, _ = s.Filename.Get()
	}
	if !s.OriginalFilename.IsUnset() {
		t.OriginalFilename, _ = s.OriginalFilename.Get()
	}
	if !s.Extension.IsUnset() {
		t.Extension, _ = s.Extension.Get()
	}
	if !s.MimeType.IsUnset() {
		t.MimeType, _ = s.MimeType.Get()
	}
	if !s.Size.IsUnset() {
		t.Size, _ = s.Size.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *MediumSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Media.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 11)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.UserID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.UserID)
		}

		if s.Disk.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Disk)
		}

		if s.Directory.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Directory)
		}

		if s.Filename.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.Filename)
		}

		if s.OriginalFilename.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.OriginalFilename)
		}

		if s.Extension.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.Extension)
		}

		if s.MimeType.IsUnset() {
			vals[7] = psql.Raw("DEFAULT")
		} else {
			vals[7] = psql.Arg(s.MimeType)
		}

		if s.Size.IsUnset() {
			vals[8] = psql.Raw("DEFAULT")
		} else {
			vals[8] = psql.Arg(s.Size)
		}

		if s.CreatedAt.IsUnset() {
			vals[9] = psql.Raw("DEFAULT")
		} else {
			vals[9] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[10] = psql.Raw("DEFAULT")
		} else {
			vals[10] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s MediumSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s MediumSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 11)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.Disk.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "disk")...),
			psql.Arg(s.Disk),
		}})
	}

	if !s.Directory.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "directory")...),
			psql.Arg(s.Directory),
		}})
	}

	if !s.Filename.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "filename")...),
			psql.Arg(s.Filename),
		}})
	}

	if !s.OriginalFilename.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "original_filename")...),
			psql.Arg(s.OriginalFilename),
		}})
	}

	if !s.Extension.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "extension")...),
			psql.Arg(s.Extension),
		}})
	}

	if !s.MimeType.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "mime_type")...),
			psql.Arg(s.MimeType),
		}})
	}

	if !s.Size.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "size")...),
			psql.Arg(s.Size),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindMedium retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindMedium(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*Medium, error) {
	if len(cols) == 0 {
		return Media.Query(
			SelectWhere.Media.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Media.Query(
		SelectWhere.Media.ID.EQ(IDPK),
		sm.Columns(Media.Columns().Only(cols...)),
	).One(ctx, exec)
}

// MediumExists checks the presence of a single record by primary key
func MediumExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return Media.Query(
		SelectWhere.Media.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Medium is retrieved from the database
func (o *Medium) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Media.AfterSelectHooks.RunHooks(ctx, exec, MediumSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Media.AfterInsertHooks.RunHooks(ctx, exec, MediumSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Media.AfterUpdateHooks.RunHooks(ctx, exec, MediumSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Media.AfterDeleteHooks.RunHooks(ctx, exec, MediumSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Medium
func (o *Medium) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Medium) pkEQ() dialect.Expression {
	return psql.Quote("media", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Medium
func (o *Medium) Update(ctx context.Context, exec bob.Executor, s *MediumSetter) error {
	v, err := Media.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Medium record with an executor
func (o *Medium) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Media.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Medium using the executor
func (o *Medium) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Media.Query(
		SelectWhere.Media.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after MediumSlice is retrieved from the database
func (o MediumSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Media.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Media.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Media.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Media.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o MediumSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("media", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o MediumSlice) copyMatchingRows(from ...*Medium) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o MediumSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Media.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Medium:
				o.copyMatchingRows(retrieved)
			case []*Medium:
				o.copyMatchingRows(retrieved...)
			case MediumSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Medium or a slice of Medium
				// then run the AfterUpdateHooks on the slice
				_, err = Media.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o MediumSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Media.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Medium:
				o.copyMatchingRows(retrieved)
			case []*Medium:
				o.copyMatchingRows(retrieved...)
			case MediumSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Medium or a slice of Medium
				// then run the AfterDeleteHooks on the slice
				_, err = Media.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o MediumSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals MediumSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Media.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o MediumSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Media.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o MediumSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Media.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type mediumJoins[Q dialect.Joinable] struct {
	typ  string
	User func(context.Context) modAs[Q, userColumns]
}

func (j mediumJoins[Q]) aliasedAs(alias string) mediumJoins[Q] {
	return buildMediumJoins[Q](buildMediumColumns(alias), j.typ)
}

func buildMediumJoins[Q dialect.Joinable](cols mediumColumns, typ string) mediumJoins[Q] {
	return mediumJoins[Q]{
		typ:  typ,
		User: mediaJoinUser[Q](cols, typ),
	}
}

func mediaJoinUser[Q dialect.Joinable](from mediumColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// User starts a query for related objects on users
func (o *Medium) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os MediumSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *Medium) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("medium cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.Media = MediumSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("medium has no relationship %q", name)
	}
}

func PreloadMediumUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.Media,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.Media.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadMediumUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadMediumUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load MediumUser", retrieved)
		}

		err := loader.LoadMediumUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadMediumUser loads the medium's User into the .R struct
func (o *Medium) LoadMediumUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Media = MediumSlice{o}

	o.R.User = related
	return nil
}

// LoadMediumUser loads the medium's User into the .R struct
func (os MediumSlice) LoadMediumUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID.GetOrZero() != rel.ID {
				continue
			}

			rel.R.Media = append(rel.R.Media, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachMediumUser0(ctx context.Context, exec bob.Executor, count int, medium0 *Medium, user1 *User) (*Medium, error) {
	setter := &MediumSetter{
		UserID: omitnull.From(user1.ID),
	}

	err := medium0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachMediumUser0: %w", err)
	}

	return medium0, nil
}

func (medium0 *Medium) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachMediumUser0(ctx, exec, 1, medium0, user1)
	if err != nil {
		return err
	}

	medium0.R.User = user1

	user1.R.Media = append(user1.R.Media, medium0)

	return nil
}

func (medium0 *Medium) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachMediumUser0(ctx, exec, 1, medium0, user1)
	if err != nil {
		return err
	}

	medium0.R.User = user1

	user1.R.Media = append(user1.R.Media, medium0)

	return nil
}
