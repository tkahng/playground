// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types"
)

// StripeCustomer is an object representing the database table.
type StripeCustomer struct {
	ID             uuid.UUID                             `db:"id,pk" json:"id"`
	StripeID       string                                `db:"stripe_id" json:"stripe_id"`
	BillingAddress null.Val[types.JSON[json.RawMessage]] `db:"billing_address" json:"billing_address"`
	PaymentMethod  null.Val[types.JSON[json.RawMessage]] `db:"payment_method" json:"payment_method"`
	CreatedAt      time.Time                             `db:"created_at" json:"created_at"`
	UpdatedAt      time.Time                             `db:"updated_at" json:"updated_at"`

	R stripeCustomerR `db:"-" json:"-"`
}

// StripeCustomerSlice is an alias for a slice of pointers to StripeCustomer.
// This should almost always be used instead of []*StripeCustomer.
type StripeCustomerSlice []*StripeCustomer

// StripeCustomers contains methods to work with the stripe_customers table
var StripeCustomers = psql.NewTablex[*StripeCustomer, StripeCustomerSlice, *StripeCustomerSetter]("", "stripe_customers")

// StripeCustomersQuery is a query on the stripe_customers table
type StripeCustomersQuery = *psql.ViewQuery[*StripeCustomer, StripeCustomerSlice]

// stripeCustomerR is where relationships are stored.
type stripeCustomerR struct {
	IDUser *User `json:"IDUser"` // stripe_customers.stripe_customers_id_fkey
}

type stripeCustomerColumnNames struct {
	ID             string
	StripeID       string
	BillingAddress string
	PaymentMethod  string
	CreatedAt      string
	UpdatedAt      string
}

var StripeCustomerColumns = buildStripeCustomerColumns("stripe_customers")

type stripeCustomerColumns struct {
	tableAlias     string
	ID             psql.Expression
	StripeID       psql.Expression
	BillingAddress psql.Expression
	PaymentMethod  psql.Expression
	CreatedAt      psql.Expression
	UpdatedAt      psql.Expression
}

func (c stripeCustomerColumns) Alias() string {
	return c.tableAlias
}

func (stripeCustomerColumns) AliasedAs(alias string) stripeCustomerColumns {
	return buildStripeCustomerColumns(alias)
}

func buildStripeCustomerColumns(alias string) stripeCustomerColumns {
	return stripeCustomerColumns{
		tableAlias:     alias,
		ID:             psql.Quote(alias, "id"),
		StripeID:       psql.Quote(alias, "stripe_id"),
		BillingAddress: psql.Quote(alias, "billing_address"),
		PaymentMethod:  psql.Quote(alias, "payment_method"),
		CreatedAt:      psql.Quote(alias, "created_at"),
		UpdatedAt:      psql.Quote(alias, "updated_at"),
	}
}

type stripeCustomerWhere[Q psql.Filterable] struct {
	ID             psql.WhereMod[Q, uuid.UUID]
	StripeID       psql.WhereMod[Q, string]
	BillingAddress psql.WhereNullMod[Q, types.JSON[json.RawMessage]]
	PaymentMethod  psql.WhereNullMod[Q, types.JSON[json.RawMessage]]
	CreatedAt      psql.WhereMod[Q, time.Time]
	UpdatedAt      psql.WhereMod[Q, time.Time]
}

func (stripeCustomerWhere[Q]) AliasedAs(alias string) stripeCustomerWhere[Q] {
	return buildStripeCustomerWhere[Q](buildStripeCustomerColumns(alias))
}

func buildStripeCustomerWhere[Q psql.Filterable](cols stripeCustomerColumns) stripeCustomerWhere[Q] {
	return stripeCustomerWhere[Q]{
		ID:             psql.Where[Q, uuid.UUID](cols.ID),
		StripeID:       psql.Where[Q, string](cols.StripeID),
		BillingAddress: psql.WhereNull[Q, types.JSON[json.RawMessage]](cols.BillingAddress),
		PaymentMethod:  psql.WhereNull[Q, types.JSON[json.RawMessage]](cols.PaymentMethod),
		CreatedAt:      psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:      psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var StripeCustomerErrors = &stripeCustomerErrors{
	ErrUniqueStripeCustomersPkey: &UniqueConstraintError{s: "stripe_customers_pkey"},

	ErrUniqueStripeCustomersStripeIdKey: &UniqueConstraintError{s: "stripe_customers_stripe_id_key"},
}

type stripeCustomerErrors struct {
	ErrUniqueStripeCustomersPkey *UniqueConstraintError

	ErrUniqueStripeCustomersStripeIdKey *UniqueConstraintError
}

// StripeCustomerSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type StripeCustomerSetter struct {
	ID             omit.Val[uuid.UUID]                       `db:"id,pk" json:"id"`
	StripeID       omit.Val[string]                          `db:"stripe_id" json:"stripe_id"`
	BillingAddress omitnull.Val[types.JSON[json.RawMessage]] `db:"billing_address" json:"billing_address"`
	PaymentMethod  omitnull.Val[types.JSON[json.RawMessage]] `db:"payment_method" json:"payment_method"`
	CreatedAt      omit.Val[time.Time]                       `db:"created_at" json:"created_at"`
	UpdatedAt      omit.Val[time.Time]                       `db:"updated_at" json:"updated_at"`
}

func (s StripeCustomerSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.StripeID.IsUnset() {
		vals = append(vals, "stripe_id")
	}

	if !s.BillingAddress.IsUnset() {
		vals = append(vals, "billing_address")
	}

	if !s.PaymentMethod.IsUnset() {
		vals = append(vals, "payment_method")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s StripeCustomerSetter) Overwrite(t *StripeCustomer) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.StripeID.IsUnset() {
		t.StripeID, _ = s.StripeID.Get()
	}
	if !s.BillingAddress.IsUnset() {
		t.BillingAddress, _ = s.BillingAddress.GetNull()
	}
	if !s.PaymentMethod.IsUnset() {
		t.PaymentMethod, _ = s.PaymentMethod.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *StripeCustomerSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return StripeCustomers.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.StripeID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.StripeID)
		}

		if s.BillingAddress.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.BillingAddress)
		}

		if s.PaymentMethod.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.PaymentMethod)
		}

		if s.CreatedAt.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s StripeCustomerSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s StripeCustomerSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.StripeID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "stripe_id")...),
			psql.Arg(s.StripeID),
		}})
	}

	if !s.BillingAddress.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "billing_address")...),
			psql.Arg(s.BillingAddress),
		}})
	}

	if !s.PaymentMethod.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "payment_method")...),
			psql.Arg(s.PaymentMethod),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindStripeCustomer retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindStripeCustomer(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*StripeCustomer, error) {
	if len(cols) == 0 {
		return StripeCustomers.Query(
			SelectWhere.StripeCustomers.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return StripeCustomers.Query(
		SelectWhere.StripeCustomers.ID.EQ(IDPK),
		sm.Columns(StripeCustomers.Columns().Only(cols...)),
	).One(ctx, exec)
}

// StripeCustomerExists checks the presence of a single record by primary key
func StripeCustomerExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return StripeCustomers.Query(
		SelectWhere.StripeCustomers.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after StripeCustomer is retrieved from the database
func (o *StripeCustomer) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = StripeCustomers.AfterSelectHooks.RunHooks(ctx, exec, StripeCustomerSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = StripeCustomers.AfterInsertHooks.RunHooks(ctx, exec, StripeCustomerSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = StripeCustomers.AfterUpdateHooks.RunHooks(ctx, exec, StripeCustomerSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = StripeCustomers.AfterDeleteHooks.RunHooks(ctx, exec, StripeCustomerSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the StripeCustomer
func (o *StripeCustomer) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *StripeCustomer) pkEQ() dialect.Expression {
	return psql.Quote("stripe_customers", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the StripeCustomer
func (o *StripeCustomer) Update(ctx context.Context, exec bob.Executor, s *StripeCustomerSetter) error {
	v, err := StripeCustomers.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single StripeCustomer record with an executor
func (o *StripeCustomer) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := StripeCustomers.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the StripeCustomer using the executor
func (o *StripeCustomer) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := StripeCustomers.Query(
		SelectWhere.StripeCustomers.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after StripeCustomerSlice is retrieved from the database
func (o StripeCustomerSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = StripeCustomers.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = StripeCustomers.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = StripeCustomers.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = StripeCustomers.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o StripeCustomerSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("stripe_customers", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o StripeCustomerSlice) copyMatchingRows(from ...*StripeCustomer) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o StripeCustomerSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return StripeCustomers.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *StripeCustomer:
				o.copyMatchingRows(retrieved)
			case []*StripeCustomer:
				o.copyMatchingRows(retrieved...)
			case StripeCustomerSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a StripeCustomer or a slice of StripeCustomer
				// then run the AfterUpdateHooks on the slice
				_, err = StripeCustomers.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o StripeCustomerSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return StripeCustomers.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *StripeCustomer:
				o.copyMatchingRows(retrieved)
			case []*StripeCustomer:
				o.copyMatchingRows(retrieved...)
			case StripeCustomerSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a StripeCustomer or a slice of StripeCustomer
				// then run the AfterDeleteHooks on the slice
				_, err = StripeCustomers.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o StripeCustomerSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals StripeCustomerSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := StripeCustomers.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o StripeCustomerSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := StripeCustomers.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o StripeCustomerSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := StripeCustomers.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type stripeCustomerJoins[Q dialect.Joinable] struct {
	typ    string
	IDUser func(context.Context) modAs[Q, userColumns]
}

func (j stripeCustomerJoins[Q]) aliasedAs(alias string) stripeCustomerJoins[Q] {
	return buildStripeCustomerJoins[Q](buildStripeCustomerColumns(alias), j.typ)
}

func buildStripeCustomerJoins[Q dialect.Joinable](cols stripeCustomerColumns, typ string) stripeCustomerJoins[Q] {
	return stripeCustomerJoins[Q]{
		typ:    typ,
		IDUser: stripeCustomersJoinIDUser[Q](cols, typ),
	}
}

func stripeCustomersJoinIDUser[Q dialect.Joinable](from stripeCustomerColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

// IDUser starts a query for related objects on users
func (o *StripeCustomer) IDUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os StripeCustomerSlice) IDUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *StripeCustomer) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "IDUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("stripeCustomer cannot load %T as %q", retrieved, name)
		}

		o.R.IDUser = rel

		if rel != nil {
			rel.R.IDStripeCustomer = o
		}
		return nil
	default:
		return fmt.Errorf("stripeCustomer has no relationship %q", name)
	}
}

func PreloadStripeCustomerIDUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "IDUser",
		Sides: []orm.RelSide{
			{
				From: TableNames.StripeCustomers,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.StripeCustomers.ID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadStripeCustomerIDUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadStripeCustomerIDUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load StripeCustomerIDUser", retrieved)
		}

		err := loader.LoadStripeCustomerIDUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadStripeCustomerIDUser loads the stripeCustomer's IDUser into the .R struct
func (o *StripeCustomer) LoadStripeCustomerIDUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.IDUser = nil

	related, err := o.IDUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.IDStripeCustomer = o

	o.R.IDUser = related
	return nil
}

// LoadStripeCustomerIDUser loads the stripeCustomer's IDUser into the .R struct
func (os StripeCustomerSlice) LoadStripeCustomerIDUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.IDUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.ID != rel.ID {
				continue
			}

			rel.R.IDStripeCustomer = o

			o.R.IDUser = rel
			break
		}
	}

	return nil
}

func attachStripeCustomerIDUser0(ctx context.Context, exec bob.Executor, count int, stripeCustomer0 *StripeCustomer, user1 *User) (*StripeCustomer, error) {
	setter := &StripeCustomerSetter{
		ID: omit.From(user1.ID),
	}

	err := stripeCustomer0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachStripeCustomerIDUser0: %w", err)
	}

	return stripeCustomer0, nil
}

func (stripeCustomer0 *StripeCustomer) InsertIDUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachStripeCustomerIDUser0(ctx, exec, 1, stripeCustomer0, user1)
	if err != nil {
		return err
	}

	stripeCustomer0.R.IDUser = user1

	user1.R.IDStripeCustomer = stripeCustomer0

	return nil
}

func (stripeCustomer0 *StripeCustomer) AttachIDUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachStripeCustomerIDUser0(ctx, exec, 1, stripeCustomer0, user1)
	if err != nil {
		return err
	}

	stripeCustomer0.R.IDUser = user1

	user1.R.IDStripeCustomer = stripeCustomer0

	return nil
}
