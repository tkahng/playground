services:
  db:
    build:
      context: .
      dockerfile: Dockerfile.database
    container_name: database
    platform: linux/arm64
    ports:
      - "5432:5432"
    # command: postgres -c config_file=/etc/postgresql/postgresql.conf
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - .env

  app:
    depends_on:
      - db
    image: playground:latest
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - 8080:8080
    env_file:
      - .env

  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/loki-config.yaml
    container_name: loki
    ports:
      - 3100:3100
    volumes:
      - ./loki:/etc/loki
      - ./loki-data:/loki-data

  vector:
    image: timberio/vector:latest-alpine
    volumes:
      - ./vector:/etc/vector
      - /var/run/docker.sock:/var/run/docker.sock
    command: ["-c", "/etc/vector/vector.yaml"]
    ports:
      - "8686:8686"
    container_name: vector
    depends_on:
      - loki
      - app

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - loki
      - app
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1

        datasources:
          - name: Loki
            isDefault: true
            type: loki
            access: proxy
            url: http://loki:3100
            editable: true
        EOF
        /run.sh
    ports:
      - "3000:3000"

volumes:
  postgres-data:
